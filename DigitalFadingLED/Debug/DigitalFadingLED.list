
DigitalFadingLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007b88  08007b88  00017b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d10  08007d10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d18  08007d18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000078  08007d98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  08007d98  00020834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f94  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad2  00000000  00000000  0003303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00035b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00036b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022776  00000000  00000000  00037ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c9f  00000000  00000000  0005a316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce358  00000000  00000000  0006dfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c30d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  0013c360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b6c 	.word	0x08007b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007b6c 	.word	0x08007b6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <eepromRead>:

#include "34AA02_EEPROM.h"

static uint8_t eepromStatusLogLen = 0;

uint8_t eepromRead(EEPROM_MemTypeDef address, uint8_t dev_address){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
  uint16_t dev = (10 << 4) + (dev_address << 1);
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	33a0      	adds	r3, #160	; 0xa0
 8000e9a:	81fb      	strh	r3, [r7, #14]
  uint8_t data = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	733b      	strb	r3, [r7, #12]
  
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, dev, address, I2C_MEMADD_SIZE_8BIT, &data, 1U, HAL_MAX_DELAY);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	89f9      	ldrh	r1, [r7, #14]
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2301      	movs	r3, #1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <eepromRead+0x5c>)
 8000eba:	f002 f9eb 	bl	8003294 <HAL_I2C_Mem_Read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	737b      	strb	r3, [r7, #13]
  
  // Log eeprom issues
  if(status != HAL_OK){
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <eepromRead+0x50>
    saveStatus(status);
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f912 	bl	80010f4 <saveStatus>
  }

  return data;
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200006ac 	.word	0x200006ac

08000ee0 <eepromWrite>:

HAL_StatusTypeDef eepromWrite(EEPROM_MemTypeDef address, uint8_t data, uint8_t dev_address){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	460b      	mov	r3, r1
 8000eec:	71bb      	strb	r3, [r7, #6]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	717b      	strb	r3, [r7, #5]
  uint16_t dev = (10 << 4) + (dev_address << 1);
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	33a0      	adds	r3, #160	; 0xa0
 8000efc:	81fb      	strh	r3, [r7, #14]

  uint8_t buf[2] = {address, data};
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	723b      	strb	r3, [r7, #8]
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	727b      	strb	r3, [r7, #9]

  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, dev, buf, 2, HAL_MAX_DELAY);
 8000f06:	f107 0208 	add.w	r2, r7, #8
 8000f0a:	89f9      	ldrh	r1, [r7, #14]
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2302      	movs	r3, #2
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <eepromWrite+0x58>)
 8000f16:	f002 f8bf 	bl	8003098 <HAL_I2C_Master_Transmit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	737b      	strb	r3, [r7, #13]

  // Log eeprom issues
  if(status != HAL_OK){
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <eepromWrite+0x4c>
    saveStatus(status);
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f8e4 	bl	80010f4 <saveStatus>
  }

  return status;
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200006ac 	.word	0x200006ac

08000f3c <readSavedData>:

void readSavedData(uint16_t *buf, uint8_t dev_address){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
  uint16_t data;

  //ID
  buf[0] = eepromRead(ID, dev_address);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ff97 	bl	8000e80 <eepromRead>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f8a9 	bl	80010b4 <eepromReady>
  //R
  buf[1] = eepromRead(RED, dev_address);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	f7ff ff8a 	bl	8000e80 <eepromRead>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3302      	adds	r3, #2
 8000f74:	b292      	uxth	r2, r2
 8000f76:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f89a 	bl	80010b4 <eepromReady>
  //G
  buf[2] = eepromRead(GREEN, dev_address);
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	4619      	mov	r1, r3
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff ff7b 	bl	8000e80 <eepromRead>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3304      	adds	r3, #4
 8000f92:	b292      	uxth	r2, r2
 8000f94:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f88b 	bl	80010b4 <eepromReady>
  //B
  buf[3] = eepromRead(BLUE, dev_address);
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f7ff ff6c 	bl	8000e80 <eepromRead>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3306      	adds	r3, #6
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f87c 	bl	80010b4 <eepromReady>
  //L1 upper 2 bits
  data = eepromRead(LUM_UP, dev_address) << 8;
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2004      	movs	r0, #4
 8000fc2:	f7ff ff5d 	bl	8000e80 <eepromRead>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	81fb      	strh	r3, [r7, #14]
  eepromReady(dev_address);
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f86f 	bl	80010b4 <eepromReady>
  //L2 lower 8 bits
  buf[4] = data + eepromRead(LUM_LOW, dev_address);
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f7ff ff50 	bl	8000e80 <eepromRead>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b299      	uxth	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	89fa      	ldrh	r2, [r7, #14]
 8000fea:	440a      	add	r2, r1
 8000fec:	b292      	uxth	r2, r2
 8000fee:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f85e 	bl	80010b4 <eepromReady>
  //Rate
  buf[5] = eepromRead(RATE, dev_address);
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2006      	movs	r0, #6
 8000ffe:	f7ff ff3f 	bl	8000e80 <eepromRead>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	330a      	adds	r3, #10
 800100a:	b292      	uxth	r2, r2
 800100c:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f84f 	bl	80010b4 <eepromReady>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <setSavedData>:

void setSavedData(uint8_t dev_address, uint8_t* data){
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	6039      	str	r1, [r7, #0]
 8001028:	71fb      	strb	r3, [r7, #7]
  
  eepromWrite(RED, data[0], dev_address);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	4619      	mov	r1, r3
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff ff54 	bl	8000ee0 <eepromWrite>
  HAL_Delay(5);
 8001038:	2005      	movs	r0, #5
 800103a:	f001 fb6b 	bl	8002714 <HAL_Delay>
  eepromWrite(GREEN, data[1], dev_address);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	4619      	mov	r1, r3
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff ff49 	bl	8000ee0 <eepromWrite>
  HAL_Delay(5);
 800104e:	2005      	movs	r0, #5
 8001050:	f001 fb60 	bl	8002714 <HAL_Delay>
  eepromWrite(BLUE, data[2], dev_address);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3302      	adds	r3, #2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	4619      	mov	r1, r3
 800105e:	2003      	movs	r0, #3
 8001060:	f7ff ff3e 	bl	8000ee0 <eepromWrite>
  HAL_Delay(5);
 8001064:	2005      	movs	r0, #5
 8001066:	f001 fb55 	bl	8002714 <HAL_Delay>
  eepromWrite(LUM_UP, data[3], dev_address);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3303      	adds	r3, #3
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	4619      	mov	r1, r3
 8001074:	2004      	movs	r0, #4
 8001076:	f7ff ff33 	bl	8000ee0 <eepromWrite>
  HAL_Delay(5);
 800107a:	2005      	movs	r0, #5
 800107c:	f001 fb4a 	bl	8002714 <HAL_Delay>
  eepromWrite(LUM_LOW, data[4], dev_address);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3304      	adds	r3, #4
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	4619      	mov	r1, r3
 800108a:	2005      	movs	r0, #5
 800108c:	f7ff ff28 	bl	8000ee0 <eepromWrite>
  HAL_Delay(5);
 8001090:	2005      	movs	r0, #5
 8001092:	f001 fb3f 	bl	8002714 <HAL_Delay>
  eepromWrite(RATE, data[5], 0);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3305      	adds	r3, #5
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	2006      	movs	r0, #6
 80010a2:	f7ff ff1d 	bl	8000ee0 <eepromWrite>
  HAL_Delay(5);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f001 fb34 	bl	8002714 <HAL_Delay>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <eepromReady>:

void eepromReady(uint8_t dev_address){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  uint16_t dev = (10 << 4) + (dev_address << 1);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	33a0      	adds	r3, #160	; 0xa0
 80010c8:	81fb      	strh	r3, [r7, #14]
  while(HAL_I2C_IsDeviceReady(&hi2c1, dev, 1, HAL_MAX_DELAY) == HAL_BUSY){
 80010ca:	e002      	b.n	80010d2 <eepromReady+0x1e>
      HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f001 fb21 	bl	8002714 <HAL_Delay>
  while(HAL_I2C_IsDeviceReady(&hi2c1, dev, 1, HAL_MAX_DELAY) == HAL_BUSY){
 80010d2:	89f9      	ldrh	r1, [r7, #14]
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2201      	movs	r2, #1
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <eepromReady+0x3c>)
 80010dc:	f002 fb00 	bl	80036e0 <HAL_I2C_IsDeviceReady>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d0f2      	beq.n	80010cc <eepromReady+0x18>
  }
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200006ac 	.word	0x200006ac

080010f4 <saveStatus>:

void saveStatus(HAL_StatusTypeDef status){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if(eepromStatusLogLen == 1024){
	eepromStatusLogLen = 0;
  }
  
  eepromStatusLog[eepromStatusLogLen];
  eepromStatusLogLen++;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <saveStatus+0x24>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <saveStatus+0x24>)
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000094 	.word	0x20000094

0800111c <getStatusLogLen>:

uint16_t getStatusLogLen(void){
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return eepromStatusLogLen;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <getStatusLogLen+0x14>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000094 	.word	0x20000094

08001134 <setStatusLogLen>:

void setStatusLogLen(uint16_t len){
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
  eepromStatusLogLen = len;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <setStatusLogLen+0x20>)
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000094 	.word	0x20000094

08001158 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	4b97      	ldr	r3, [pc, #604]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a96      	ldr	r2, [pc, #600]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b94      	ldr	r3, [pc, #592]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	4b90      	ldr	r3, [pc, #576]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a8f      	ldr	r2, [pc, #572]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <MX_GPIO_Init+0x278>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a88      	ldr	r2, [pc, #544]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b86      	ldr	r3, [pc, #536]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a81      	ldr	r2, [pc, #516]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a7a      	ldr	r2, [pc, #488]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <MX_GPIO_Init+0x278>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a73      	ldr	r2, [pc, #460]	; (80013d0 <MX_GPIO_Init+0x278>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <MX_GPIO_Init+0x278>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	486e      	ldr	r0, [pc, #440]	; (80013d4 <MX_GPIO_Init+0x27c>)
 800121c:	f001 fdde 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2101      	movs	r1, #1
 8001224:	486c      	ldr	r0, [pc, #432]	; (80013d8 <MX_GPIO_Init+0x280>)
 8001226:	f001 fdd9 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	486b      	ldr	r0, [pc, #428]	; (80013dc <MX_GPIO_Init+0x284>)
 8001230:	f001 fdd4 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001234:	2308      	movs	r3, #8
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4862      	ldr	r0, [pc, #392]	; (80013d4 <MX_GPIO_Init+0x27c>)
 800124c:	f001 fc2a 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001250:	2301      	movs	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	485c      	ldr	r0, [pc, #368]	; (80013d8 <MX_GPIO_Init+0x280>)
 8001268:	f001 fc1c 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800126c:	2308      	movs	r3, #8
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127c:	2305      	movs	r3, #5
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4854      	ldr	r0, [pc, #336]	; (80013d8 <MX_GPIO_Init+0x280>)
 8001288:	f001 fc0c 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <MX_GPIO_Init+0x288>)
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4851      	ldr	r0, [pc, #324]	; (80013e4 <MX_GPIO_Init+0x28c>)
 80012a0:	f001 fc00 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012a4:	2310      	movs	r3, #16
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012b4:	2306      	movs	r3, #6
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4849      	ldr	r0, [pc, #292]	; (80013e4 <MX_GPIO_Init+0x28c>)
 80012c0:	f001 fbf0 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012c4:	23e0      	movs	r3, #224	; 0xe0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d4:	2305      	movs	r3, #5
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4841      	ldr	r0, [pc, #260]	; (80013e4 <MX_GPIO_Init+0x28c>)
 80012e0:	f001 fbe0 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012e4:	2304      	movs	r3, #4
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	483c      	ldr	r0, [pc, #240]	; (80013e8 <MX_GPIO_Init+0x290>)
 80012f8:	f001 fbd4 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800130e:	2305      	movs	r3, #5
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4833      	ldr	r0, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x290>)
 800131a:	f001 fbc3 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800131e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001330:	2306      	movs	r3, #6
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <MX_GPIO_Init+0x280>)
 800133c:	f001 fbb2 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <MX_GPIO_Init+0x28c>)
 8001356:	f001 fba5 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800135a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800136c:	230a      	movs	r3, #10
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	481b      	ldr	r0, [pc, #108]	; (80013e4 <MX_GPIO_Init+0x28c>)
 8001378:	f001 fb94 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800137c:	2310      	movs	r3, #16
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_GPIO_Init+0x284>)
 8001394:	f001 fb86 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001398:	2320      	movs	r3, #32
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_GPIO_Init+0x284>)
 80013ac:	f001 fb7a 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_GPIO_Init+0x294>)
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0x27c>)
 80013c4:	f001 fb6e 	bl	8002aa4 <HAL_GPIO_Init>

}
 80013c8:	bf00      	nop
 80013ca:	3730      	adds	r7, #48	; 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	10110000 	.word	0x10110000
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	10120000 	.word	0x10120000

080013f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C1_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <MX_I2C1_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_I2C1_Init+0x50>)
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_I2C1_Init+0x58>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_I2C1_Init+0x50>)
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001412:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <MX_I2C1_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_I2C1_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_I2C1_Init+0x50>)
 800142e:	f001 fcef 	bl	8002e10 <HAL_I2C_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001438:	f000 f932 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200006ac 	.word	0x200006ac
 8001444:	40005400 	.word	0x40005400
 8001448:	00061a80 	.word	0x00061a80

0800144c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001494:	2301      	movs	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149c:	2304      	movs	r3, #4
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a8:	f001 fafc 	bl	8002aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f001 f8a5 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f857 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f7ff fe35 	bl	8001158 <MX_GPIO_Init>
  MX_TIM3_Init();
 80014ee:	f000 fe3b 	bl	8002168 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014f2:	f000 fe93 	bl	800221c <MX_TIM4_Init>
  MX_TIM7_Init();
 80014f6:	f000 feff 	bl	80022f8 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80014fa:	f000 fff5 	bl	80024e8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80014fe:	f7ff ff77 	bl	80013f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  setSavedData();

  //Start uart rx interrupt
  HAL_UART_Receive_IT(&huart3, buf, len);
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <main+0xa4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	491e      	ldr	r1, [pc, #120]	; (8001584 <main+0xa8>)
 800150c:	481e      	ldr	r0, [pc, #120]	; (8001588 <main+0xac>)
 800150e:	f004 f97c 	bl	800580a <HAL_UART_Receive_IT>

  //Start Color channels
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	481d      	ldr	r0, [pc, #116]	; (800158c <main+0xb0>)
 8001516:	f003 fadd 	bl	8004ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800151a:	2104      	movs	r1, #4
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <main+0xb0>)
 800151e:	f003 fad9 	bl	8004ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001522:	2108      	movs	r1, #8
 8001524:	4819      	ldr	r0, [pc, #100]	; (800158c <main+0xb0>)
 8001526:	f003 fad5 	bl	8004ad4 <HAL_TIM_PWM_Start>

  //Start luminance channel
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800152a:	2100      	movs	r1, #0
 800152c:	4818      	ldr	r0, [pc, #96]	; (8001590 <main+0xb4>)
 800152e:	f003 fad1 	bl	8004ad4 <HAL_TIM_PWM_Start>

  //Start luminance fade value update timer
  HAL_TIM_Base_Start_IT(&htim7);
 8001532:	4818      	ldr	r0, [pc, #96]	; (8001594 <main+0xb8>)
 8001534:	f003 fa0e 	bl	8004954 <HAL_TIM_Base_Start_IT>

  //Get Saved state from EEPROM
  uint16_t buf[6] = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
  readSavedData(buf, EEPROMADDRESS);
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fcf8 	bl	8000f3c <readSavedData>

  //setID(buf[0])
  uint8_t startcolors[3] = {(uint8_t)buf[1], (uint8_t)buf[2], (uint8_t)buf[3]};
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	703b      	strb	r3, [r7, #0]
 8001552:	893b      	ldrh	r3, [r7, #8]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	707b      	strb	r3, [r7, #1]
 8001558:	897b      	ldrh	r3, [r7, #10]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	70bb      	strb	r3, [r7, #2]
  SetColorValues(startcolors);
 800155e:	463b      	mov	r3, r7
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fd45 	bl	8001ff0 <SetColorValues>
  SetLuminanceValue(buf[4]);
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fd6d 	bl	8002048 <SetLuminanceValue>
  SetRateValue(buf[5]);
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fd87 	bl	8002084 <SetRateValue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      CheckCommand();
 8001576:	f000 fc55 	bl	8001e24 <CheckCommand>
      ProcessLuminance();
 800157a:	f000 fd93 	bl	80020a4 <ProcessLuminance>
      CheckCommand();
 800157e:	e7fa      	b.n	8001576 <main+0x9a>
 8001580:	20000000 	.word	0x20000000
 8001584:	20000700 	.word	0x20000700
 8001588:	200007dc 	.word	0x200007dc
 800158c:	20000704 	.word	0x20000704
 8001590:	2000074c 	.word	0x2000074c
 8001594:	20000794 	.word	0x20000794

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	; 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fee2 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <SystemClock_Config+0xcc>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <SystemClock_Config+0xcc>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <SystemClock_Config+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <SystemClock_Config+0xd0>)
 80015e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fe:	2302      	movs	r3, #2
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001608:	2308      	movs	r3, #8
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800160c:	23c8      	movs	r3, #200	; 0xc8
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001614:	2307      	movs	r3, #7
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f002 fcd5 	bl	8003fcc <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001628:	f000 f83a 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800163e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2103      	movs	r1, #3
 800164a:	4618      	mov	r0, r3
 800164c:	f002 ff36 	bl	80044bc <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001656:	f000 f823 	bl	80016a0 <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3750      	adds	r7, #80	; 0x50
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  ProcessSerial(buf);
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <HAL_UART_RxCpltCallback+0x28>)
 8001676:	f000 fba9 	bl	8001dcc <ProcessSerial>
  HAL_UART_Receive_IT(&huart3, buf, len);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_UART_RxCpltCallback+0x2c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	4904      	ldr	r1, [pc, #16]	; (8001694 <HAL_UART_RxCpltCallback+0x28>)
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_UART_RxCpltCallback+0x30>)
 8001686:	f004 f8c0 	bl	800580a <HAL_UART_Receive_IT>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000700 	.word	0x20000700
 8001698:	20000000 	.word	0x20000000
 800169c:	200007dc 	.word	0x200007dc

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <SendSerial>:
uint8_t len_in = 0;				// Serial in length
uint8_t i_in = 0;				// Serial in index

uint8_t command_term = 0;			// termination char flag

void SendSerial(uint8_t* buf, uint16_t len){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart3, buf, len, 1000);
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <SendSerial+0x24>)
 80016c2:	f004 f810 	bl	80056e6 <HAL_UART_Transmit>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200007dc 	.word	0x200007dc

080016d4 <SerialCommands>:

void SerialCommands(uint8_t* input, uint8_t in_len){
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af04      	add	r7, sp, #16
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint8_t error_flag = 0; // Indicates Value errors
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  //Check for EEPROM Errors
  if(getStatusLogLen){
    EEPROMError();
 80016ec:	f000 fb28 	bl	8001d40 <EEPROMError>
  }

  if(strncmp((char*)input, "COLOR?", 6U) == 0){
 80016f0:	2206      	movs	r2, #6
 80016f2:	49b2      	ldr	r1, [pc, #712]	; (80019bc <SerialCommands+0x2e8>)
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f004 fe63 	bl	80063c0 <strncmp>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d14a      	bne.n	8001796 <SerialCommands+0xc2>
	  uint8_t colors[3] = {0, 0, 0};
 8001700:	4aaf      	ldr	r2, [pc, #700]	; (80019c0 <SerialCommands+0x2ec>)
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	4611      	mov	r1, r2
 800170a:	8019      	strh	r1, [r3, #0]
 800170c:	3302      	adds	r3, #2
 800170e:	0c12      	lsrs	r2, r2, #16
 8001710:	701a      	strb	r2, [r3, #0]

	  uint8_t len_out = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  GetColorValues(colors);
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc47 	bl	8001fb0 <GetColorValues>

    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
        colors[0], colors[1], colors[2]);
 8001722:	f897 3020 	ldrb.w	r3, [r7, #32]
    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
 8001726:	461a      	mov	r2, r3
        colors[0], colors[1], colors[2]);
 8001728:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
 800172c:	4619      	mov	r1, r3
        colors[0], colors[1], colors[2]);
 800172e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	460b      	mov	r3, r1
 8001736:	49a3      	ldr	r1, [pc, #652]	; (80019c4 <SerialCommands+0x2f0>)
 8001738:	48a3      	ldr	r0, [pc, #652]	; (80019c8 <SerialCommands+0x2f4>)
 800173a:	f004 fe21 	bl	8006380 <siprintf>

    len_out += 22;
 800173e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001742:	3316      	adds	r3, #22
 8001744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    for(uint8_t i = 0; i < 3; i++){
 8001748:	2300      	movs	r3, #0
 800174a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800174e:	e016      	b.n	800177e <SerialCommands+0xaa>
      
      len_out += NumberLen(colors[i]);
 8001750:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001754:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001758:	4413      	add	r3, r2
 800175a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f000 faa9 	bl	8001cb8 <NumberLen>
 8001766:	4603      	mov	r3, r0
 8001768:	b2da      	uxtb	r2, r3
 800176a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800176e:	4413      	add	r3, r2
 8001770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for(uint8_t i = 0; i < 3; i++){
 8001774:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001778:	3301      	adds	r3, #1
 800177a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800177e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001782:	2b02      	cmp	r3, #2
 8001784:	d9e4      	bls.n	8001750 <SerialCommands+0x7c>
    }

    SendSerial(serial_out, len_out);
 8001786:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800178a:	b29b      	uxth	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	488e      	ldr	r0, [pc, #568]	; (80019c8 <SerialCommands+0x2f4>)
 8001790:	f7ff ff8c 	bl	80016ac <SendSerial>

  else{
      sprintf((char*)serial_out, "Error: No Command\n\r");
      SendSerial(serial_out, 19);
  }
}
 8001794:	e1f1      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "COLOR", 5U) == 0){
 8001796:	2205      	movs	r2, #5
 8001798:	498c      	ldr	r1, [pc, #560]	; (80019cc <SerialCommands+0x2f8>)
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f004 fe10 	bl	80063c0 <strncmp>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d14d      	bne.n	8001842 <SerialCommands+0x16e>
    i = 6;
 80017a6:	2306      	movs	r3, #6
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t colors[3] = {0, 0, 0};
 80017ac:	4a84      	ldr	r2, [pc, #528]	; (80019c0 <SerialCommands+0x2ec>)
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4611      	mov	r1, r2
 80017b6:	8019      	strh	r1, [r3, #0]
 80017b8:	3302      	adds	r3, #2
 80017ba:	0c12      	lsrs	r2, r2, #16
 80017bc:	701a      	strb	r2, [r3, #0]
    for(uint8_t j = 0; j < sizeof(colors); j++){
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80017c4:	e02c      	b.n	8001820 <SerialCommands+0x14c>
    	colors[j] = (uint8_t)ParseNumber(input, &i, &error_flag);
 80017c6:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80017ca:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f9e5 	bl	8001ba0 <ParseNumber>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017e4:	440b      	add	r3, r1
 80017e6:	f803 2c24 	strb.w	r2, [r3, #-36]
    	if(input[i] == '\r' || input[i] == '\n'){
 80017ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b0d      	cmp	r3, #13
 80017f8:	d016      	beq.n	8001828 <SerialCommands+0x154>
 80017fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b0a      	cmp	r3, #10
 8001808:	d00e      	beq.n	8001828 <SerialCommands+0x154>
    	i++;
 800180a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180e:	3301      	adds	r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j = 0; j < sizeof(colors); j++){
 8001816:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800181a:	3301      	adds	r3, #1
 800181c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001820:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001824:	2b02      	cmp	r3, #2
 8001826:	d9ce      	bls.n	80017c6 <SerialCommands+0xf2>
    if(error_flag){
 8001828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <SerialCommands+0x162>
	    ValueError();
 8001830:	f000 fa76 	bl	8001d20 <ValueError>
}
 8001834:	e1a1      	b.n	8001b7a <SerialCommands+0x4a6>
	    SetColorValues(colors);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fbd8 	bl	8001ff0 <SetColorValues>
}
 8001840:	e19b      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "LUM?", 4U) == 0){
 8001842:	2204      	movs	r2, #4
 8001844:	4962      	ldr	r1, [pc, #392]	; (80019d0 <SerialCommands+0x2fc>)
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f004 fdba 	bl	80063c0 <strncmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d121      	bne.n	8001896 <SerialCommands+0x1c2>
      uint8_t len_out = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      uint16_t val = GetLuminanceValue();
 8001858:	f000 fbe8 	bl	800202c <GetLuminanceValue>
 800185c:	4603      	mov	r3, r0
 800185e:	853b      	strh	r3, [r7, #40]	; 0x28
      len_out += NumberLen(val);
 8001860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fa28 	bl	8001cb8 <NumberLen>
 8001868:	4603      	mov	r3, r0
 800186a:	b2da      	uxtb	r2, r3
 800186c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001870:	4413      	add	r3, r2
 8001872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      sprintf((char*)serial_out, "%i\n\r", val);
 8001876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001878:	461a      	mov	r2, r3
 800187a:	4956      	ldr	r1, [pc, #344]	; (80019d4 <SerialCommands+0x300>)
 800187c:	4852      	ldr	r0, [pc, #328]	; (80019c8 <SerialCommands+0x2f4>)
 800187e:	f004 fd7f 	bl	8006380 <siprintf>
      SendSerial(serial_out, len_out + 2);
 8001882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001886:	b29b      	uxth	r3, r3
 8001888:	3302      	adds	r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	484e      	ldr	r0, [pc, #312]	; (80019c8 <SerialCommands+0x2f4>)
 8001890:	f7ff ff0c 	bl	80016ac <SendSerial>
}
 8001894:	e171      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "LUM", 3U) == 0){
 8001896:	2203      	movs	r2, #3
 8001898:	494f      	ldr	r1, [pc, #316]	; (80019d8 <SerialCommands+0x304>)
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f004 fd90 	bl	80063c0 <strncmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d11f      	bne.n	80018e6 <SerialCommands+0x212>
    i = 4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t val = ParseNumber(input, &i, &error_flag);
 80018ac:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80018b0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f972 	bl	8001ba0 <ParseNumber>
 80018bc:	4603      	mov	r3, r0
 80018be:	877b      	strh	r3, [r7, #58]	; 0x3a
    if(val > 1000){
 80018c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c6:	d902      	bls.n	80018ce <SerialCommands+0x1fa>
    	val = 1000;
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	877b      	strh	r3, [r7, #58]	; 0x3a
    if(error_flag){
 80018ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <SerialCommands+0x208>
    	ValueError();
 80018d6:	f000 fa23 	bl	8001d20 <ValueError>
}
 80018da:	e14e      	b.n	8001b7a <SerialCommands+0x4a6>
	    SetLuminanceValue(val);
 80018dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fbb2 	bl	8002048 <SetLuminanceValue>
}
 80018e4:	e149      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "RATE?", 5U) == 0){
 80018e6:	2205      	movs	r2, #5
 80018e8:	493c      	ldr	r1, [pc, #240]	; (80019dc <SerialCommands+0x308>)
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f004 fd68 	bl	80063c0 <strncmp>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d121      	bne.n	800193a <SerialCommands+0x266>
      uint8_t len_out = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      uint16_t val = GetRateValue();
 80018fc:	f000 fbb6 	bl	800206c <GetRateValue>
 8001900:	4603      	mov	r3, r0
 8001902:	85bb      	strh	r3, [r7, #44]	; 0x2c
      len_out += NumberLen(val);
 8001904:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f9d6 	bl	8001cb8 <NumberLen>
 800190c:	4603      	mov	r3, r0
 800190e:	b2da      	uxtb	r2, r3
 8001910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001914:	4413      	add	r3, r2
 8001916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      sprintf((char*)serial_out, "%i\n\r", val);
 800191a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800191c:	461a      	mov	r2, r3
 800191e:	492d      	ldr	r1, [pc, #180]	; (80019d4 <SerialCommands+0x300>)
 8001920:	4829      	ldr	r0, [pc, #164]	; (80019c8 <SerialCommands+0x2f4>)
 8001922:	f004 fd2d 	bl	8006380 <siprintf>
      SendSerial(serial_out, len_out + 2);
 8001926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192a:	b29b      	uxth	r3, r3
 800192c:	3302      	adds	r3, #2
 800192e:	b29b      	uxth	r3, r3
 8001930:	4619      	mov	r1, r3
 8001932:	4825      	ldr	r0, [pc, #148]	; (80019c8 <SerialCommands+0x2f4>)
 8001934:	f7ff feba 	bl	80016ac <SendSerial>
}
 8001938:	e11f      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "RATE", 4U) == 0){
 800193a:	2204      	movs	r2, #4
 800193c:	4928      	ldr	r1, [pc, #160]	; (80019e0 <SerialCommands+0x30c>)
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f004 fd3e 	bl	80063c0 <strncmp>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11d      	bne.n	8001986 <SerialCommands+0x2b2>
    i = 5;
 800194a:	2305      	movs	r3, #5
 800194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t val = ParseNumber(input, &i, &error_flag);
 8001950:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001954:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f920 	bl	8001ba0 <ParseNumber>
 8001960:	4603      	mov	r3, r0
 8001962:	873b      	strh	r3, [r7, #56]	; 0x38
    if(val > 255){
 8001964:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d901      	bls.n	800196e <SerialCommands+0x29a>
    	val = 255;
 800196a:	23ff      	movs	r3, #255	; 0xff
 800196c:	873b      	strh	r3, [r7, #56]	; 0x38
    if(error_flag){
 800196e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <SerialCommands+0x2a8>
	    ValueError();
 8001976:	f000 f9d3 	bl	8001d20 <ValueError>
}
 800197a:	e0fe      	b.n	8001b7a <SerialCommands+0x4a6>
	    SetRateValue(val);
 800197c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb80 	bl	8002084 <SetRateValue>
}
 8001984:	e0f9      	b.n	8001b7a <SerialCommands+0x4a6>
 else if(strncmp((char*)input, "SAVE?", 5U) == 0){
 8001986:	2205      	movs	r2, #5
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <SerialCommands+0x310>)
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f004 fd18 	bl	80063c0 <strncmp>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d162      	bne.n	8001a5c <SerialCommands+0x388>
    uint8_t len_out = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t buf[6] = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
    readSavedData(buf, EEPROMADDRESS);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fac4 	bl	8000f3c <readSavedData>
    for(uint8_t i = 0; i < sizeof(buf); i++){
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80019ba:	e02c      	b.n	8001a16 <SerialCommands+0x342>
 80019bc:	08007b88 	.word	0x08007b88
 80019c0:	08007c40 	.word	0x08007c40
 80019c4:	08007b90 	.word	0x08007b90
 80019c8:	20000098 	.word	0x20000098
 80019cc:	08007bb0 	.word	0x08007bb0
 80019d0:	08007bb8 	.word	0x08007bb8
 80019d4:	08007bc0 	.word	0x08007bc0
 80019d8:	08007bc8 	.word	0x08007bc8
 80019dc:	08007bcc 	.word	0x08007bcc
 80019e0:	08007bd4 	.word	0x08007bd4
 80019e4:	08007bdc 	.word	0x08007bdc
      len_out += NumberLen(buf[i]);
 80019e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019f2:	4413      	add	r3, r2
 80019f4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f95d 	bl	8001cb8 <NumberLen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a06:	4413      	add	r3, r2
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for(uint8_t i = 0; i < sizeof(buf); i++){
 8001a0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a10:	3301      	adds	r3, #1
 8001a12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001a16:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a1a:	2b0b      	cmp	r3, #11
 8001a1c:	d9e4      	bls.n	80019e8 <SerialCommands+0x314>
    len_out += 40;
 8001a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a22:	3328      	adds	r3, #40	; 0x28
 8001a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8001a28:	8a3b      	ldrh	r3, [r7, #16]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8001a2a:	461c      	mov	r4, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8001a2c:	8a7b      	ldrh	r3, [r7, #18]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8001a2e:	461d      	mov	r5, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8001a30:	8abb      	ldrh	r3, [r7, #20]
 8001a32:	8afa      	ldrh	r2, [r7, #22]
 8001a34:	8b39      	ldrh	r1, [r7, #24]
 8001a36:	8b78      	ldrh	r0, [r7, #26]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8001a38:	9003      	str	r0, [sp, #12]
 8001a3a:	9102      	str	r1, [sp, #8]
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	462b      	mov	r3, r5
 8001a42:	4622      	mov	r2, r4
 8001a44:	494f      	ldr	r1, [pc, #316]	; (8001b84 <SerialCommands+0x4b0>)
 8001a46:	4850      	ldr	r0, [pc, #320]	; (8001b88 <SerialCommands+0x4b4>)
 8001a48:	f004 fc9a 	bl	8006380 <siprintf>
    SendSerial(serial_out, len_out);
 8001a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	484c      	ldr	r0, [pc, #304]	; (8001b88 <SerialCommands+0x4b4>)
 8001a56:	f7ff fe29 	bl	80016ac <SendSerial>
}
 8001a5a:	e08e      	b.n	8001b7a <SerialCommands+0x4a6>
 else if(strncmp((char*)input, "SAVE", 4U) == 0){
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	494b      	ldr	r1, [pc, #300]	; (8001b8c <SerialCommands+0x4b8>)
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f004 fcad 	bl	80063c0 <strncmp>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d122      	bne.n	8001ab2 <SerialCommands+0x3de>
    uint8_t data[6] = {0};
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	2300      	movs	r3, #0
 8001a72:	81bb      	strh	r3, [r7, #12]
    GetColorValues(data);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa99 	bl	8001fb0 <GetColorValues>
    uint16_t lum = GetLuminanceValue();
 8001a7e:	f000 fad5 	bl	800202c <GetLuminanceValue>
 8001a82:	4603      	mov	r3, r0
 8001a84:	863b      	strh	r3, [r7, #48]	; 0x30
    data[3] = (uint8_t)((lum & 0x0300) >> 8);
 8001a86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a88:	121b      	asrs	r3, r3, #8
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)(lum & 0x00FF);
 8001a94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)GetRateValue();
 8001a9a:	f000 fae7 	bl	800206c <GetRateValue>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	737b      	strb	r3, [r7, #13]
    setSavedData(EEPROMADDRESS, data);
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fab7 	bl	800101e <setSavedData>
}
 8001ab0:	e063      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "ID?", 3U) == 0){
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4936      	ldr	r1, [pc, #216]	; (8001b90 <SerialCommands+0x4bc>)
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f004 fc82 	bl	80063c0 <strncmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d127      	bne.n	8001b12 <SerialCommands+0x43e>
    uint8_t len_out = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint8_t val = eepromRead(ID, EEPROMADDRESS);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff f9d8 	bl	8000e80 <eepromRead>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	len_out += NumberLen(val);
 8001ad6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f8eb 	bl	8001cb8 <NumberLen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001aea:	4413      	add	r3, r2
 8001aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	sprintf((char*)serial_out, "%i\n\r", val);
 8001af0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001af4:	461a      	mov	r2, r3
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <SerialCommands+0x4c0>)
 8001af8:	4823      	ldr	r0, [pc, #140]	; (8001b88 <SerialCommands+0x4b4>)
 8001afa:	f004 fc41 	bl	8006380 <siprintf>
	SendSerial(serial_out, len_out + 2);
 8001afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3302      	adds	r3, #2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481f      	ldr	r0, [pc, #124]	; (8001b88 <SerialCommands+0x4b4>)
 8001b0c:	f7ff fdce 	bl	80016ac <SendSerial>
}
 8001b10:	e033      	b.n	8001b7a <SerialCommands+0x4a6>
  else if(strncmp((char*)input, "ID", 2U) == 0){
 8001b12:	2202      	movs	r2, #2
 8001b14:	4920      	ldr	r1, [pc, #128]	; (8001b98 <SerialCommands+0x4c4>)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f004 fc52 	bl	80063c0 <strncmp>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d123      	bne.n	8001b6a <SerialCommands+0x496>
    i = 3;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t val = ParseNumber(input, &i, &error_flag);
 8001b28:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001b2c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001b30:	4619      	mov	r1, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f834 	bl	8001ba0 <ParseNumber>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(val > 255){
 8001b3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d901      	bls.n	8001b46 <SerialCommands+0x472>
    	val = 255;
 8001b42:	23ff      	movs	r3, #255	; 0xff
 8001b44:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(error_flag){
 8001b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <SerialCommands+0x480>
	    ValueError();
 8001b4e:	f000 f8e7 	bl	8001d20 <ValueError>
}
 8001b52:	e012      	b.n	8001b7a <SerialCommands+0x4a6>
	    eepromWrite(ID, (uint8_t)val, EEPROMADDRESS);
 8001b54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff f9bf 	bl	8000ee0 <eepromWrite>
      HAL_Delay(5);
 8001b62:	2005      	movs	r0, #5
 8001b64:	f000 fdd6 	bl	8002714 <HAL_Delay>
}
 8001b68:	e007      	b.n	8001b7a <SerialCommands+0x4a6>
      sprintf((char*)serial_out, "Error: No Command\n\r");
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <SerialCommands+0x4c8>)
 8001b6c:	4806      	ldr	r0, [pc, #24]	; (8001b88 <SerialCommands+0x4b4>)
 8001b6e:	f004 fc07 	bl	8006380 <siprintf>
      SendSerial(serial_out, 19);
 8001b72:	2113      	movs	r1, #19
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <SerialCommands+0x4b4>)
 8001b76:	f7ff fd99 	bl	80016ac <SendSerial>
}
 8001b7a:	bf00      	nop
 8001b7c:	3740      	adds	r7, #64	; 0x40
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	08007be4 	.word	0x08007be4
 8001b88:	20000098 	.word	0x20000098
 8001b8c:	08007c1c 	.word	0x08007c1c
 8001b90:	08007c24 	.word	0x08007c24
 8001b94:	08007bc0 	.word	0x08007bc0
 8001b98:	08007c28 	.word	0x08007c28
 8001b9c:	08007c2c 	.word	0x08007c2c

08001ba0 <ParseNumber>:

uint16_t ParseNumber(uint8_t* input, uint8_t* i, uint8_t* error){
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]

  uint8_t col = 0; // largest decimal place column number
 8001bac:	2300      	movs	r3, #0
 8001bae:	75fb      	strb	r3, [r7, #23]

  while(input[*i + col] != '\r' && input[*i + col] != '\n' && input[*i + col] != ',' && *i < 20){
 8001bb0:	e002      	b.n	8001bb8 <ParseNumber+0x18>
      col++;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	75fb      	strb	r3, [r7, #23]
  while(input[*i + col] != '\r' && input[*i + col] != '\n' && input[*i + col] != ',' && *i < 20){
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b0d      	cmp	r3, #13
 8001bcc:	d019      	beq.n	8001c02 <ParseNumber+0x62>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d00e      	beq.n	8001c02 <ParseNumber+0x62>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	4413      	add	r3, r2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b2c      	cmp	r3, #44	; 0x2c
 8001bf8:	d003      	beq.n	8001c02 <ParseNumber+0x62>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b13      	cmp	r3, #19
 8001c00:	d9d7      	bls.n	8001bb2 <ParseNumber+0x12>
  }

  uint16_t val = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	82bb      	strh	r3, [r7, #20]
  while(col != 0){
 8001c06:	e04a      	b.n	8001c9e <ParseNumber+0xfe>

      if((uint8_t)(input[*i] - 0x30) > 9){
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3b30      	subs	r3, #48	; 0x30
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d902      	bls.n	8001c22 <ParseNumber+0x82>
	  *error = 1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
      }

      val += (input[*i] - 0x30) * pow(10, col - 1);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3b30      	subs	r3, #48	; 0x30
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc6f 	bl	8000514 <__aeabi_i2d>
 8001c36:	4604      	mov	r4, r0
 8001c38:	460d      	mov	r5, r1
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc68 	bl	8000514 <__aeabi_i2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	ec43 2b11 	vmov	d1, r2, r3
 8001c4c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001cb0 <ParseNumber+0x110>
 8001c50:	f004 ffd6 	bl	8006c00 <pow>
 8001c54:	ec53 2b10 	vmov	r2, r3, d0
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f7fe fcc4 	bl	80005e8 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4614      	mov	r4, r2
 8001c66:	461d      	mov	r5, r3
 8001c68:	8abb      	ldrh	r3, [r7, #20]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc52 	bl	8000514 <__aeabi_i2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fb00 	bl	800027c <__adddf3>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ff60 	bl	8000b48 <__aeabi_d2uiz>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	82bb      	strh	r3, [r7, #20]
      *i += 1;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	701a      	strb	r2, [r3, #0]
      col--;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
  while(col != 0){
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1b1      	bne.n	8001c08 <ParseNumber+0x68>
  }

  return val;
 8001ca4:	8abb      	ldrh	r3, [r7, #20]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bdb0      	pop	{r4, r5, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	40240000 	.word	0x40240000

08001cb8 <NumberLen>:

/**
  *NumberLen
  */
uint16_t NumberLen(uint16_t num){
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
    uint16_t len = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	81fb      	strh	r3, [r7, #14]
    if(num >= 10000){
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d903      	bls.n	8001cd8 <NumberLen+0x20>
        len += 5;
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	3305      	adds	r3, #5
 8001cd4:	81fb      	strh	r3, [r7, #14]
 8001cd6:	e01b      	b.n	8001d10 <NumberLen+0x58>
    }
    else if(num >= 1000){
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cde:	d303      	bcc.n	8001ce8 <NumberLen+0x30>
        len += 4;
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	81fb      	strh	r3, [r7, #14]
 8001ce6:	e013      	b.n	8001d10 <NumberLen+0x58>
    }
    else if(num >= 100){
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b63      	cmp	r3, #99	; 0x63
 8001cec:	d903      	bls.n	8001cf6 <NumberLen+0x3e>
        len += 3;
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	81fb      	strh	r3, [r7, #14]
 8001cf4:	e00c      	b.n	8001d10 <NumberLen+0x58>
    }
    else if(num >= 10){
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	d903      	bls.n	8001d04 <NumberLen+0x4c>
        len += 2;
 8001cfc:	89fb      	ldrh	r3, [r7, #14]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	81fb      	strh	r3, [r7, #14]
 8001d02:	e005      	b.n	8001d10 <NumberLen+0x58>
    }
    else if(num < 10){
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d802      	bhi.n	8001d10 <NumberLen+0x58>
        len += 1;
 8001d0a:	89fb      	ldrh	r3, [r7, #14]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	81fb      	strh	r3, [r7, #14]
    }

    return len;
 8001d10:	89fb      	ldrh	r3, [r7, #14]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <ValueError>:

void ValueError(void){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  sprintf((char*)serial_out, "Value Error\n\r");	//TODO: Stuttering Error message when error occurs after second comma
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <ValueError+0x18>)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <ValueError+0x1c>)
 8001d28:	f004 fb2a 	bl	8006380 <siprintf>
  SendSerial(serial_out, 13);
 8001d2c:	210d      	movs	r1, #13
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ValueError+0x1c>)
 8001d30:	f7ff fcbc 	bl	80016ac <SendSerial>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	08007c44 	.word	0x08007c44
 8001d3c:	20000098 	.word	0x20000098

08001d40 <EEPROMError>:

void EEPROMError(void){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  uint16_t eepromStatusLogLen = getStatusLogLen();
 8001d46:	f7ff f9e9 	bl	800111c <getStatusLogLen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]

  for(eepromStatusLogLen; eepromStatusLogLen > 0; eepromStatusLogLen--){
 8001d4e:	e028      	b.n	8001da2 <EEPROMError+0x62>
    if(eepromStatusLog[eepromStatusLogLen - 1] == HAL_BUSY){
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <EEPROMError+0x78>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d108      	bne.n	8001d6e <EEPROMError+0x2e>
      sprintf((char*)serial_out, "EEPROM BUSY\n\r");
 8001d5c:	4917      	ldr	r1, [pc, #92]	; (8001dbc <EEPROMError+0x7c>)
 8001d5e:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <EEPROMError+0x80>)
 8001d60:	f004 fb0e 	bl	8006380 <siprintf>
      SendSerial(serial_out, 13);
 8001d64:	210d      	movs	r1, #13
 8001d66:	4816      	ldr	r0, [pc, #88]	; (8001dc0 <EEPROMError+0x80>)
 8001d68:	f7ff fca0 	bl	80016ac <SendSerial>
 8001d6c:	e016      	b.n	8001d9c <EEPROMError+0x5c>
    }
    else if(eepromStatusLog[eepromStatusLogLen - 1] == HAL_ERROR){
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <EEPROMError+0x78>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <EEPROMError+0x4c>
      sprintf((char*)serial_out, "EEPROM ERROR\n\r");
 8001d7a:	4912      	ldr	r1, [pc, #72]	; (8001dc4 <EEPROMError+0x84>)
 8001d7c:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <EEPROMError+0x80>)
 8001d7e:	f004 faff 	bl	8006380 <siprintf>
      SendSerial(serial_out, 14);
 8001d82:	210e      	movs	r1, #14
 8001d84:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <EEPROMError+0x80>)
 8001d86:	f7ff fc91 	bl	80016ac <SendSerial>
 8001d8a:	e007      	b.n	8001d9c <EEPROMError+0x5c>
    }
    else{
      sprintf((char*)serial_out, "EEPROM FAIL\n\r");
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <EEPROMError+0x88>)
 8001d8e:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <EEPROMError+0x80>)
 8001d90:	f004 faf6 	bl	8006380 <siprintf>
      SendSerial(serial_out, 13);
 8001d94:	210d      	movs	r1, #13
 8001d96:	480a      	ldr	r0, [pc, #40]	; (8001dc0 <EEPROMError+0x80>)
 8001d98:	f7ff fc88 	bl	80016ac <SendSerial>
  for(eepromStatusLogLen; eepromStatusLogLen > 0; eepromStatusLogLen--){
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	80fb      	strh	r3, [r7, #6]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1d3      	bne.n	8001d50 <EEPROMError+0x10>
    }
  }
  
  setStatusLogLen(0);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff f9c3 	bl	8001134 <setStatusLogLen>

}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002ac 	.word	0x200002ac
 8001dbc:	08007c54 	.word	0x08007c54
 8001dc0:	20000098 	.word	0x20000098
 8001dc4:	08007c64 	.word	0x08007c64
 8001dc8:	08007c74 	.word	0x08007c74

08001dcc <ProcessSerial>:

void ProcessSerial(uint8_t* Buf){
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  serial_in[len_in] = *Buf;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <ProcessSerial+0x4c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7819      	ldrb	r1, [r3, #0]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <ProcessSerial+0x50>)
 8001de0:	5499      	strb	r1, [r3, r2]
  len_in++;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <ProcessSerial+0x4c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <ProcessSerial+0x4c>)
 8001dec:	701a      	strb	r2, [r3, #0]

  if(*Buf == '\n' || *Buf == '\r'){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b0a      	cmp	r3, #10
 8001df4:	d003      	beq.n	8001dfe <ProcessSerial+0x32>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b0d      	cmp	r3, #13
 8001dfc:	d105      	bne.n	8001e0a <ProcessSerial+0x3e>
    command_term = 1;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <ProcessSerial+0x54>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
    len_in = 0;
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <ProcessSerial+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000297 	.word	0x20000297
 8001e1c:	20000198 	.word	0x20000198
 8001e20:	20000299 	.word	0x20000299

08001e24 <CheckCommand>:

void CheckCommand(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  if(command_term == 1){
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <CheckCommand+0x24>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <CheckCommand+0x1e>
    command_term = 0;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <CheckCommand+0x24>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
    SerialCommands(serial_in, i_in);
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <CheckCommand+0x28>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <CheckCommand+0x2c>)
 8001e3e:	f7ff fc49 	bl	80016d4 <SerialCommands>
  }
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000299 	.word	0x20000299
 8001e4c:	20000298 	.word	0x20000298
 8001e50:	20000198 	.word	0x20000198

08001e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e92:	2007      	movs	r0, #7
 8001e94:	f000 fd32 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 fbf0 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <USART3_IRQHandler+0x10>)
 8001efe:	f003 fcb5 	bl	800586c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200007dc 	.word	0x200007dc

08001f0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <TIM7_IRQHandler+0x10>)
 8001f12:	f002 fea7 	bl	8004c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000794 	.word	0x20000794

08001f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <_sbrk+0x5c>)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_sbrk+0x60>)
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_sbrk+0x64>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <_sbrk+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d207      	bcs.n	8001f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f50:	f004 f9e4 	bl	800631c <__errno>
 8001f54:	4603      	mov	r3, r0
 8001f56:	220c      	movs	r2, #12
 8001f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	e009      	b.n	8001f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <_sbrk+0x64>)
 8001f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20020000 	.word	0x20020000
 8001f80:	00000400 	.word	0x00000400
 8001f84:	2000029c 	.word	0x2000029c
 8001f88:	20000838 	.word	0x20000838

08001f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <SystemInit+0x20>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <SystemInit+0x20>)
 8001f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <GetColorValues>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void GetColorValues(uint8_t* colors){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  colors[0] = (uint8_t)htim4.Instance->CCR1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <GetColorValues+0x3c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	701a      	strb	r2, [r3, #0]
  colors[1] = (uint8_t)htim4.Instance->CCR2;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <GetColorValues+0x3c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
  colors[2] = (uint8_t)htim4.Instance->CCR3;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <GetColorValues+0x3c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	20000704 	.word	0x20000704

08001ff0 <SetColorValues>:

void SetColorValues(uint8_t* colors){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  htim4.Instance->CCR1 = (uint32_t)colors[0];
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <SetColorValues+0x38>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
  htim4.Instance->CCR2 = (uint32_t)colors[1];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3301      	adds	r3, #1
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <SetColorValues+0x38>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
  htim4.Instance->CCR3 = (uint32_t)colors[2];
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3302      	adds	r3, #2
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SetColorValues+0x38>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000704 	.word	0x20000704

0800202c <GetLuminanceValue>:

uint16_t GetLuminanceValue(void){
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return (uint16_t)htim3.Instance->CCR1;
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <GetLuminanceValue+0x18>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	b29b      	uxth	r3, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000074c 	.word	0x2000074c

08002048 <SetLuminanceValue>:

void SetLuminanceValue(uint16_t lum){
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  htim3.Instance->CCR1 = (uint32_t)lum;
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SetLuminanceValue+0x20>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	635a      	str	r2, [r3, #52]	; 0x34
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000074c 	.word	0x2000074c

0800206c <GetRateValue>:

uint16_t rate = 0;
uint16_t GetRateValue(void){
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return rate;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <GetRateValue+0x14>)
 8002072:	881b      	ldrh	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200002a0 	.word	0x200002a0

08002084 <SetRateValue>:

void SetRateValue(uint16_t val){
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  rate = val;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <SetRateValue+0x1c>)
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	8013      	strh	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	200002a0 	.word	0x200002a0

080020a4 <ProcessLuminance>:

uint8_t time_flag = 0;
uint8_t dir = 0;
void ProcessLuminance(void){
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  if(time_flag){
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <ProcessLuminance+0x88>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d037      	beq.n	8002120 <ProcessLuminance+0x7c>
    if(dir == 0){
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <ProcessLuminance+0x8c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <ProcessLuminance+0x2a>
	htim3.Instance->CCR1 = htim3.Instance->CCR1 + rate;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <ProcessLuminance+0x90>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <ProcessLuminance+0x94>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <ProcessLuminance+0x90>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	440a      	add	r2, r1
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
 80020cc:	e009      	b.n	80020e2 <ProcessLuminance+0x3e>
    }
    else{
	htim3.Instance->CCR1 = htim3.Instance->CCR1 - rate;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <ProcessLuminance+0x90>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <ProcessLuminance+0x94>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <ProcessLuminance+0x90>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1a52      	subs	r2, r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
    }
    if(dir == 0 && htim3.Instance->CCR1 > 1000){
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <ProcessLuminance+0x8c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <ProcessLuminance+0x5a>
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <ProcessLuminance+0x90>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f4:	d903      	bls.n	80020fe <ProcessLuminance+0x5a>
	dir = 1;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <ProcessLuminance+0x8c>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e00d      	b.n	800211a <ProcessLuminance+0x76>
    }
    else if(dir == 1 && htim3.Instance->CCR1 < rate){
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <ProcessLuminance+0x8c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d109      	bne.n	800211a <ProcessLuminance+0x76>
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <ProcessLuminance+0x90>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <ProcessLuminance+0x94>)
 800210e:	8812      	ldrh	r2, [r2, #0]
 8002110:	4293      	cmp	r3, r2
 8002112:	d202      	bcs.n	800211a <ProcessLuminance+0x76>
	dir = 0;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <ProcessLuminance+0x8c>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    }

    time_flag = 0;
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <ProcessLuminance+0x88>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
  }

}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	200002a2 	.word	0x200002a2
 8002130:	200002a3 	.word	0x200002a3
 8002134:	2000074c 	.word	0x2000074c
 8002138:	200002a0 	.word	0x200002a0

0800213c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  if (htim == &htim7){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d102      	bne.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x16>
      time_flag = 1;
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000794 	.word	0x20000794
 8002164:	200002a2 	.word	0x200002a2

08002168 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <MX_TIM3_Init+0xac>)
 800218c:	4a22      	ldr	r2, [pc, #136]	; (8002218 <MX_TIM3_Init+0xb0>)
 800218e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002190:	4b20      	ldr	r3, [pc, #128]	; (8002214 <MX_TIM3_Init+0xac>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_TIM3_Init+0xac>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <MX_TIM3_Init+0xac>)
 800219e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <MX_TIM3_Init+0xac>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_TIM3_Init+0xac>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021b0:	4818      	ldr	r0, [pc, #96]	; (8002214 <MX_TIM3_Init+0xac>)
 80021b2:	f002 fc3f 	bl	8004a34 <HAL_TIM_PWM_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021bc:	f7ff fa70 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	4619      	mov	r1, r3
 80021ce:	4811      	ldr	r0, [pc, #68]	; (8002214 <MX_TIM3_Init+0xac>)
 80021d0:	f003 f9ac 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021da:	f7ff fa61 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021de:	2360      	movs	r3, #96	; 0x60
 80021e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	4619      	mov	r1, r3
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <MX_TIM3_Init+0xac>)
 80021f6:	f002 fe3d 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002200:	f7ff fa4e 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <MX_TIM3_Init+0xac>)
 8002206:	f000 f90d 	bl	8002424 <HAL_TIM_MspPostInit>

}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000074c 	.word	0x2000074c
 8002218:	40000400 	.word	0x40000400

0800221c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002222:	f107 0320 	add.w	r3, r7, #32
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]
 800223c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <MX_TIM4_Init+0xd4>)
 8002240:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <MX_TIM4_Init+0xd8>)
 8002242:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <MX_TIM4_Init+0xd4>)
 8002246:	2231      	movs	r2, #49	; 0x31
 8002248:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <MX_TIM4_Init+0xd4>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <MX_TIM4_Init+0xd4>)
 8002252:	22ff      	movs	r2, #255	; 0xff
 8002254:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <MX_TIM4_Init+0xd4>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <MX_TIM4_Init+0xd4>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002262:	4823      	ldr	r0, [pc, #140]	; (80022f0 <MX_TIM4_Init+0xd4>)
 8002264:	f002 fbe6 	bl	8004a34 <HAL_TIM_PWM_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800226e:	f7ff fa17 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	4619      	mov	r1, r3
 8002280:	481b      	ldr	r0, [pc, #108]	; (80022f0 <MX_TIM4_Init+0xd4>)
 8002282:	f003 f953 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800228c:	f7ff fa08 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002290:	2360      	movs	r3, #96	; 0x60
 8002292:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	4619      	mov	r1, r3
 80022a6:	4812      	ldr	r0, [pc, #72]	; (80022f0 <MX_TIM4_Init+0xd4>)
 80022a8:	f002 fde4 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80022b2:	f7ff f9f5 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2204      	movs	r2, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MX_TIM4_Init+0xd4>)
 80022be:	f002 fdd9 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80022c8:	f7ff f9ea 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2208      	movs	r2, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_TIM4_Init+0xd4>)
 80022d4:	f002 fdce 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80022de:	f7ff f9df 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM4_Init+0xd4>)
 80022e4:	f000 f89e 	bl	8002424 <HAL_TIM_MspPostInit>

}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000704 	.word	0x20000704
 80022f4:	40000800 	.word	0x40000800

080022f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fe:	463b      	mov	r3, r7
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <MX_TIM7_Init+0x64>)
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <MX_TIM7_Init+0x68>)
 800230a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <MX_TIM7_Init+0x64>)
 800230e:	2213      	movs	r2, #19
 8002310:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <MX_TIM7_Init+0x64>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 25000;
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <MX_TIM7_Init+0x64>)
 800231a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800231e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_TIM7_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002326:	480d      	ldr	r0, [pc, #52]	; (800235c <MX_TIM7_Init+0x64>)
 8002328:	f002 fac4 	bl	80048b4 <HAL_TIM_Base_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002332:	f7ff f9b5 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800233e:	463b      	mov	r3, r7
 8002340:	4619      	mov	r1, r3
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <MX_TIM7_Init+0x64>)
 8002344:	f003 f8f2 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800234e:	f7ff f9a7 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000794 	.word	0x20000794
 8002360:	40001400 	.word	0x40001400

08002364 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <HAL_TIM_PWM_MspInit+0x64>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10e      	bne.n	8002394 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <HAL_TIM_PWM_MspInit+0x68>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a13      	ldr	r2, [pc, #76]	; (80023cc <HAL_TIM_PWM_MspInit+0x68>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_TIM_PWM_MspInit+0x68>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002392:	e012      	b.n	80023ba <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <HAL_TIM_PWM_MspInit+0x6c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10d      	bne.n	80023ba <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_PWM_MspInit+0x68>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_TIM_PWM_MspInit+0x68>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_TIM_PWM_MspInit+0x68>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40000800 	.word	0x40000800

080023d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_TIM_Base_MspInit+0x48>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d115      	bne.n	8002412 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_TIM_Base_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_Base_MspInit+0x4c>)
 80023f0:	f043 0320 	orr.w	r3, r3, #32
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_TIM_Base_MspInit+0x4c>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2037      	movs	r0, #55	; 0x37
 8002408:	f000 fa83 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800240c:	2037      	movs	r0, #55	; 0x37
 800240e:	f000 fa9c 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001400 	.word	0x40001400
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_TIM_MspPostInit+0xb0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11e      	bne.n	8002484 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_TIM_MspPostInit+0xb4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_TIM_MspPostInit+0xb4>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_TIM_MspPostInit+0xb4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002466:	2312      	movs	r3, #18
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2302      	movs	r3, #2
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002472:	2302      	movs	r3, #2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4817      	ldr	r0, [pc, #92]	; (80024dc <HAL_TIM_MspPostInit+0xb8>)
 800247e:	f000 fb11 	bl	8002aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002482:	e023      	b.n	80024cc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_TIM_MspPostInit+0xbc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11e      	bne.n	80024cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_TIM_MspPostInit+0xb4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_TIM_MspPostInit+0xb4>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_TIM_MspPostInit+0xb4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80024aa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024bc:	2302      	movs	r3, #2
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4807      	ldr	r0, [pc, #28]	; (80024e4 <HAL_TIM_MspPostInit+0xc0>)
 80024c8:	f000 faec 	bl	8002aa4 <HAL_GPIO_Init>
}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40000800 	.word	0x40000800
 80024e4:	40020c00 	.word	0x40020c00

080024e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <MX_USART3_UART_Init+0x50>)
 80024f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 80024f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 800250e:	220c      	movs	r2, #12
 8002510:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_USART3_UART_Init+0x4c>)
 8002520:	f003 f894 	bl	800564c <HAL_UART_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800252a:	f7ff f8b9 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200007dc 	.word	0x200007dc
 8002538:	40004800 	.word	0x40004800

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_UART_MspInit+0x94>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d134      	bne.n	80025c8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_UART_MspInit+0x98>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <HAL_UART_MspInit+0x98>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_UART_MspInit+0x98>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0x98>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <HAL_UART_MspInit+0x98>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_UART_MspInit+0x98>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002596:	f44f 7340 	mov.w	r3, #768	; 0x300
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a8:	2307      	movs	r3, #7
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4809      	ldr	r0, [pc, #36]	; (80025d8 <HAL_UART_MspInit+0x9c>)
 80025b4:	f000 fa76 	bl	8002aa4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2027      	movs	r0, #39	; 0x27
 80025be:	f000 f9a8 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025c2:	2027      	movs	r0, #39	; 0x27
 80025c4:	f000 f9c1 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40004800 	.word	0x40004800
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020c00 	.word	0x40020c00

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f8:	4c0b      	ldr	r4, [pc, #44]	; (8002628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002606:	f7ff fcc1 	bl	8001f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f003 fe8d 	bl	8006328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7fe ff65 	bl	80014dc <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002620:	08007d20 	.word	0x08007d20
  ldr r2, =_sbss
 8002624:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002628:	20000834 	.word	0x20000834

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>
	...

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f94f 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	2000      	movs	r0, #0
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fbf6 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f967 	bl	8002966 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 f92f 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000004 	.word	0x20000004
 80026cc:	2000000c 	.word	0x2000000c
 80026d0:	20000008 	.word	0x20000008

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	20000820 	.word	0x20000820

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000820 	.word	0x20000820

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000000c 	.word	0x2000000c

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff feb6 	bl	80026fc <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d008      	beq.n	80029b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e052      	b.n	8002a56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0216 	bic.w	r2, r2, #22
 80029be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_DMA_Abort+0x62>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0208 	bic.w	r2, r2, #8
 80029ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e013      	b.n	8002a2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff fe7b 	bl	80026fc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d90c      	bls.n	8002a2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2203      	movs	r2, #3
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e015      	b.n	8002a56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e4      	bne.n	8002a02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	223f      	movs	r2, #63	; 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d004      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e00c      	b.n	8002a96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	e16b      	b.n	8002d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	f040 815a 	bne.w	8002d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d005      	beq.n	8002af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d130      	bne.n	8002b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 0201 	and.w	r2, r3, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d017      	beq.n	8002b94 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d123      	bne.n	8002be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3208      	adds	r2, #8
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80b4 	beq.w	8002d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b60      	ldr	r3, [pc, #384]	; (8002db0 <HAL_GPIO_Init+0x30c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a5f      	ldr	r2, [pc, #380]	; (8002db0 <HAL_GPIO_Init+0x30c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <HAL_GPIO_Init+0x30c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c46:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_GPIO_Init+0x310>)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_GPIO_Init+0x314>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02b      	beq.n	8002cca <HAL_GPIO_Init+0x226>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a51      	ldr	r2, [pc, #324]	; (8002dbc <HAL_GPIO_Init+0x318>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d025      	beq.n	8002cc6 <HAL_GPIO_Init+0x222>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a50      	ldr	r2, [pc, #320]	; (8002dc0 <HAL_GPIO_Init+0x31c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01f      	beq.n	8002cc2 <HAL_GPIO_Init+0x21e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4f      	ldr	r2, [pc, #316]	; (8002dc4 <HAL_GPIO_Init+0x320>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_Init+0x21a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4e      	ldr	r2, [pc, #312]	; (8002dc8 <HAL_GPIO_Init+0x324>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0x216>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4d      	ldr	r2, [pc, #308]	; (8002dcc <HAL_GPIO_Init+0x328>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00d      	beq.n	8002cb6 <HAL_GPIO_Init+0x212>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4c      	ldr	r2, [pc, #304]	; (8002dd0 <HAL_GPIO_Init+0x32c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_Init+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	; (8002dd4 <HAL_GPIO_Init+0x330>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_GPIO_Init+0x20a>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e00e      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	e00c      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	e00a      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	e008      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e004      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x228>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	f002 0203 	and.w	r2, r2, #3
 8002cd2:	0092      	lsls	r2, r2, #2
 8002cd4:	4093      	lsls	r3, r2
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cdc:	4935      	ldr	r1, [pc, #212]	; (8002db4 <HAL_GPIO_Init+0x310>)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d0e:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d38:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	f67f ae90 	bls.w	8002ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40013800 	.word	0x40013800
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40021400 	.word	0x40021400
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40021c00 	.word	0x40021c00
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df8:	e003      	b.n	8002e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e12b      	b.n	800307a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe fb08 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e74:	f001 fcf6 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8002e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a81      	ldr	r2, [pc, #516]	; (8003084 <HAL_I2C_Init+0x274>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d807      	bhi.n	8002e94 <HAL_I2C_Init+0x84>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a80      	ldr	r2, [pc, #512]	; (8003088 <HAL_I2C_Init+0x278>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e006      	b.n	8002ea2 <HAL_I2C_Init+0x92>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a7d      	ldr	r2, [pc, #500]	; (800308c <HAL_I2C_Init+0x27c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	bf94      	ite	ls
 8002e9c:	2301      	movls	r3, #1
 8002e9e:	2300      	movhi	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0e7      	b.n	800307a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a78      	ldr	r2, [pc, #480]	; (8003090 <HAL_I2C_Init+0x280>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <HAL_I2C_Init+0x274>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d802      	bhi.n	8002ee4 <HAL_I2C_Init+0xd4>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	e009      	b.n	8002ef8 <HAL_I2C_Init+0xe8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	4a69      	ldr	r2, [pc, #420]	; (8003094 <HAL_I2C_Init+0x284>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	495c      	ldr	r1, [pc, #368]	; (8003084 <HAL_I2C_Init+0x274>)
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d819      	bhi.n	8002f4c <HAL_I2C_Init+0x13c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e59      	subs	r1, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_I2C_Init+0x138>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e59      	subs	r1, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	e051      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e04f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_I2C_Init+0x168>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e012      	b.n	8002f9e <HAL_I2C_Init+0x18e>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	0099      	lsls	r1, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x196>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <HAL_I2C_Init+0x1bc>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e58      	subs	r0, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	440b      	add	r3, r1
 8002fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6809      	ldr	r1, [r1, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800301a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6911      	ldr	r1, [r2, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	000186a0 	.word	0x000186a0
 8003088:	001e847f 	.word	0x001e847f
 800308c:	003d08ff 	.word	0x003d08ff
 8003090:	431bde83 	.word	0x431bde83
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	461a      	mov	r2, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	817b      	strh	r3, [r7, #10]
 80030a8:	4613      	mov	r3, r2
 80030aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff fb26 	bl	80026fc <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80e0 	bne.w	8003280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	4970      	ldr	r1, [pc, #448]	; (800328c <HAL_I2C_Master_Transmit+0x1f4>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fda0 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0d3      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x50>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0cc      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d007      	beq.n	800310e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	; 0x21
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	893a      	ldrh	r2, [r7, #8]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_I2C_Master_Transmit+0x1f8>)
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fbf0 	bl	800393c <I2C_MasterRequestWrite>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08d      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800317c:	e066      	b.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fe1a 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b04      	cmp	r3, #4
 8003194:	d107      	bne.n	80031a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x188>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6a39      	ldr	r1, [r7, #32]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fe0a 	bl	8003e3e <I2C_WaitOnBTFFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	2b04      	cmp	r3, #4
 8003236:	d107      	bne.n	8003248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01a      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d194      	bne.n	800317e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000

08003294 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ae:	f7ff fa25 	bl	80026fc <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	f040 8208 	bne.w	80036d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2319      	movs	r3, #25
 80032c8:	2201      	movs	r2, #1
 80032ca:	497b      	ldr	r1, [pc, #492]	; (80034b8 <HAL_I2C_Mem_Read+0x224>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fc9f 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	e1fb      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Mem_Read+0x56>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e1f4      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d007      	beq.n	8003310 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2222      	movs	r2, #34	; 0x22
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a5b      	ldr	r2, [pc, #364]	; (80034bc <HAL_I2C_Mem_Read+0x228>)
 8003350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003352:	88f8      	ldrh	r0, [r7, #6]
 8003354:	893a      	ldrh	r2, [r7, #8]
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4603      	mov	r3, r0
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fb6c 	bl	8003a40 <I2C_RequestMemoryRead>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1b0      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	d113      	bne.n	80033a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e184      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d11b      	bne.n	80033e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e164      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d11b      	bne.n	8003422 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	e144      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003438:	e138      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	2b03      	cmp	r3, #3
 8003440:	f200 80f1 	bhi.w	8003626 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b01      	cmp	r3, #1
 800344a:	d123      	bne.n	8003494 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fd35 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e139      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003492:	e10b      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	2b02      	cmp	r3, #2
 800349a:	d14e      	bne.n	800353a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	2200      	movs	r2, #0
 80034a4:	4906      	ldr	r1, [pc, #24]	; (80034c0 <HAL_I2C_Mem_Read+0x22c>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fbb2 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e10e      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
 80034b6:	bf00      	nop
 80034b8:	00100002 	.word	0x00100002
 80034bc:	ffff0000 	.word	0xffff0000
 80034c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003538:	e0b8      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2200      	movs	r2, #0
 8003542:	4966      	ldr	r1, [pc, #408]	; (80036dc <HAL_I2C_Mem_Read+0x448>)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fb63 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0bf      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	2200      	movs	r2, #0
 800359e:	494f      	ldr	r1, [pc, #316]	; (80036dc <HAL_I2C_Mem_Read+0x448>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fb35 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e091      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003624:	e042      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fc48 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e04c      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d118      	bne.n	80036ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f aec2 	bne.w	800343a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	00010004 	.word	0x00010004

080036e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036f0:	f7ff f804 	bl	80026fc <HAL_GetTick>
 80036f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	f040 8111 	bne.w	800392a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2319      	movs	r3, #25
 800370e:	2201      	movs	r2, #1
 8003710:	4988      	ldr	r1, [pc, #544]	; (8003934 <HAL_I2C_IsDeviceReady+0x254>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa7c 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	e104      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_I2C_IsDeviceReady+0x50>
 800372c:	2302      	movs	r3, #2
 800372e:	e0fd      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d007      	beq.n	8003756 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a70      	ldr	r2, [pc, #448]	; (8003938 <HAL_I2C_IsDeviceReady+0x258>)
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2200      	movs	r2, #0
 8003792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fa3a 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b0:	d103      	bne.n	80037ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0b6      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe ff95 	bl	80026fc <HAL_GetTick>
 80037d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003802:	e025      	b.n	8003850 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fe ff7a 	bl	80026fc <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <HAL_I2C_IsDeviceReady+0x13a>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22a0      	movs	r2, #160	; 0xa0
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2ba0      	cmp	r3, #160	; 0xa0
 800385a:	d005      	beq.n	8003868 <HAL_I2C_IsDeviceReady+0x188>
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_I2C_IsDeviceReady+0x188>
 8003862:	7dbb      	ldrb	r3, [r7, #22]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0cd      	beq.n	8003804 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d129      	bne.n	80038d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2319      	movs	r3, #25
 80038aa:	2201      	movs	r2, #1
 80038ac:	4921      	ldr	r1, [pc, #132]	; (8003934 <HAL_I2C_IsDeviceReady+0x254>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9ae 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e036      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e02c      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2319      	movs	r3, #25
 80038f2:	2201      	movs	r2, #1
 80038f4:	490f      	ldr	r1, [pc, #60]	; (8003934 <HAL_I2C_IsDeviceReady+0x254>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f98a 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e012      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3301      	adds	r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	f4ff af32 	bcc.w	800377a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	00100002 	.word	0x00100002
 8003938:	ffff0000 	.word	0xffff0000

0800393c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	460b      	mov	r3, r1
 800394a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d006      	beq.n	8003966 <I2C_MasterRequestWrite+0x2a>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d003      	beq.n	8003966 <I2C_MasterRequestWrite+0x2a>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003964:	d108      	bne.n	8003978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e00b      	b.n	8003990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	2b12      	cmp	r3, #18
 800397e:	d107      	bne.n	8003990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f937 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d103      	bne.n	80039c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e035      	b.n	8003a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039cc:	d108      	bne.n	80039e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	e01b      	b.n	8003a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039e0:	897b      	ldrh	r3, [r7, #10]
 80039e2:	11db      	asrs	r3, r3, #7
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0306 	and.w	r3, r3, #6
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f063 030f 	orn	r3, r3, #15
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <I2C_MasterRequestWrite+0xfc>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f95d 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e010      	b.n	8003a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4907      	ldr	r1, [pc, #28]	; (8003a3c <I2C_MasterRequestWrite+0x100>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f94d 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	00010008 	.word	0x00010008
 8003a3c:	00010002 	.word	0x00010002

08003a40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	817b      	strh	r3, [r7, #10]
 8003a52:	460b      	mov	r3, r1
 8003a54:	813b      	strh	r3, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8c2 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	d103      	bne.n	8003aaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0aa      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	4952      	ldr	r1, [pc, #328]	; (8003c0c <I2C_RequestMemoryRead+0x1cc>)
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f8fa 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e097      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aec:	6a39      	ldr	r1, [r7, #32]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f964 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d107      	bne.n	8003b12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e076      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1c:	893b      	ldrh	r3, [r7, #8]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]
 8003b26:	e021      	b.n	8003b6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b28:	893b      	ldrh	r3, [r7, #8]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f93e 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e050      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b62:	893b      	ldrh	r3, [r7, #8]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6e:	6a39      	ldr	r1, [r7, #32]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f923 	bl	8003dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d107      	bne.n	8003b94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e035      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f82b 	bl	8003c10 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d103      	bne.n	8003bd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e013      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bdc:	897b      	ldrh	r3, [r7, #10]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	4906      	ldr	r1, [pc, #24]	; (8003c0c <I2C_RequestMemoryRead+0x1cc>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f863 	bl	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	00010002 	.word	0x00010002

08003c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c20:	e025      	b.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d021      	beq.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe fd67 	bl	80026fc <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e023      	b.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10d      	bne.n	8003c94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	e00c      	b.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d0b6      	beq.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ccc:	e051      	b.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d123      	bne.n	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f043 0204 	orr.w	r2, r3, #4
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e046      	b.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d021      	beq.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe fce5 	bl	80026fc <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e020      	b.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10c      	bne.n	8003d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e00b      	b.n	8003dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d18d      	bne.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc8:	e02d      	b.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f8ce 	bl	8003f6c <I2C_IsAcknowledgeFailed>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e02d      	b.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d021      	beq.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fc8b 	bl	80026fc <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e007      	b.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d1ca      	bne.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e4a:	e02d      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f88d 	bl	8003f6c <I2C_IsAcknowledgeFailed>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e02d      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d021      	beq.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fe fc4a 	bl	80026fc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e007      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d1ca      	bne.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ecc:	e042      	b.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d119      	bne.n	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0210 	mvn.w	r2, #16
 8003ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e029      	b.n	8003f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fe fbf4 	bl	80026fc <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d116      	bne.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d1b5      	bne.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d11b      	bne.n	8003fbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e264      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d075      	beq.n	80040d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	4ba3      	ldr	r3, [pc, #652]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4ba0      	ldr	r3, [pc, #640]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b9d      	ldr	r3, [pc, #628]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b99      	ldr	r3, [pc, #612]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05b      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d157      	bne.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e23f      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x74>
 8004032:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a90      	ldr	r2, [pc, #576]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x98>
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a8a      	ldr	r2, [pc, #552]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a87      	ldr	r2, [pc, #540]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004064:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a83      	ldr	r2, [pc, #524]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a80      	ldr	r2, [pc, #512]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe fb3a 	bl	80026fc <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe fb36 	bl	80026fc <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e204      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xc0>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fb26 	bl	80026fc <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe fb22 	bl	80026fc <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e1f0      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0xe8>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d11c      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1c4      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b56      	ldr	r3, [pc, #344]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4952      	ldr	r1, [pc, #328]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	e03a      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_RCC_OscConfig+0x2b0>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe fadb 	bl	80026fc <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414a:	f7fe fad7 	bl	80026fc <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1a5      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4940      	ldr	r1, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_OscConfig+0x2b0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe faba 	bl	80026fc <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418c:	f7fe fab6 	bl	80026fc <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e184      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d030      	beq.n	8004218 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_RCC_OscConfig+0x2b4>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe fa9a 	bl	80026fc <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe fa96 	bl	80026fc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e164      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x200>
 80041ea:	e015      	b.n	8004218 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x2b4>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fe fa83 	bl	80026fc <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fe fa7f 	bl	80026fc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e14d      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a0 	beq.w	8004366 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d121      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a07      	ldr	r2, [pc, #28]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fe fa45 	bl	80026fc <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e011      	b.n	800429a <HAL_RCC_OscConfig+0x2ce>
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
 8004284:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fe fa38 	bl	80026fc <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e106      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCC_OscConfig+0x4e4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x2f0>
 80042ae:	4b81      	ldr	r3, [pc, #516]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a80      	ldr	r2, [pc, #512]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ba:	e01c      	b.n	80042f6 <HAL_RCC_OscConfig+0x32a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	d10c      	bne.n	80042de <HAL_RCC_OscConfig+0x312>
 80042c4:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a7a      	ldr	r2, [pc, #488]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	f043 0304 	orr.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
 80042d0:	4b78      	ldr	r3, [pc, #480]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4a77      	ldr	r2, [pc, #476]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	; 0x70
 80042dc:	e00b      	b.n	80042f6 <HAL_RCC_OscConfig+0x32a>
 80042de:	4b75      	ldr	r3, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a74      	ldr	r2, [pc, #464]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	4b72      	ldr	r3, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a71      	ldr	r2, [pc, #452]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d015      	beq.n	800432a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fe f9fd 	bl	80026fc <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fe f9f9 	bl	80026fc <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0c5      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ee      	beq.n	8004306 <HAL_RCC_OscConfig+0x33a>
 8004328:	e014      	b.n	8004354 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432a:	f7fe f9e7 	bl	80026fc <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fe f9e3 	bl	80026fc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0af      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004348:	4b5a      	ldr	r3, [pc, #360]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b56      	ldr	r3, [pc, #344]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 809b 	beq.w	80044a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d05c      	beq.n	8004436 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d141      	bne.n	8004408 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe f9b7 	bl	80026fc <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe f9b3 	bl	80026fc <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e081      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a4:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	4937      	ldr	r1, [pc, #220]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe f98c 	bl	80026fc <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe f988 	bl	80026fc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e056      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x41c>
 8004406:	e04e      	b.n	80044a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fe f975 	bl	80026fc <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe f971 	bl	80026fc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03f      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004428:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x44a>
 8004434:	e037      	b.n	80044a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e032      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d028      	beq.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d121      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d11a      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004478:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800447a:	4293      	cmp	r3, r2
 800447c:	d111      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	3b01      	subs	r3, #1
 800448c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40007000 	.word	0x40007000
 80044b4:	40023800 	.word	0x40023800
 80044b8:	42470060 	.word	0x42470060

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0cc      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d90c      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b65      	ldr	r3, [pc, #404]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d044      	beq.n	80045dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d119      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d003      	beq.n	800457a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458a:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e067      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4934      	ldr	r1, [pc, #208]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ac:	f7fe f8a6 	bl	80026fc <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fe f8a2 	bl	80026fc <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d20c      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f821 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe f806 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023c00 	.word	0x40023c00
 8004678:	40023800 	.word	0x40023800
 800467c:	08007c84 	.word	0x08007c84
 8004680:	20000004 	.word	0x20000004
 8004684:	20000008 	.word	0x20000008

08004688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	2300      	movs	r3, #0
 800469a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a0:	4b67      	ldr	r3, [pc, #412]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x40>
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	f200 80bd 	bhi.w	800482c <HAL_RCC_GetSysClockFreq+0x1a4>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x34>
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ba:	e0b7      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b61      	ldr	r3, [pc, #388]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046be:	60bb      	str	r3, [r7, #8]
       break;
 80046c0:	e0b7      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c2:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046c4:	60bb      	str	r3, [r7, #8]
      break;
 80046c6:	e0b4      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d2:	4b5b      	ldr	r3, [pc, #364]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04d      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046de:	4b58      	ldr	r3, [pc, #352]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	ea02 0800 	and.w	r8, r2, r0
 80046f6:	ea03 0901 	and.w	r9, r3, r1
 80046fa:	4640      	mov	r0, r8
 80046fc:	4649      	mov	r1, r9
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	014b      	lsls	r3, r1, #5
 8004708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800470c:	0142      	lsls	r2, r0, #5
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	ebb0 0008 	subs.w	r0, r0, r8
 8004716:	eb61 0109 	sbc.w	r1, r1, r9
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	018b      	lsls	r3, r1, #6
 8004724:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004728:	0182      	lsls	r2, r0, #6
 800472a:	1a12      	subs	r2, r2, r0
 800472c:	eb63 0301 	sbc.w	r3, r3, r1
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	00d9      	lsls	r1, r3, #3
 800473a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800473e:	00d0      	lsls	r0, r2, #3
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	eb12 0208 	adds.w	r2, r2, r8
 8004748:	eb43 0309 	adc.w	r3, r3, r9
 800474c:	f04f 0000 	mov.w	r0, #0
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	0259      	lsls	r1, r3, #9
 8004756:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800475a:	0250      	lsls	r0, r2, #9
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f7fc fa0c 	bl	8000b88 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4613      	mov	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e04a      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	ea02 0400 	and.w	r4, r2, r0
 8004792:	ea03 0501 	and.w	r5, r3, r1
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	014b      	lsls	r3, r1, #5
 80047a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a8:	0142      	lsls	r2, r0, #5
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	1b00      	subs	r0, r0, r4
 80047b0:	eb61 0105 	sbc.w	r1, r1, r5
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	018b      	lsls	r3, r1, #6
 80047be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c2:	0182      	lsls	r2, r0, #6
 80047c4:	1a12      	subs	r2, r2, r0
 80047c6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ca:	f04f 0000 	mov.w	r0, #0
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	00d9      	lsls	r1, r3, #3
 80047d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d8:	00d0      	lsls	r0, r2, #3
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	1912      	adds	r2, r2, r4
 80047e0:	eb45 0303 	adc.w	r3, r5, r3
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	0299      	lsls	r1, r3, #10
 80047ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047f2:	0290      	lsls	r0, r2, #10
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	f7fc f9c0 	bl	8000b88 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	3301      	adds	r3, #1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	60bb      	str	r3, [r7, #8]
      break;
 800482a:	e002      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800482e:	60bb      	str	r3, [r7, #8]
      break;
 8004830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004832:	68bb      	ldr	r3, [r7, #8]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
 8004844:	00f42400 	.word	0x00f42400
 8004848:	007a1200 	.word	0x007a1200

0800484c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <HAL_RCC_GetHCLKFreq+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004868:	f7ff fff0 	bl	800484c <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0a9b      	lsrs	r3, r3, #10
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	08007c94 	.word	0x08007c94

0800488c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004890:	f7ff ffdc 	bl	800484c <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0b5b      	lsrs	r3, r3, #13
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4903      	ldr	r1, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	08007c94 	.word	0x08007c94

080048b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e041      	b.n	800494a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fd7a 	bl	80023d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f000 fba4 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e04e      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d022      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d01d      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d018      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1c      	ldr	r2, [pc, #112]	; (8004a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00e      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d009      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d111      	bne.n	80049f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d010      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	e007      	b.n	8004a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40001800 	.word	0x40001800

08004a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e041      	b.n	8004aca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fd fc82 	bl	8002364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 fae4 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_TIM_PWM_Start+0x24>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e022      	b.n	8004b3e <HAL_TIM_PWM_Start+0x6a>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d109      	bne.n	8004b12 <HAL_TIM_PWM_Start+0x3e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e015      	b.n	8004b3e <HAL_TIM_PWM_Start+0x6a>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d109      	bne.n	8004b2c <HAL_TIM_PWM_Start+0x58>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e008      	b.n	8004b3e <HAL_TIM_PWM_Start+0x6a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07c      	b.n	8004c40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x82>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	e013      	b.n	8004b7e <HAL_TIM_PWM_Start+0xaa>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Start+0x92>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_PWM_Start+0xaa>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_PWM_Start+0xa2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	e003      	b.n	8004b7e <HAL_TIM_PWM_Start+0xaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2201      	movs	r2, #1
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fcaa 	bl	80054e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <HAL_TIM_PWM_Start+0x174>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_TIM_PWM_Start+0xcc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <HAL_TIM_PWM_Start+0x178>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0xd0>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xd2>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a22      	ldr	r2, [pc, #136]	; (8004c48 <HAL_TIM_PWM_Start+0x174>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d01d      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_TIM_PWM_Start+0x17c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <HAL_TIM_PWM_Start+0x180>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <HAL_TIM_PWM_Start+0x184>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <HAL_TIM_PWM_Start+0x178>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <HAL_TIM_PWM_Start+0x188>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x136>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <HAL_TIM_PWM_Start+0x18c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d111      	bne.n	8004c2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b06      	cmp	r3, #6
 8004c1a:	d010      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	e007      	b.n	8004c3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010400 	.word	0x40010400
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40001800 	.word	0x40001800

08004c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0202 	mvn.w	r2, #2
 8004c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9ac 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f99e 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f9af 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d122      	bne.n	8004d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d11b      	bne.n	8004d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0204 	mvn.w	r2, #4
 8004ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f982 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004d00:	e005      	b.n	8004d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f974 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f985 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d122      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d11b      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0208 	mvn.w	r2, #8
 8004d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f958 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f94a 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f95b 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0210 	mvn.w	r2, #16
 8004d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2208      	movs	r2, #8
 8004d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f92e 	bl	8005004 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f920 	bl	8004ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f931 	bl	8005018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d10e      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0201 	mvn.w	r2, #1
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fd f9aa 	bl	800213c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d10e      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d107      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fc12 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d10e      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d107      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f8f6 	bl	800502c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d10e      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d107      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0220 	mvn.w	r2, #32
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fbdc 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e0ac      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	f200 809f 	bhi.w	8004fdc <HAL_TIM_PWM_ConfigChannel+0x168>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004fdd 	.word	0x08004fdd
 8004eac:	08004fdd 	.word	0x08004fdd
 8004eb0:	08004fdd 	.word	0x08004fdd
 8004eb4:	08004f19 	.word	0x08004f19
 8004eb8:	08004fdd 	.word	0x08004fdd
 8004ebc:	08004fdd 	.word	0x08004fdd
 8004ec0:	08004fdd 	.word	0x08004fdd
 8004ec4:	08004f5b 	.word	0x08004f5b
 8004ec8:	08004fdd 	.word	0x08004fdd
 8004ecc:	08004fdd 	.word	0x08004fdd
 8004ed0:	08004fdd 	.word	0x08004fdd
 8004ed4:	08004f9b 	.word	0x08004f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f94e 	bl	8005180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0204 	bic.w	r2, r2, #4
 8004f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6999      	ldr	r1, [r3, #24]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	619a      	str	r2, [r3, #24]
      break;
 8004f16:	e062      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f99e 	bl	8005260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	619a      	str	r2, [r3, #24]
      break;
 8004f58:	e041      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f9f3 	bl	800534c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0208 	orr.w	r2, r2, #8
 8004f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0204 	bic.w	r2, r2, #4
 8004f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69d9      	ldr	r1, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	61da      	str	r2, [r3, #28]
      break;
 8004f98:	e021      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fa47 	bl	8005434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	021a      	lsls	r2, r3, #8
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	61da      	str	r2, [r3, #28]
      break;
 8004fda:	e000      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a40      	ldr	r2, [pc, #256]	; (8005154 <TIM_Base_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505e:	d00f      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3d      	ldr	r2, [pc, #244]	; (8005158 <TIM_Base_SetConfig+0x118>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3c      	ldr	r2, [pc, #240]	; (800515c <TIM_Base_SetConfig+0x11c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3b      	ldr	r2, [pc, #236]	; (8005160 <TIM_Base_SetConfig+0x120>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3a      	ldr	r2, [pc, #232]	; (8005164 <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2f      	ldr	r2, [pc, #188]	; (8005154 <TIM_Base_SetConfig+0x114>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d02b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d027      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <TIM_Base_SetConfig+0x118>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d023      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2b      	ldr	r2, [pc, #172]	; (800515c <TIM_Base_SetConfig+0x11c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <TIM_Base_SetConfig+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <TIM_Base_SetConfig+0x124>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d017      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a28      	ldr	r2, [pc, #160]	; (8005168 <TIM_Base_SetConfig+0x128>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a27      	ldr	r2, [pc, #156]	; (800516c <TIM_Base_SetConfig+0x12c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00f      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <TIM_Base_SetConfig+0x130>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a25      	ldr	r2, [pc, #148]	; (8005174 <TIM_Base_SetConfig+0x134>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a24      	ldr	r2, [pc, #144]	; (8005178 <TIM_Base_SetConfig+0x138>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a23      	ldr	r2, [pc, #140]	; (800517c <TIM_Base_SetConfig+0x13c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <TIM_Base_SetConfig+0x114>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0xf8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <TIM_Base_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40014000 	.word	0x40014000
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800
 8005174:	40001800 	.word	0x40001800
 8005178:	40001c00 	.word	0x40001c00
 800517c:	40002000 	.word	0x40002000

08005180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f023 0201 	bic.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 0302 	bic.w	r3, r3, #2
 80051c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a20      	ldr	r2, [pc, #128]	; (8005258 <TIM_OC1_SetConfig+0xd8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC1_SetConfig+0x64>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <TIM_OC1_SetConfig+0xdc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10c      	bne.n	80051fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0308 	bic.w	r3, r3, #8
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0304 	bic.w	r3, r3, #4
 80051fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <TIM_OC1_SetConfig+0xd8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC1_SetConfig+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <TIM_OC1_SetConfig+0xdc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d111      	bne.n	8005232 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40010000 	.word	0x40010000
 800525c:	40010400 	.word	0x40010400

08005260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0210 	bic.w	r2, r3, #16
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0320 	bic.w	r3, r3, #32
 80052aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a22      	ldr	r2, [pc, #136]	; (8005344 <TIM_OC2_SetConfig+0xe4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC2_SetConfig+0x68>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <TIM_OC2_SetConfig+0xe8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10d      	bne.n	80052e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <TIM_OC2_SetConfig+0xe4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC2_SetConfig+0x94>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a16      	ldr	r2, [pc, #88]	; (8005348 <TIM_OC2_SetConfig+0xe8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d113      	bne.n	800531c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <TIM_OC3_SetConfig+0xe0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0x66>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a20      	ldr	r2, [pc, #128]	; (8005430 <TIM_OC3_SetConfig+0xe4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10d      	bne.n	80053ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <TIM_OC3_SetConfig+0xe0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_OC3_SetConfig+0x92>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <TIM_OC3_SetConfig+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d113      	bne.n	8005406 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40010000 	.word	0x40010000
 8005430:	40010400 	.word	0x40010400

08005434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800547e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <TIM_OC4_SetConfig+0xa4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC4_SetConfig+0x68>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a11      	ldr	r2, [pc, #68]	; (80054dc <TIM_OC4_SetConfig+0xa8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d109      	bne.n	80054b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	019b      	lsls	r3, r3, #6
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e05a      	b.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d01d      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10c      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40001800 	.word	0x40001800

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e03f      	b.n	80056de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc ff62 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	; 0x24
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fc7b 	bl	8005f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b08a      	sub	sp, #40	; 0x28
 80056ea:	af02      	add	r7, sp, #8
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b20      	cmp	r3, #32
 8005704:	d17c      	bne.n	8005800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_UART_Transmit+0x2c>
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e075      	b.n	8005802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UART_Transmit+0x3e>
 8005720:	2302      	movs	r3, #2
 8005722:	e06e      	b.n	8005802 <HAL_UART_Transmit+0x11c>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2221      	movs	r2, #33	; 0x21
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573a:	f7fc ffdf 	bl	80026fc <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005754:	d108      	bne.n	8005768 <HAL_UART_Transmit+0x82>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e003      	b.n	8005770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005778:	e02a      	b.n	80057d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2200      	movs	r2, #0
 8005782:	2180      	movs	r1, #128	; 0x80
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fa3d 	bl	8005c04 <UART_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e036      	b.n	8005802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	3302      	adds	r3, #2
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	e007      	b.n	80057c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1cf      	bne.n	800577a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2140      	movs	r1, #64	; 0x40
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa0d 	bl	8005c04 <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e006      	b.n	8005802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e000      	b.n	8005802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005800:	2302      	movs	r3, #2
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b20      	cmp	r3, #32
 8005822:	d11d      	bne.n	8005860 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_UART_Receive_IT+0x26>
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e016      	b.n	8005862 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UART_Receive_IT+0x38>
 800583e:	2302      	movs	r3, #2
 8005840:	e00f      	b.n	8005862 <HAL_UART_Receive_IT+0x58>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	461a      	mov	r2, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fa1e 	bl	8005c98 <UART_Start_Receive_IT>
 800585c:	4603      	mov	r3, r0
 800585e:	e000      	b.n	8005862 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10d      	bne.n	80058be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_UART_IRQHandler+0x52>
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fad1 	bl	8005e5e <UART_Receive_IT>
      return;
 80058bc:	e17c      	b.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80b1 	beq.w	8005a28 <HAL_UART_IRQHandler+0x1bc>
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <HAL_UART_IRQHandler+0x70>
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a6 	beq.w	8005a28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_UART_IRQHandler+0x90>
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0201 	orr.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_UART_IRQHandler+0xb0>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	f043 0202 	orr.w	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_UART_IRQHandler+0xd0>
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <HAL_UART_IRQHandler+0xfa>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <HAL_UART_IRQHandler+0xee>
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 811f 	beq.w	8005bae <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_UART_IRQHandler+0x11e>
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa6a 	bl	8005e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_UART_IRQHandler+0x146>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d031      	beq.n	8005a16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f9aa 	bl	8005d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d123      	bne.n	8005a0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d013      	beq.n	8005a06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	4a77      	ldr	r2, [pc, #476]	; (8005bc0 <HAL_UART_IRQHandler+0x354>)
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fd f837 	bl	8002a5e <HAL_DMA_Abort_IT>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e00e      	b.n	8005a24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8e6 	bl	8005bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00a      	b.n	8005a24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8e2 	bl	8005bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e006      	b.n	8005a24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8de 	bl	8005bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a22:	e0c4      	b.n	8005bae <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a24:	bf00      	nop
    return;
 8005a26:	e0c2      	b.n	8005bae <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f040 80a2 	bne.w	8005b76 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 809c 	beq.w	8005b76 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8096 	beq.w	8005b76 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d14f      	bne.n	8005b0e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a78:	8a3b      	ldrh	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8099 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a84:	8a3a      	ldrh	r2, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	f080 8093 	bcs.w	8005bb2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8a3a      	ldrh	r2, [r7, #16]
 8005a90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9c:	d02b      	beq.n	8005af6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aac:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695a      	ldr	r2, [r3, #20]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0210 	bic.w	r2, r2, #16
 8005aea:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fc ff44 	bl	800297e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f870 	bl	8005bec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b0c:	e051      	b.n	8005bb2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d047      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005b26:	8a7b      	ldrh	r3, [r7, #18]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d044      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b3a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0210 	bic.w	r2, r2, #16
 8005b68:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b6a:	8a7b      	ldrh	r3, [r7, #18]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f83c 	bl	8005bec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b74:	e01f      	b.n	8005bb6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_UART_IRQHandler+0x326>
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8ff 	bl	8005d8e <UART_Transmit_IT>
    return;
 8005b90:	e012      	b.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00d      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f941 	bl	8005e2e <UART_EndTransmit_IT>
    return;
 8005bac:	e004      	b.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
    return;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
      return;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <HAL_UART_IRQHandler+0x34c>
      return;
 8005bb6:	bf00      	nop
  }
}
 8005bb8:	3728      	adds	r7, #40	; 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08005d67 	.word	0x08005d67

08005bc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	e02c      	b.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d028      	beq.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c24:	f7fc fd6a 	bl	80026fc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d21d      	bcs.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e00f      	b.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	bf0c      	ite	eq
 8005c80:	2301      	moveq	r3, #1
 8005c82:	2300      	movne	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d0c3      	beq.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2222      	movs	r2, #34	; 0x22
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0220 	orr.w	r2, r2, #32
 8005cfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0210 	bic.w	r2, r2, #16
 8005d4a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff ff29 	bl	8005bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b21      	cmp	r3, #33	; 0x21
 8005da0:	d13e      	bne.n	8005e20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005daa:	d114      	bne.n	8005dd6 <UART_Transmit_IT+0x48>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	1c9a      	adds	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	621a      	str	r2, [r3, #32]
 8005dd4:	e008      	b.n	8005de8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6211      	str	r1, [r2, #32]
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4619      	mov	r1, r3
 8005df6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e000      	b.n	8005e22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e20:	2302      	movs	r3, #2
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff feb8 	bl	8005bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b22      	cmp	r3, #34	; 0x22
 8005e70:	f040 8087 	bne.w	8005f82 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d117      	bne.n	8005eae <UART_Receive_IT+0x50>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d113      	bne.n	8005eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8005eac:	e026      	b.n	8005efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec0:	d007      	beq.n	8005ed2 <UART_Receive_IT+0x74>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <UART_Receive_IT+0x82>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e008      	b.n	8005ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d136      	bne.n	8005f7e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0220 	bic.w	r2, r2, #32
 8005f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695a      	ldr	r2, [r3, #20]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10e      	bne.n	8005f6e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0210 	bic.w	r2, r2, #16
 8005f5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fe40 	bl	8005bec <HAL_UARTEx_RxEventCallback>
 8005f6c:	e002      	b.n	8005f74 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fb fb7c 	bl	800166c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e002      	b.n	8005f84 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e000      	b.n	8005f84 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	b09f      	sub	sp, #124	; 0x7c
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa2:	68d9      	ldr	r1, [r3, #12]
 8005fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	ea40 0301 	orr.w	r3, r0, r1
 8005fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fd0:	f021 010c 	bic.w	r1, r1, #12
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	6999      	ldr	r1, [r3, #24]
 8005fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	ea40 0301 	orr.w	r3, r0, r1
 8005ff4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4bc5      	ldr	r3, [pc, #788]	; (8006310 <UART_SetConfig+0x384>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d004      	beq.n	800600a <UART_SetConfig+0x7e>
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4bc3      	ldr	r3, [pc, #780]	; (8006314 <UART_SetConfig+0x388>)
 8006006:	429a      	cmp	r2, r3
 8006008:	d103      	bne.n	8006012 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800600a:	f7fe fc3f 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 800600e:	6778      	str	r0, [r7, #116]	; 0x74
 8006010:	e002      	b.n	8006018 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006012:	f7fe fc27 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8006016:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006020:	f040 80b6 	bne.w	8006190 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006026:	461c      	mov	r4, r3
 8006028:	f04f 0500 	mov.w	r5, #0
 800602c:	4622      	mov	r2, r4
 800602e:	462b      	mov	r3, r5
 8006030:	1891      	adds	r1, r2, r2
 8006032:	6439      	str	r1, [r7, #64]	; 0x40
 8006034:	415b      	adcs	r3, r3
 8006036:	647b      	str	r3, [r7, #68]	; 0x44
 8006038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800603c:	1912      	adds	r2, r2, r4
 800603e:	eb45 0303 	adc.w	r3, r5, r3
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	00d9      	lsls	r1, r3, #3
 800604c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006050:	00d0      	lsls	r0, r2, #3
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	1911      	adds	r1, r2, r4
 8006058:	6639      	str	r1, [r7, #96]	; 0x60
 800605a:	416b      	adcs	r3, r5
 800605c:	667b      	str	r3, [r7, #100]	; 0x64
 800605e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	461a      	mov	r2, r3
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	1891      	adds	r1, r2, r2
 800606a:	63b9      	str	r1, [r7, #56]	; 0x38
 800606c:	415b      	adcs	r3, r3
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006074:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006078:	f7fa fd86 	bl	8000b88 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4ba5      	ldr	r3, [pc, #660]	; (8006318 <UART_SetConfig+0x38c>)
 8006082:	fba3 2302 	umull	r2, r3, r3, r2
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	011e      	lsls	r6, r3, #4
 800608a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800608c:	461c      	mov	r4, r3
 800608e:	f04f 0500 	mov.w	r5, #0
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	1891      	adds	r1, r2, r2
 8006098:	6339      	str	r1, [r7, #48]	; 0x30
 800609a:	415b      	adcs	r3, r3
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
 800609e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80060a2:	1912      	adds	r2, r2, r4
 80060a4:	eb45 0303 	adc.w	r3, r5, r3
 80060a8:	f04f 0000 	mov.w	r0, #0
 80060ac:	f04f 0100 	mov.w	r1, #0
 80060b0:	00d9      	lsls	r1, r3, #3
 80060b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060b6:	00d0      	lsls	r0, r2, #3
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	1911      	adds	r1, r2, r4
 80060be:	65b9      	str	r1, [r7, #88]	; 0x58
 80060c0:	416b      	adcs	r3, r5
 80060c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80060d2:	415b      	adcs	r3, r3
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80060de:	f7fa fd53 	bl	8000b88 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b8c      	ldr	r3, [pc, #560]	; (8006318 <UART_SetConfig+0x38c>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a87      	ldr	r2, [pc, #540]	; (8006318 <UART_SetConfig+0x38c>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006108:	441e      	add	r6, r3
 800610a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800610c:	4618      	mov	r0, r3
 800610e:	f04f 0100 	mov.w	r1, #0
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	1894      	adds	r4, r2, r2
 8006118:	623c      	str	r4, [r7, #32]
 800611a:	415b      	adcs	r3, r3
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006122:	1812      	adds	r2, r2, r0
 8006124:	eb41 0303 	adc.w	r3, r1, r3
 8006128:	f04f 0400 	mov.w	r4, #0
 800612c:	f04f 0500 	mov.w	r5, #0
 8006130:	00dd      	lsls	r5, r3, #3
 8006132:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006136:	00d4      	lsls	r4, r2, #3
 8006138:	4622      	mov	r2, r4
 800613a:	462b      	mov	r3, r5
 800613c:	1814      	adds	r4, r2, r0
 800613e:	653c      	str	r4, [r7, #80]	; 0x50
 8006140:	414b      	adcs	r3, r1
 8006142:	657b      	str	r3, [r7, #84]	; 0x54
 8006144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	461a      	mov	r2, r3
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	1891      	adds	r1, r2, r2
 8006150:	61b9      	str	r1, [r7, #24]
 8006152:	415b      	adcs	r3, r3
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800615a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800615e:	f7fa fd13 	bl	8000b88 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4b6c      	ldr	r3, [pc, #432]	; (8006318 <UART_SetConfig+0x38c>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	; 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a67      	ldr	r2, [pc, #412]	; (8006318 <UART_SetConfig+0x38c>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 0207 	and.w	r2, r3, #7
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4432      	add	r2, r6
 800618c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800618e:	e0b9      	b.n	8006304 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006192:	461c      	mov	r4, r3
 8006194:	f04f 0500 	mov.w	r5, #0
 8006198:	4622      	mov	r2, r4
 800619a:	462b      	mov	r3, r5
 800619c:	1891      	adds	r1, r2, r2
 800619e:	6139      	str	r1, [r7, #16]
 80061a0:	415b      	adcs	r3, r3
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061a8:	1912      	adds	r2, r2, r4
 80061aa:	eb45 0303 	adc.w	r3, r5, r3
 80061ae:	f04f 0000 	mov.w	r0, #0
 80061b2:	f04f 0100 	mov.w	r1, #0
 80061b6:	00d9      	lsls	r1, r3, #3
 80061b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061bc:	00d0      	lsls	r0, r2, #3
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	eb12 0804 	adds.w	r8, r2, r4
 80061c6:	eb43 0905 	adc.w	r9, r3, r5
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f04f 0100 	mov.w	r1, #0
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	008b      	lsls	r3, r1, #2
 80061de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061e2:	0082      	lsls	r2, r0, #2
 80061e4:	4640      	mov	r0, r8
 80061e6:	4649      	mov	r1, r9
 80061e8:	f7fa fcce 	bl	8000b88 <__aeabi_uldivmod>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4b49      	ldr	r3, [pc, #292]	; (8006318 <UART_SetConfig+0x38c>)
 80061f2:	fba3 2302 	umull	r2, r3, r3, r2
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	011e      	lsls	r6, r3, #4
 80061fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fc:	4618      	mov	r0, r3
 80061fe:	f04f 0100 	mov.w	r1, #0
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	1894      	adds	r4, r2, r2
 8006208:	60bc      	str	r4, [r7, #8]
 800620a:	415b      	adcs	r3, r3
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006212:	1812      	adds	r2, r2, r0
 8006214:	eb41 0303 	adc.w	r3, r1, r3
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	f04f 0500 	mov.w	r5, #0
 8006220:	00dd      	lsls	r5, r3, #3
 8006222:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006226:	00d4      	lsls	r4, r2, #3
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	1814      	adds	r4, r2, r0
 800622e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006230:	414b      	adcs	r3, r1
 8006232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4618      	mov	r0, r3
 800623a:	f04f 0100 	mov.w	r1, #0
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	008b      	lsls	r3, r1, #2
 8006248:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800624c:	0082      	lsls	r2, r0, #2
 800624e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006252:	f7fa fc99 	bl	8000b88 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <UART_SetConfig+0x38c>)
 800625c:	fba3 1302 	umull	r1, r3, r3, r2
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	2164      	movs	r1, #100	; 0x64
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	3332      	adds	r3, #50	; 0x32
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <UART_SetConfig+0x38c>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800627a:	441e      	add	r6, r3
 800627c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800627e:	4618      	mov	r0, r3
 8006280:	f04f 0100 	mov.w	r1, #0
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	1894      	adds	r4, r2, r2
 800628a:	603c      	str	r4, [r7, #0]
 800628c:	415b      	adcs	r3, r3
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006294:	1812      	adds	r2, r2, r0
 8006296:	eb41 0303 	adc.w	r3, r1, r3
 800629a:	f04f 0400 	mov.w	r4, #0
 800629e:	f04f 0500 	mov.w	r5, #0
 80062a2:	00dd      	lsls	r5, r3, #3
 80062a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062a8:	00d4      	lsls	r4, r2, #3
 80062aa:	4622      	mov	r2, r4
 80062ac:	462b      	mov	r3, r5
 80062ae:	eb12 0a00 	adds.w	sl, r2, r0
 80062b2:	eb43 0b01 	adc.w	fp, r3, r1
 80062b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f04f 0100 	mov.w	r1, #0
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	008b      	lsls	r3, r1, #2
 80062ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062ce:	0082      	lsls	r2, r0, #2
 80062d0:	4650      	mov	r0, sl
 80062d2:	4659      	mov	r1, fp
 80062d4:	f7fa fc58 	bl	8000b88 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <UART_SetConfig+0x38c>)
 80062de:	fba3 1302 	umull	r1, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2164      	movs	r1, #100	; 0x64
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	3332      	adds	r3, #50	; 0x32
 80062f0:	4a09      	ldr	r2, [pc, #36]	; (8006318 <UART_SetConfig+0x38c>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4432      	add	r2, r6
 8006302:	609a      	str	r2, [r3, #8]
}
 8006304:	bf00      	nop
 8006306:	377c      	adds	r7, #124	; 0x7c
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630e:	bf00      	nop
 8006310:	40011000 	.word	0x40011000
 8006314:	40011400 	.word	0x40011400
 8006318:	51eb851f 	.word	0x51eb851f

0800631c <__errno>:
 800631c:	4b01      	ldr	r3, [pc, #4]	; (8006324 <__errno+0x8>)
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000010 	.word	0x20000010

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4d0d      	ldr	r5, [pc, #52]	; (8006360 <__libc_init_array+0x38>)
 800632c:	4c0d      	ldr	r4, [pc, #52]	; (8006364 <__libc_init_array+0x3c>)
 800632e:	1b64      	subs	r4, r4, r5
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	2600      	movs	r6, #0
 8006334:	42a6      	cmp	r6, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	4d0b      	ldr	r5, [pc, #44]	; (8006368 <__libc_init_array+0x40>)
 800633a:	4c0c      	ldr	r4, [pc, #48]	; (800636c <__libc_init_array+0x44>)
 800633c:	f001 fc16 	bl	8007b6c <_init>
 8006340:	1b64      	subs	r4, r4, r5
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	2600      	movs	r6, #0
 8006346:	42a6      	cmp	r6, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006350:	4798      	blx	r3
 8006352:	3601      	adds	r6, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	f855 3b04 	ldr.w	r3, [r5], #4
 800635a:	4798      	blx	r3
 800635c:	3601      	adds	r6, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	08007d18 	.word	0x08007d18
 8006364:	08007d18 	.word	0x08007d18
 8006368:	08007d18 	.word	0x08007d18
 800636c:	08007d1c 	.word	0x08007d1c

08006370 <memset>:
 8006370:	4402      	add	r2, r0
 8006372:	4603      	mov	r3, r0
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	f803 1b01 	strb.w	r1, [r3], #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <siprintf>:
 8006380:	b40e      	push	{r1, r2, r3}
 8006382:	b500      	push	{lr}
 8006384:	b09c      	sub	sp, #112	; 0x70
 8006386:	ab1d      	add	r3, sp, #116	; 0x74
 8006388:	9002      	str	r0, [sp, #8]
 800638a:	9006      	str	r0, [sp, #24]
 800638c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <siprintf+0x38>)
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	9104      	str	r1, [sp, #16]
 8006396:	4909      	ldr	r1, [pc, #36]	; (80063bc <siprintf+0x3c>)
 8006398:	f853 2b04 	ldr.w	r2, [r3], #4
 800639c:	9105      	str	r1, [sp, #20]
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	f000 f87a 	bl	800649c <_svfiprintf_r>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	b01c      	add	sp, #112	; 0x70
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b003      	add	sp, #12
 80063b6:	4770      	bx	lr
 80063b8:	20000010 	.word	0x20000010
 80063bc:	ffff0208 	.word	0xffff0208

080063c0 <strncmp>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	b16a      	cbz	r2, 80063e0 <strncmp+0x20>
 80063c4:	3901      	subs	r1, #1
 80063c6:	1884      	adds	r4, r0, r2
 80063c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80063cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d103      	bne.n	80063dc <strncmp+0x1c>
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d001      	beq.n	80063dc <strncmp+0x1c>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f5      	bne.n	80063c8 <strncmp+0x8>
 80063dc:	1a98      	subs	r0, r3, r2
 80063de:	bd10      	pop	{r4, pc}
 80063e0:	4610      	mov	r0, r2
 80063e2:	e7fc      	b.n	80063de <strncmp+0x1e>

080063e4 <__ssputs_r>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	688e      	ldr	r6, [r1, #8]
 80063ea:	429e      	cmp	r6, r3
 80063ec:	4682      	mov	sl, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	4690      	mov	r8, r2
 80063f2:	461f      	mov	r7, r3
 80063f4:	d838      	bhi.n	8006468 <__ssputs_r+0x84>
 80063f6:	898a      	ldrh	r2, [r1, #12]
 80063f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fc:	d032      	beq.n	8006464 <__ssputs_r+0x80>
 80063fe:	6825      	ldr	r5, [r4, #0]
 8006400:	6909      	ldr	r1, [r1, #16]
 8006402:	eba5 0901 	sub.w	r9, r5, r1
 8006406:	6965      	ldr	r5, [r4, #20]
 8006408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800640c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006410:	3301      	adds	r3, #1
 8006412:	444b      	add	r3, r9
 8006414:	106d      	asrs	r5, r5, #1
 8006416:	429d      	cmp	r5, r3
 8006418:	bf38      	it	cc
 800641a:	461d      	movcc	r5, r3
 800641c:	0553      	lsls	r3, r2, #21
 800641e:	d531      	bpl.n	8006484 <__ssputs_r+0xa0>
 8006420:	4629      	mov	r1, r5
 8006422:	f000 fb47 	bl	8006ab4 <_malloc_r>
 8006426:	4606      	mov	r6, r0
 8006428:	b950      	cbnz	r0, 8006440 <__ssputs_r+0x5c>
 800642a:	230c      	movs	r3, #12
 800642c:	f8ca 3000 	str.w	r3, [sl]
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006440:	6921      	ldr	r1, [r4, #16]
 8006442:	464a      	mov	r2, r9
 8006444:	f000 fabe 	bl	80069c4 <memcpy>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	6126      	str	r6, [r4, #16]
 8006456:	6165      	str	r5, [r4, #20]
 8006458:	444e      	add	r6, r9
 800645a:	eba5 0509 	sub.w	r5, r5, r9
 800645e:	6026      	str	r6, [r4, #0]
 8006460:	60a5      	str	r5, [r4, #8]
 8006462:	463e      	mov	r6, r7
 8006464:	42be      	cmp	r6, r7
 8006466:	d900      	bls.n	800646a <__ssputs_r+0x86>
 8006468:	463e      	mov	r6, r7
 800646a:	4632      	mov	r2, r6
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	4641      	mov	r1, r8
 8006470:	f000 fab6 	bl	80069e0 <memmove>
 8006474:	68a3      	ldr	r3, [r4, #8]
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	1b9b      	subs	r3, r3, r6
 800647a:	4432      	add	r2, r6
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	6022      	str	r2, [r4, #0]
 8006480:	2000      	movs	r0, #0
 8006482:	e7db      	b.n	800643c <__ssputs_r+0x58>
 8006484:	462a      	mov	r2, r5
 8006486:	f000 fb6f 	bl	8006b68 <_realloc_r>
 800648a:	4606      	mov	r6, r0
 800648c:	2800      	cmp	r0, #0
 800648e:	d1e1      	bne.n	8006454 <__ssputs_r+0x70>
 8006490:	6921      	ldr	r1, [r4, #16]
 8006492:	4650      	mov	r0, sl
 8006494:	f000 fabe 	bl	8006a14 <_free_r>
 8006498:	e7c7      	b.n	800642a <__ssputs_r+0x46>
	...

0800649c <_svfiprintf_r>:
 800649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	4698      	mov	r8, r3
 80064a2:	898b      	ldrh	r3, [r1, #12]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	b09d      	sub	sp, #116	; 0x74
 80064a8:	4607      	mov	r7, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	4614      	mov	r4, r2
 80064ae:	d50e      	bpl.n	80064ce <_svfiprintf_r+0x32>
 80064b0:	690b      	ldr	r3, [r1, #16]
 80064b2:	b963      	cbnz	r3, 80064ce <_svfiprintf_r+0x32>
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	f000 fafd 	bl	8006ab4 <_malloc_r>
 80064ba:	6028      	str	r0, [r5, #0]
 80064bc:	6128      	str	r0, [r5, #16]
 80064be:	b920      	cbnz	r0, 80064ca <_svfiprintf_r+0x2e>
 80064c0:	230c      	movs	r3, #12
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	e0d1      	b.n	800666e <_svfiprintf_r+0x1d2>
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	616b      	str	r3, [r5, #20]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9309      	str	r3, [sp, #36]	; 0x24
 80064d2:	2320      	movs	r3, #32
 80064d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064dc:	2330      	movs	r3, #48	; 0x30
 80064de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006688 <_svfiprintf_r+0x1ec>
 80064e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e6:	f04f 0901 	mov.w	r9, #1
 80064ea:	4623      	mov	r3, r4
 80064ec:	469a      	mov	sl, r3
 80064ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064f2:	b10a      	cbz	r2, 80064f8 <_svfiprintf_r+0x5c>
 80064f4:	2a25      	cmp	r2, #37	; 0x25
 80064f6:	d1f9      	bne.n	80064ec <_svfiprintf_r+0x50>
 80064f8:	ebba 0b04 	subs.w	fp, sl, r4
 80064fc:	d00b      	beq.n	8006516 <_svfiprintf_r+0x7a>
 80064fe:	465b      	mov	r3, fp
 8006500:	4622      	mov	r2, r4
 8006502:	4629      	mov	r1, r5
 8006504:	4638      	mov	r0, r7
 8006506:	f7ff ff6d 	bl	80063e4 <__ssputs_r>
 800650a:	3001      	adds	r0, #1
 800650c:	f000 80aa 	beq.w	8006664 <_svfiprintf_r+0x1c8>
 8006510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006512:	445a      	add	r2, fp
 8006514:	9209      	str	r2, [sp, #36]	; 0x24
 8006516:	f89a 3000 	ldrb.w	r3, [sl]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80a2 	beq.w	8006664 <_svfiprintf_r+0x1c8>
 8006520:	2300      	movs	r3, #0
 8006522:	f04f 32ff 	mov.w	r2, #4294967295
 8006526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800652a:	f10a 0a01 	add.w	sl, sl, #1
 800652e:	9304      	str	r3, [sp, #16]
 8006530:	9307      	str	r3, [sp, #28]
 8006532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006536:	931a      	str	r3, [sp, #104]	; 0x68
 8006538:	4654      	mov	r4, sl
 800653a:	2205      	movs	r2, #5
 800653c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006540:	4851      	ldr	r0, [pc, #324]	; (8006688 <_svfiprintf_r+0x1ec>)
 8006542:	f7f9 fe45 	bl	80001d0 <memchr>
 8006546:	9a04      	ldr	r2, [sp, #16]
 8006548:	b9d8      	cbnz	r0, 8006582 <_svfiprintf_r+0xe6>
 800654a:	06d0      	lsls	r0, r2, #27
 800654c:	bf44      	itt	mi
 800654e:	2320      	movmi	r3, #32
 8006550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006554:	0711      	lsls	r1, r2, #28
 8006556:	bf44      	itt	mi
 8006558:	232b      	movmi	r3, #43	; 0x2b
 800655a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655e:	f89a 3000 	ldrb.w	r3, [sl]
 8006562:	2b2a      	cmp	r3, #42	; 0x2a
 8006564:	d015      	beq.n	8006592 <_svfiprintf_r+0xf6>
 8006566:	9a07      	ldr	r2, [sp, #28]
 8006568:	4654      	mov	r4, sl
 800656a:	2000      	movs	r0, #0
 800656c:	f04f 0c0a 	mov.w	ip, #10
 8006570:	4621      	mov	r1, r4
 8006572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006576:	3b30      	subs	r3, #48	; 0x30
 8006578:	2b09      	cmp	r3, #9
 800657a:	d94e      	bls.n	800661a <_svfiprintf_r+0x17e>
 800657c:	b1b0      	cbz	r0, 80065ac <_svfiprintf_r+0x110>
 800657e:	9207      	str	r2, [sp, #28]
 8006580:	e014      	b.n	80065ac <_svfiprintf_r+0x110>
 8006582:	eba0 0308 	sub.w	r3, r0, r8
 8006586:	fa09 f303 	lsl.w	r3, r9, r3
 800658a:	4313      	orrs	r3, r2
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	46a2      	mov	sl, r4
 8006590:	e7d2      	b.n	8006538 <_svfiprintf_r+0x9c>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	1d19      	adds	r1, r3, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	9103      	str	r1, [sp, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	bfbb      	ittet	lt
 800659e:	425b      	neglt	r3, r3
 80065a0:	f042 0202 	orrlt.w	r2, r2, #2
 80065a4:	9307      	strge	r3, [sp, #28]
 80065a6:	9307      	strlt	r3, [sp, #28]
 80065a8:	bfb8      	it	lt
 80065aa:	9204      	strlt	r2, [sp, #16]
 80065ac:	7823      	ldrb	r3, [r4, #0]
 80065ae:	2b2e      	cmp	r3, #46	; 0x2e
 80065b0:	d10c      	bne.n	80065cc <_svfiprintf_r+0x130>
 80065b2:	7863      	ldrb	r3, [r4, #1]
 80065b4:	2b2a      	cmp	r3, #42	; 0x2a
 80065b6:	d135      	bne.n	8006624 <_svfiprintf_r+0x188>
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	1d1a      	adds	r2, r3, #4
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	9203      	str	r2, [sp, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bfb8      	it	lt
 80065c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065c8:	3402      	adds	r4, #2
 80065ca:	9305      	str	r3, [sp, #20]
 80065cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006698 <_svfiprintf_r+0x1fc>
 80065d0:	7821      	ldrb	r1, [r4, #0]
 80065d2:	2203      	movs	r2, #3
 80065d4:	4650      	mov	r0, sl
 80065d6:	f7f9 fdfb 	bl	80001d0 <memchr>
 80065da:	b140      	cbz	r0, 80065ee <_svfiprintf_r+0x152>
 80065dc:	2340      	movs	r3, #64	; 0x40
 80065de:	eba0 000a 	sub.w	r0, r0, sl
 80065e2:	fa03 f000 	lsl.w	r0, r3, r0
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	4303      	orrs	r3, r0
 80065ea:	3401      	adds	r4, #1
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f2:	4826      	ldr	r0, [pc, #152]	; (800668c <_svfiprintf_r+0x1f0>)
 80065f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065f8:	2206      	movs	r2, #6
 80065fa:	f7f9 fde9 	bl	80001d0 <memchr>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d038      	beq.n	8006674 <_svfiprintf_r+0x1d8>
 8006602:	4b23      	ldr	r3, [pc, #140]	; (8006690 <_svfiprintf_r+0x1f4>)
 8006604:	bb1b      	cbnz	r3, 800664e <_svfiprintf_r+0x1b2>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	3307      	adds	r3, #7
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	3308      	adds	r3, #8
 8006610:	9303      	str	r3, [sp, #12]
 8006612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006614:	4433      	add	r3, r6
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	e767      	b.n	80064ea <_svfiprintf_r+0x4e>
 800661a:	fb0c 3202 	mla	r2, ip, r2, r3
 800661e:	460c      	mov	r4, r1
 8006620:	2001      	movs	r0, #1
 8006622:	e7a5      	b.n	8006570 <_svfiprintf_r+0xd4>
 8006624:	2300      	movs	r3, #0
 8006626:	3401      	adds	r4, #1
 8006628:	9305      	str	r3, [sp, #20]
 800662a:	4619      	mov	r1, r3
 800662c:	f04f 0c0a 	mov.w	ip, #10
 8006630:	4620      	mov	r0, r4
 8006632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006636:	3a30      	subs	r2, #48	; 0x30
 8006638:	2a09      	cmp	r2, #9
 800663a:	d903      	bls.n	8006644 <_svfiprintf_r+0x1a8>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0c5      	beq.n	80065cc <_svfiprintf_r+0x130>
 8006640:	9105      	str	r1, [sp, #20]
 8006642:	e7c3      	b.n	80065cc <_svfiprintf_r+0x130>
 8006644:	fb0c 2101 	mla	r1, ip, r1, r2
 8006648:	4604      	mov	r4, r0
 800664a:	2301      	movs	r3, #1
 800664c:	e7f0      	b.n	8006630 <_svfiprintf_r+0x194>
 800664e:	ab03      	add	r3, sp, #12
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	462a      	mov	r2, r5
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <_svfiprintf_r+0x1f8>)
 8006656:	a904      	add	r1, sp, #16
 8006658:	4638      	mov	r0, r7
 800665a:	f3af 8000 	nop.w
 800665e:	1c42      	adds	r2, r0, #1
 8006660:	4606      	mov	r6, r0
 8006662:	d1d6      	bne.n	8006612 <_svfiprintf_r+0x176>
 8006664:	89ab      	ldrh	r3, [r5, #12]
 8006666:	065b      	lsls	r3, r3, #25
 8006668:	f53f af2c 	bmi.w	80064c4 <_svfiprintf_r+0x28>
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	b01d      	add	sp, #116	; 0x74
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	ab03      	add	r3, sp, #12
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	462a      	mov	r2, r5
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <_svfiprintf_r+0x1f8>)
 800667c:	a904      	add	r1, sp, #16
 800667e:	4638      	mov	r0, r7
 8006680:	f000 f87a 	bl	8006778 <_printf_i>
 8006684:	e7eb      	b.n	800665e <_svfiprintf_r+0x1c2>
 8006686:	bf00      	nop
 8006688:	08007c9c 	.word	0x08007c9c
 800668c:	08007ca6 	.word	0x08007ca6
 8006690:	00000000 	.word	0x00000000
 8006694:	080063e5 	.word	0x080063e5
 8006698:	08007ca2 	.word	0x08007ca2

0800669c <_printf_common>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	4616      	mov	r6, r2
 80066a2:	4699      	mov	r9, r3
 80066a4:	688a      	ldr	r2, [r1, #8]
 80066a6:	690b      	ldr	r3, [r1, #16]
 80066a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	bfb8      	it	lt
 80066b0:	4613      	movlt	r3, r2
 80066b2:	6033      	str	r3, [r6, #0]
 80066b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066b8:	4607      	mov	r7, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	b10a      	cbz	r2, 80066c2 <_printf_common+0x26>
 80066be:	3301      	adds	r3, #1
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	0699      	lsls	r1, r3, #26
 80066c6:	bf42      	ittt	mi
 80066c8:	6833      	ldrmi	r3, [r6, #0]
 80066ca:	3302      	addmi	r3, #2
 80066cc:	6033      	strmi	r3, [r6, #0]
 80066ce:	6825      	ldr	r5, [r4, #0]
 80066d0:	f015 0506 	ands.w	r5, r5, #6
 80066d4:	d106      	bne.n	80066e4 <_printf_common+0x48>
 80066d6:	f104 0a19 	add.w	sl, r4, #25
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	6832      	ldr	r2, [r6, #0]
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc26      	bgt.n	8006732 <_printf_common+0x96>
 80066e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066e8:	1e13      	subs	r3, r2, #0
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	bf18      	it	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	0692      	lsls	r2, r2, #26
 80066f2:	d42b      	bmi.n	800674c <_printf_common+0xb0>
 80066f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066f8:	4649      	mov	r1, r9
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c0      	blx	r8
 80066fe:	3001      	adds	r0, #1
 8006700:	d01e      	beq.n	8006740 <_printf_common+0xa4>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	68e5      	ldr	r5, [r4, #12]
 8006706:	6832      	ldr	r2, [r6, #0]
 8006708:	f003 0306 	and.w	r3, r3, #6
 800670c:	2b04      	cmp	r3, #4
 800670e:	bf08      	it	eq
 8006710:	1aad      	subeq	r5, r5, r2
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	bf0c      	ite	eq
 8006718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800671c:	2500      	movne	r5, #0
 800671e:	4293      	cmp	r3, r2
 8006720:	bfc4      	itt	gt
 8006722:	1a9b      	subgt	r3, r3, r2
 8006724:	18ed      	addgt	r5, r5, r3
 8006726:	2600      	movs	r6, #0
 8006728:	341a      	adds	r4, #26
 800672a:	42b5      	cmp	r5, r6
 800672c:	d11a      	bne.n	8006764 <_printf_common+0xc8>
 800672e:	2000      	movs	r0, #0
 8006730:	e008      	b.n	8006744 <_printf_common+0xa8>
 8006732:	2301      	movs	r3, #1
 8006734:	4652      	mov	r2, sl
 8006736:	4649      	mov	r1, r9
 8006738:	4638      	mov	r0, r7
 800673a:	47c0      	blx	r8
 800673c:	3001      	adds	r0, #1
 800673e:	d103      	bne.n	8006748 <_printf_common+0xac>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006748:	3501      	adds	r5, #1
 800674a:	e7c6      	b.n	80066da <_printf_common+0x3e>
 800674c:	18e1      	adds	r1, r4, r3
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	2030      	movs	r0, #48	; 0x30
 8006752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006756:	4422      	add	r2, r4
 8006758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800675c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006760:	3302      	adds	r3, #2
 8006762:	e7c7      	b.n	80066f4 <_printf_common+0x58>
 8006764:	2301      	movs	r3, #1
 8006766:	4622      	mov	r2, r4
 8006768:	4649      	mov	r1, r9
 800676a:	4638      	mov	r0, r7
 800676c:	47c0      	blx	r8
 800676e:	3001      	adds	r0, #1
 8006770:	d0e6      	beq.n	8006740 <_printf_common+0xa4>
 8006772:	3601      	adds	r6, #1
 8006774:	e7d9      	b.n	800672a <_printf_common+0x8e>
	...

08006778 <_printf_i>:
 8006778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	460c      	mov	r4, r1
 800677e:	4691      	mov	r9, r2
 8006780:	7e27      	ldrb	r7, [r4, #24]
 8006782:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006784:	2f78      	cmp	r7, #120	; 0x78
 8006786:	4680      	mov	r8, r0
 8006788:	469a      	mov	sl, r3
 800678a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800678e:	d807      	bhi.n	80067a0 <_printf_i+0x28>
 8006790:	2f62      	cmp	r7, #98	; 0x62
 8006792:	d80a      	bhi.n	80067aa <_printf_i+0x32>
 8006794:	2f00      	cmp	r7, #0
 8006796:	f000 80d8 	beq.w	800694a <_printf_i+0x1d2>
 800679a:	2f58      	cmp	r7, #88	; 0x58
 800679c:	f000 80a3 	beq.w	80068e6 <_printf_i+0x16e>
 80067a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067a8:	e03a      	b.n	8006820 <_printf_i+0xa8>
 80067aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ae:	2b15      	cmp	r3, #21
 80067b0:	d8f6      	bhi.n	80067a0 <_printf_i+0x28>
 80067b2:	a001      	add	r0, pc, #4	; (adr r0, 80067b8 <_printf_i+0x40>)
 80067b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80067b8:	08006811 	.word	0x08006811
 80067bc:	08006825 	.word	0x08006825
 80067c0:	080067a1 	.word	0x080067a1
 80067c4:	080067a1 	.word	0x080067a1
 80067c8:	080067a1 	.word	0x080067a1
 80067cc:	080067a1 	.word	0x080067a1
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080067a1 	.word	0x080067a1
 80067d8:	080067a1 	.word	0x080067a1
 80067dc:	080067a1 	.word	0x080067a1
 80067e0:	080067a1 	.word	0x080067a1
 80067e4:	08006931 	.word	0x08006931
 80067e8:	08006855 	.word	0x08006855
 80067ec:	08006913 	.word	0x08006913
 80067f0:	080067a1 	.word	0x080067a1
 80067f4:	080067a1 	.word	0x080067a1
 80067f8:	08006953 	.word	0x08006953
 80067fc:	080067a1 	.word	0x080067a1
 8006800:	08006855 	.word	0x08006855
 8006804:	080067a1 	.word	0x080067a1
 8006808:	080067a1 	.word	0x080067a1
 800680c:	0800691b 	.word	0x0800691b
 8006810:	680b      	ldr	r3, [r1, #0]
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	600a      	str	r2, [r1, #0]
 8006818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800681c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006820:	2301      	movs	r3, #1
 8006822:	e0a3      	b.n	800696c <_printf_i+0x1f4>
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	6808      	ldr	r0, [r1, #0]
 8006828:	062e      	lsls	r6, r5, #24
 800682a:	f100 0304 	add.w	r3, r0, #4
 800682e:	d50a      	bpl.n	8006846 <_printf_i+0xce>
 8006830:	6805      	ldr	r5, [r0, #0]
 8006832:	600b      	str	r3, [r1, #0]
 8006834:	2d00      	cmp	r5, #0
 8006836:	da03      	bge.n	8006840 <_printf_i+0xc8>
 8006838:	232d      	movs	r3, #45	; 0x2d
 800683a:	426d      	negs	r5, r5
 800683c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006840:	485e      	ldr	r0, [pc, #376]	; (80069bc <_printf_i+0x244>)
 8006842:	230a      	movs	r3, #10
 8006844:	e019      	b.n	800687a <_printf_i+0x102>
 8006846:	f015 0f40 	tst.w	r5, #64	; 0x40
 800684a:	6805      	ldr	r5, [r0, #0]
 800684c:	600b      	str	r3, [r1, #0]
 800684e:	bf18      	it	ne
 8006850:	b22d      	sxthne	r5, r5
 8006852:	e7ef      	b.n	8006834 <_printf_i+0xbc>
 8006854:	680b      	ldr	r3, [r1, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	1d18      	adds	r0, r3, #4
 800685a:	6008      	str	r0, [r1, #0]
 800685c:	0628      	lsls	r0, r5, #24
 800685e:	d501      	bpl.n	8006864 <_printf_i+0xec>
 8006860:	681d      	ldr	r5, [r3, #0]
 8006862:	e002      	b.n	800686a <_printf_i+0xf2>
 8006864:	0669      	lsls	r1, r5, #25
 8006866:	d5fb      	bpl.n	8006860 <_printf_i+0xe8>
 8006868:	881d      	ldrh	r5, [r3, #0]
 800686a:	4854      	ldr	r0, [pc, #336]	; (80069bc <_printf_i+0x244>)
 800686c:	2f6f      	cmp	r7, #111	; 0x6f
 800686e:	bf0c      	ite	eq
 8006870:	2308      	moveq	r3, #8
 8006872:	230a      	movne	r3, #10
 8006874:	2100      	movs	r1, #0
 8006876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800687a:	6866      	ldr	r6, [r4, #4]
 800687c:	60a6      	str	r6, [r4, #8]
 800687e:	2e00      	cmp	r6, #0
 8006880:	bfa2      	ittt	ge
 8006882:	6821      	ldrge	r1, [r4, #0]
 8006884:	f021 0104 	bicge.w	r1, r1, #4
 8006888:	6021      	strge	r1, [r4, #0]
 800688a:	b90d      	cbnz	r5, 8006890 <_printf_i+0x118>
 800688c:	2e00      	cmp	r6, #0
 800688e:	d04d      	beq.n	800692c <_printf_i+0x1b4>
 8006890:	4616      	mov	r6, r2
 8006892:	fbb5 f1f3 	udiv	r1, r5, r3
 8006896:	fb03 5711 	mls	r7, r3, r1, r5
 800689a:	5dc7      	ldrb	r7, [r0, r7]
 800689c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068a0:	462f      	mov	r7, r5
 80068a2:	42bb      	cmp	r3, r7
 80068a4:	460d      	mov	r5, r1
 80068a6:	d9f4      	bls.n	8006892 <_printf_i+0x11a>
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d10b      	bne.n	80068c4 <_printf_i+0x14c>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07df      	lsls	r7, r3, #31
 80068b0:	d508      	bpl.n	80068c4 <_printf_i+0x14c>
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	4299      	cmp	r1, r3
 80068b8:	bfde      	ittt	le
 80068ba:	2330      	movle	r3, #48	; 0x30
 80068bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068c4:	1b92      	subs	r2, r2, r6
 80068c6:	6122      	str	r2, [r4, #16]
 80068c8:	f8cd a000 	str.w	sl, [sp]
 80068cc:	464b      	mov	r3, r9
 80068ce:	aa03      	add	r2, sp, #12
 80068d0:	4621      	mov	r1, r4
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7ff fee2 	bl	800669c <_printf_common>
 80068d8:	3001      	adds	r0, #1
 80068da:	d14c      	bne.n	8006976 <_printf_i+0x1fe>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	b004      	add	sp, #16
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	4835      	ldr	r0, [pc, #212]	; (80069bc <_printf_i+0x244>)
 80068e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	680e      	ldr	r6, [r1, #0]
 80068f0:	061f      	lsls	r7, r3, #24
 80068f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80068f6:	600e      	str	r6, [r1, #0]
 80068f8:	d514      	bpl.n	8006924 <_printf_i+0x1ac>
 80068fa:	07d9      	lsls	r1, r3, #31
 80068fc:	bf44      	itt	mi
 80068fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006902:	6023      	strmi	r3, [r4, #0]
 8006904:	b91d      	cbnz	r5, 800690e <_printf_i+0x196>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	f023 0320 	bic.w	r3, r3, #32
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	2310      	movs	r3, #16
 8006910:	e7b0      	b.n	8006874 <_printf_i+0xfc>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f043 0320 	orr.w	r3, r3, #32
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	2378      	movs	r3, #120	; 0x78
 800691c:	4828      	ldr	r0, [pc, #160]	; (80069c0 <_printf_i+0x248>)
 800691e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006922:	e7e3      	b.n	80068ec <_printf_i+0x174>
 8006924:	065e      	lsls	r6, r3, #25
 8006926:	bf48      	it	mi
 8006928:	b2ad      	uxthmi	r5, r5
 800692a:	e7e6      	b.n	80068fa <_printf_i+0x182>
 800692c:	4616      	mov	r6, r2
 800692e:	e7bb      	b.n	80068a8 <_printf_i+0x130>
 8006930:	680b      	ldr	r3, [r1, #0]
 8006932:	6826      	ldr	r6, [r4, #0]
 8006934:	6960      	ldr	r0, [r4, #20]
 8006936:	1d1d      	adds	r5, r3, #4
 8006938:	600d      	str	r5, [r1, #0]
 800693a:	0635      	lsls	r5, r6, #24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	d501      	bpl.n	8006944 <_printf_i+0x1cc>
 8006940:	6018      	str	r0, [r3, #0]
 8006942:	e002      	b.n	800694a <_printf_i+0x1d2>
 8006944:	0671      	lsls	r1, r6, #25
 8006946:	d5fb      	bpl.n	8006940 <_printf_i+0x1c8>
 8006948:	8018      	strh	r0, [r3, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	4616      	mov	r6, r2
 8006950:	e7ba      	b.n	80068c8 <_printf_i+0x150>
 8006952:	680b      	ldr	r3, [r1, #0]
 8006954:	1d1a      	adds	r2, r3, #4
 8006956:	600a      	str	r2, [r1, #0]
 8006958:	681e      	ldr	r6, [r3, #0]
 800695a:	6862      	ldr	r2, [r4, #4]
 800695c:	2100      	movs	r1, #0
 800695e:	4630      	mov	r0, r6
 8006960:	f7f9 fc36 	bl	80001d0 <memchr>
 8006964:	b108      	cbz	r0, 800696a <_printf_i+0x1f2>
 8006966:	1b80      	subs	r0, r0, r6
 8006968:	6060      	str	r0, [r4, #4]
 800696a:	6863      	ldr	r3, [r4, #4]
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	2300      	movs	r3, #0
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006974:	e7a8      	b.n	80068c8 <_printf_i+0x150>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	4632      	mov	r2, r6
 800697a:	4649      	mov	r1, r9
 800697c:	4640      	mov	r0, r8
 800697e:	47d0      	blx	sl
 8006980:	3001      	adds	r0, #1
 8006982:	d0ab      	beq.n	80068dc <_printf_i+0x164>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	079b      	lsls	r3, r3, #30
 8006988:	d413      	bmi.n	80069b2 <_printf_i+0x23a>
 800698a:	68e0      	ldr	r0, [r4, #12]
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	4298      	cmp	r0, r3
 8006990:	bfb8      	it	lt
 8006992:	4618      	movlt	r0, r3
 8006994:	e7a4      	b.n	80068e0 <_printf_i+0x168>
 8006996:	2301      	movs	r3, #1
 8006998:	4632      	mov	r2, r6
 800699a:	4649      	mov	r1, r9
 800699c:	4640      	mov	r0, r8
 800699e:	47d0      	blx	sl
 80069a0:	3001      	adds	r0, #1
 80069a2:	d09b      	beq.n	80068dc <_printf_i+0x164>
 80069a4:	3501      	adds	r5, #1
 80069a6:	68e3      	ldr	r3, [r4, #12]
 80069a8:	9903      	ldr	r1, [sp, #12]
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	dcf2      	bgt.n	8006996 <_printf_i+0x21e>
 80069b0:	e7eb      	b.n	800698a <_printf_i+0x212>
 80069b2:	2500      	movs	r5, #0
 80069b4:	f104 0619 	add.w	r6, r4, #25
 80069b8:	e7f5      	b.n	80069a6 <_printf_i+0x22e>
 80069ba:	bf00      	nop
 80069bc:	08007cad 	.word	0x08007cad
 80069c0:	08007cbe 	.word	0x08007cbe

080069c4 <memcpy>:
 80069c4:	440a      	add	r2, r1
 80069c6:	4291      	cmp	r1, r2
 80069c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069cc:	d100      	bne.n	80069d0 <memcpy+0xc>
 80069ce:	4770      	bx	lr
 80069d0:	b510      	push	{r4, lr}
 80069d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069da:	4291      	cmp	r1, r2
 80069dc:	d1f9      	bne.n	80069d2 <memcpy+0xe>
 80069de:	bd10      	pop	{r4, pc}

080069e0 <memmove>:
 80069e0:	4288      	cmp	r0, r1
 80069e2:	b510      	push	{r4, lr}
 80069e4:	eb01 0402 	add.w	r4, r1, r2
 80069e8:	d902      	bls.n	80069f0 <memmove+0x10>
 80069ea:	4284      	cmp	r4, r0
 80069ec:	4623      	mov	r3, r4
 80069ee:	d807      	bhi.n	8006a00 <memmove+0x20>
 80069f0:	1e43      	subs	r3, r0, #1
 80069f2:	42a1      	cmp	r1, r4
 80069f4:	d008      	beq.n	8006a08 <memmove+0x28>
 80069f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069fe:	e7f8      	b.n	80069f2 <memmove+0x12>
 8006a00:	4402      	add	r2, r0
 8006a02:	4601      	mov	r1, r0
 8006a04:	428a      	cmp	r2, r1
 8006a06:	d100      	bne.n	8006a0a <memmove+0x2a>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a12:	e7f7      	b.n	8006a04 <memmove+0x24>

08006a14 <_free_r>:
 8006a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d048      	beq.n	8006aac <_free_r+0x98>
 8006a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1e:	9001      	str	r0, [sp, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f1a1 0404 	sub.w	r4, r1, #4
 8006a26:	bfb8      	it	lt
 8006a28:	18e4      	addlt	r4, r4, r3
 8006a2a:	f000 f8d3 	bl	8006bd4 <__malloc_lock>
 8006a2e:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <_free_r+0x9c>)
 8006a30:	9801      	ldr	r0, [sp, #4]
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	4615      	mov	r5, r2
 8006a36:	b933      	cbnz	r3, 8006a46 <_free_r+0x32>
 8006a38:	6063      	str	r3, [r4, #4]
 8006a3a:	6014      	str	r4, [r2, #0]
 8006a3c:	b003      	add	sp, #12
 8006a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a42:	f000 b8cd 	b.w	8006be0 <__malloc_unlock>
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	d90b      	bls.n	8006a62 <_free_r+0x4e>
 8006a4a:	6821      	ldr	r1, [r4, #0]
 8006a4c:	1862      	adds	r2, r4, r1
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	bf04      	itt	eq
 8006a52:	681a      	ldreq	r2, [r3, #0]
 8006a54:	685b      	ldreq	r3, [r3, #4]
 8006a56:	6063      	str	r3, [r4, #4]
 8006a58:	bf04      	itt	eq
 8006a5a:	1852      	addeq	r2, r2, r1
 8006a5c:	6022      	streq	r2, [r4, #0]
 8006a5e:	602c      	str	r4, [r5, #0]
 8006a60:	e7ec      	b.n	8006a3c <_free_r+0x28>
 8006a62:	461a      	mov	r2, r3
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b10b      	cbz	r3, 8006a6c <_free_r+0x58>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d9fa      	bls.n	8006a62 <_free_r+0x4e>
 8006a6c:	6811      	ldr	r1, [r2, #0]
 8006a6e:	1855      	adds	r5, r2, r1
 8006a70:	42a5      	cmp	r5, r4
 8006a72:	d10b      	bne.n	8006a8c <_free_r+0x78>
 8006a74:	6824      	ldr	r4, [r4, #0]
 8006a76:	4421      	add	r1, r4
 8006a78:	1854      	adds	r4, r2, r1
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	d1dd      	bne.n	8006a3c <_free_r+0x28>
 8006a80:	681c      	ldr	r4, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	6053      	str	r3, [r2, #4]
 8006a86:	4421      	add	r1, r4
 8006a88:	6011      	str	r1, [r2, #0]
 8006a8a:	e7d7      	b.n	8006a3c <_free_r+0x28>
 8006a8c:	d902      	bls.n	8006a94 <_free_r+0x80>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	6003      	str	r3, [r0, #0]
 8006a92:	e7d3      	b.n	8006a3c <_free_r+0x28>
 8006a94:	6825      	ldr	r5, [r4, #0]
 8006a96:	1961      	adds	r1, r4, r5
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf04      	itt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	bf04      	itt	eq
 8006aa4:	1949      	addeq	r1, r1, r5
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	6054      	str	r4, [r2, #4]
 8006aaa:	e7c7      	b.n	8006a3c <_free_r+0x28>
 8006aac:	b003      	add	sp, #12
 8006aae:	bd30      	pop	{r4, r5, pc}
 8006ab0:	200002a4 	.word	0x200002a4

08006ab4 <_malloc_r>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	1ccd      	adds	r5, r1, #3
 8006ab8:	f025 0503 	bic.w	r5, r5, #3
 8006abc:	3508      	adds	r5, #8
 8006abe:	2d0c      	cmp	r5, #12
 8006ac0:	bf38      	it	cc
 8006ac2:	250c      	movcc	r5, #12
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	db01      	blt.n	8006ace <_malloc_r+0x1a>
 8006aca:	42a9      	cmp	r1, r5
 8006acc:	d903      	bls.n	8006ad6 <_malloc_r+0x22>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad6:	f000 f87d 	bl	8006bd4 <__malloc_lock>
 8006ada:	4921      	ldr	r1, [pc, #132]	; (8006b60 <_malloc_r+0xac>)
 8006adc:	680a      	ldr	r2, [r1, #0]
 8006ade:	4614      	mov	r4, r2
 8006ae0:	b99c      	cbnz	r4, 8006b0a <_malloc_r+0x56>
 8006ae2:	4f20      	ldr	r7, [pc, #128]	; (8006b64 <_malloc_r+0xb0>)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	b923      	cbnz	r3, 8006af2 <_malloc_r+0x3e>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 f862 	bl	8006bb4 <_sbrk_r>
 8006af0:	6038      	str	r0, [r7, #0]
 8006af2:	4629      	mov	r1, r5
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 f85d 	bl	8006bb4 <_sbrk_r>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d123      	bne.n	8006b46 <_malloc_r+0x92>
 8006afe:	230c      	movs	r3, #12
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	4630      	mov	r0, r6
 8006b04:	f000 f86c 	bl	8006be0 <__malloc_unlock>
 8006b08:	e7e3      	b.n	8006ad2 <_malloc_r+0x1e>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	1b5b      	subs	r3, r3, r5
 8006b0e:	d417      	bmi.n	8006b40 <_malloc_r+0x8c>
 8006b10:	2b0b      	cmp	r3, #11
 8006b12:	d903      	bls.n	8006b1c <_malloc_r+0x68>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	441c      	add	r4, r3
 8006b18:	6025      	str	r5, [r4, #0]
 8006b1a:	e004      	b.n	8006b26 <_malloc_r+0x72>
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	42a2      	cmp	r2, r4
 8006b20:	bf0c      	ite	eq
 8006b22:	600b      	streq	r3, [r1, #0]
 8006b24:	6053      	strne	r3, [r2, #4]
 8006b26:	4630      	mov	r0, r6
 8006b28:	f000 f85a 	bl	8006be0 <__malloc_unlock>
 8006b2c:	f104 000b 	add.w	r0, r4, #11
 8006b30:	1d23      	adds	r3, r4, #4
 8006b32:	f020 0007 	bic.w	r0, r0, #7
 8006b36:	1ac2      	subs	r2, r0, r3
 8006b38:	d0cc      	beq.n	8006ad4 <_malloc_r+0x20>
 8006b3a:	1a1b      	subs	r3, r3, r0
 8006b3c:	50a3      	str	r3, [r4, r2]
 8006b3e:	e7c9      	b.n	8006ad4 <_malloc_r+0x20>
 8006b40:	4622      	mov	r2, r4
 8006b42:	6864      	ldr	r4, [r4, #4]
 8006b44:	e7cc      	b.n	8006ae0 <_malloc_r+0x2c>
 8006b46:	1cc4      	adds	r4, r0, #3
 8006b48:	f024 0403 	bic.w	r4, r4, #3
 8006b4c:	42a0      	cmp	r0, r4
 8006b4e:	d0e3      	beq.n	8006b18 <_malloc_r+0x64>
 8006b50:	1a21      	subs	r1, r4, r0
 8006b52:	4630      	mov	r0, r6
 8006b54:	f000 f82e 	bl	8006bb4 <_sbrk_r>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d1dd      	bne.n	8006b18 <_malloc_r+0x64>
 8006b5c:	e7cf      	b.n	8006afe <_malloc_r+0x4a>
 8006b5e:	bf00      	nop
 8006b60:	200002a4 	.word	0x200002a4
 8006b64:	200002a8 	.word	0x200002a8

08006b68 <_realloc_r>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	460e      	mov	r6, r1
 8006b70:	b921      	cbnz	r1, 8006b7c <_realloc_r+0x14>
 8006b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b76:	4611      	mov	r1, r2
 8006b78:	f7ff bf9c 	b.w	8006ab4 <_malloc_r>
 8006b7c:	b922      	cbnz	r2, 8006b88 <_realloc_r+0x20>
 8006b7e:	f7ff ff49 	bl	8006a14 <_free_r>
 8006b82:	4625      	mov	r5, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b88:	f000 f830 	bl	8006bec <_malloc_usable_size_r>
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d20f      	bcs.n	8006bb0 <_realloc_r+0x48>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4638      	mov	r0, r7
 8006b94:	f7ff ff8e 	bl	8006ab4 <_malloc_r>
 8006b98:	4605      	mov	r5, r0
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0f2      	beq.n	8006b84 <_realloc_r+0x1c>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	f7ff ff0f 	bl	80069c4 <memcpy>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff33 	bl	8006a14 <_free_r>
 8006bae:	e7e9      	b.n	8006b84 <_realloc_r+0x1c>
 8006bb0:	4635      	mov	r5, r6
 8006bb2:	e7e7      	b.n	8006b84 <_realloc_r+0x1c>

08006bb4 <_sbrk_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d06      	ldr	r5, [pc, #24]	; (8006bd0 <_sbrk_r+0x1c>)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	f7fb f9ae 	bl	8001f20 <_sbrk>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_sbrk_r+0x1a>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_sbrk_r+0x1a>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20000824 	.word	0x20000824

08006bd4 <__malloc_lock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__malloc_lock+0x8>)
 8006bd6:	f000 b811 	b.w	8006bfc <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	2000082c 	.word	0x2000082c

08006be0 <__malloc_unlock>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__malloc_unlock+0x8>)
 8006be2:	f000 b80c 	b.w	8006bfe <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	2000082c 	.word	0x2000082c

08006bec <_malloc_usable_size_r>:
 8006bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf0:	1f18      	subs	r0, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfbc      	itt	lt
 8006bf6:	580b      	ldrlt	r3, [r1, r0]
 8006bf8:	18c0      	addlt	r0, r0, r3
 8006bfa:	4770      	bx	lr

08006bfc <__retarget_lock_acquire_recursive>:
 8006bfc:	4770      	bx	lr

08006bfe <__retarget_lock_release_recursive>:
 8006bfe:	4770      	bx	lr

08006c00 <pow>:
 8006c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	ec59 8b10 	vmov	r8, r9, d0
 8006c08:	ec57 6b11 	vmov	r6, r7, d1
 8006c0c:	f000 f8a8 	bl	8006d60 <__ieee754_pow>
 8006c10:	4b4e      	ldr	r3, [pc, #312]	; (8006d4c <pow+0x14c>)
 8006c12:	f993 3000 	ldrsb.w	r3, [r3]
 8006c16:	3301      	adds	r3, #1
 8006c18:	ec55 4b10 	vmov	r4, r5, d0
 8006c1c:	d015      	beq.n	8006c4a <pow+0x4a>
 8006c1e:	4632      	mov	r2, r6
 8006c20:	463b      	mov	r3, r7
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 ff79 	bl	8000b1c <__aeabi_dcmpun>
 8006c2a:	b970      	cbnz	r0, 8006c4a <pow+0x4a>
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ff72 	bl	8000b1c <__aeabi_dcmpun>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	b148      	cbz	r0, 8006c52 <pow+0x52>
 8006c3e:	4630      	mov	r0, r6
 8006c40:	4639      	mov	r1, r7
 8006c42:	f7f9 ff39 	bl	8000ab8 <__aeabi_dcmpeq>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d17d      	bne.n	8006d46 <pow+0x146>
 8006c4a:	ec45 4b10 	vmov	d0, r4, r5
 8006c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 ff2f 	bl	8000ab8 <__aeabi_dcmpeq>
 8006c5a:	b1e0      	cbz	r0, 8006c96 <pow+0x96>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 ff28 	bl	8000ab8 <__aeabi_dcmpeq>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d16c      	bne.n	8006d46 <pow+0x146>
 8006c6c:	ec47 6b10 	vmov	d0, r6, r7
 8006c70:	f000 fe55 	bl	800791e <finite>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d0e8      	beq.n	8006c4a <pow+0x4a>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 ff24 	bl	8000acc <__aeabi_dcmplt>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d0e0      	beq.n	8006c4a <pow+0x4a>
 8006c88:	f7ff fb48 	bl	800631c <__errno>
 8006c8c:	2321      	movs	r3, #33	; 0x21
 8006c8e:	6003      	str	r3, [r0, #0]
 8006c90:	2400      	movs	r4, #0
 8006c92:	4d2f      	ldr	r5, [pc, #188]	; (8006d50 <pow+0x150>)
 8006c94:	e7d9      	b.n	8006c4a <pow+0x4a>
 8006c96:	ec45 4b10 	vmov	d0, r4, r5
 8006c9a:	f000 fe40 	bl	800791e <finite>
 8006c9e:	bbb8      	cbnz	r0, 8006d10 <pow+0x110>
 8006ca0:	ec49 8b10 	vmov	d0, r8, r9
 8006ca4:	f000 fe3b 	bl	800791e <finite>
 8006ca8:	b390      	cbz	r0, 8006d10 <pow+0x110>
 8006caa:	ec47 6b10 	vmov	d0, r6, r7
 8006cae:	f000 fe36 	bl	800791e <finite>
 8006cb2:	b368      	cbz	r0, 8006d10 <pow+0x110>
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7f9 ff2e 	bl	8000b1c <__aeabi_dcmpun>
 8006cc0:	b160      	cbz	r0, 8006cdc <pow+0xdc>
 8006cc2:	f7ff fb2b 	bl	800631c <__errno>
 8006cc6:	2321      	movs	r3, #33	; 0x21
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f7f9 fdb3 	bl	800083c <__aeabi_ddiv>
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	e7b6      	b.n	8006c4a <pow+0x4a>
 8006cdc:	f7ff fb1e 	bl	800631c <__errno>
 8006ce0:	2322      	movs	r3, #34	; 0x22
 8006ce2:	6003      	str	r3, [r0, #0]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 feee 	bl	8000acc <__aeabi_dcmplt>
 8006cf0:	2400      	movs	r4, #0
 8006cf2:	b158      	cbz	r0, 8006d0c <pow+0x10c>
 8006cf4:	ec47 6b10 	vmov	d0, r6, r7
 8006cf8:	f000 fe26 	bl	8007948 <rint>
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	ec51 0b10 	vmov	r0, r1, d0
 8006d02:	463b      	mov	r3, r7
 8006d04:	f7f9 fed8 	bl	8000ab8 <__aeabi_dcmpeq>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0c2      	beq.n	8006c92 <pow+0x92>
 8006d0c:	4d11      	ldr	r5, [pc, #68]	; (8006d54 <pow+0x154>)
 8006d0e:	e79c      	b.n	8006c4a <pow+0x4a>
 8006d10:	2200      	movs	r2, #0
 8006d12:	2300      	movs	r3, #0
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fece 	bl	8000ab8 <__aeabi_dcmpeq>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d094      	beq.n	8006c4a <pow+0x4a>
 8006d20:	ec49 8b10 	vmov	d0, r8, r9
 8006d24:	f000 fdfb 	bl	800791e <finite>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d08e      	beq.n	8006c4a <pow+0x4a>
 8006d2c:	ec47 6b10 	vmov	d0, r6, r7
 8006d30:	f000 fdf5 	bl	800791e <finite>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d088      	beq.n	8006c4a <pow+0x4a>
 8006d38:	f7ff faf0 	bl	800631c <__errno>
 8006d3c:	2322      	movs	r3, #34	; 0x22
 8006d3e:	6003      	str	r3, [r0, #0]
 8006d40:	2400      	movs	r4, #0
 8006d42:	2500      	movs	r5, #0
 8006d44:	e781      	b.n	8006c4a <pow+0x4a>
 8006d46:	4d04      	ldr	r5, [pc, #16]	; (8006d58 <pow+0x158>)
 8006d48:	2400      	movs	r4, #0
 8006d4a:	e77e      	b.n	8006c4a <pow+0x4a>
 8006d4c:	20000074 	.word	0x20000074
 8006d50:	fff00000 	.word	0xfff00000
 8006d54:	7ff00000 	.word	0x7ff00000
 8006d58:	3ff00000 	.word	0x3ff00000
 8006d5c:	00000000 	.word	0x00000000

08006d60 <__ieee754_pow>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	ed2d 8b06 	vpush	{d8-d10}
 8006d68:	b08d      	sub	sp, #52	; 0x34
 8006d6a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006d6e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006d72:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006d76:	ea56 0100 	orrs.w	r1, r6, r0
 8006d7a:	ec53 2b10 	vmov	r2, r3, d0
 8006d7e:	f000 84d1 	beq.w	8007724 <__ieee754_pow+0x9c4>
 8006d82:	497f      	ldr	r1, [pc, #508]	; (8006f80 <__ieee754_pow+0x220>)
 8006d84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006d88:	428c      	cmp	r4, r1
 8006d8a:	ee10 8a10 	vmov	r8, s0
 8006d8e:	4699      	mov	r9, r3
 8006d90:	dc09      	bgt.n	8006da6 <__ieee754_pow+0x46>
 8006d92:	d103      	bne.n	8006d9c <__ieee754_pow+0x3c>
 8006d94:	b97a      	cbnz	r2, 8006db6 <__ieee754_pow+0x56>
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	dd02      	ble.n	8006da0 <__ieee754_pow+0x40>
 8006d9a:	e00c      	b.n	8006db6 <__ieee754_pow+0x56>
 8006d9c:	428e      	cmp	r6, r1
 8006d9e:	dc02      	bgt.n	8006da6 <__ieee754_pow+0x46>
 8006da0:	428e      	cmp	r6, r1
 8006da2:	d110      	bne.n	8006dc6 <__ieee754_pow+0x66>
 8006da4:	b178      	cbz	r0, 8006dc6 <__ieee754_pow+0x66>
 8006da6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006daa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006dae:	ea54 0308 	orrs.w	r3, r4, r8
 8006db2:	f000 84b7 	beq.w	8007724 <__ieee754_pow+0x9c4>
 8006db6:	4873      	ldr	r0, [pc, #460]	; (8006f84 <__ieee754_pow+0x224>)
 8006db8:	b00d      	add	sp, #52	; 0x34
 8006dba:	ecbd 8b06 	vpop	{d8-d10}
 8006dbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc2:	f000 bdb9 	b.w	8007938 <nan>
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	da36      	bge.n	8006e3a <__ieee754_pow+0xda>
 8006dcc:	496e      	ldr	r1, [pc, #440]	; (8006f88 <__ieee754_pow+0x228>)
 8006dce:	428e      	cmp	r6, r1
 8006dd0:	dc51      	bgt.n	8006e76 <__ieee754_pow+0x116>
 8006dd2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006dd6:	428e      	cmp	r6, r1
 8006dd8:	f340 84af 	ble.w	800773a <__ieee754_pow+0x9da>
 8006ddc:	1531      	asrs	r1, r6, #20
 8006dde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006de2:	2914      	cmp	r1, #20
 8006de4:	dd0f      	ble.n	8006e06 <__ieee754_pow+0xa6>
 8006de6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006dea:	fa20 fc01 	lsr.w	ip, r0, r1
 8006dee:	fa0c f101 	lsl.w	r1, ip, r1
 8006df2:	4281      	cmp	r1, r0
 8006df4:	f040 84a1 	bne.w	800773a <__ieee754_pow+0x9da>
 8006df8:	f00c 0c01 	and.w	ip, ip, #1
 8006dfc:	f1cc 0102 	rsb	r1, ip, #2
 8006e00:	9100      	str	r1, [sp, #0]
 8006e02:	b180      	cbz	r0, 8006e26 <__ieee754_pow+0xc6>
 8006e04:	e059      	b.n	8006eba <__ieee754_pow+0x15a>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d155      	bne.n	8006eb6 <__ieee754_pow+0x156>
 8006e0a:	f1c1 0114 	rsb	r1, r1, #20
 8006e0e:	fa46 fc01 	asr.w	ip, r6, r1
 8006e12:	fa0c f101 	lsl.w	r1, ip, r1
 8006e16:	42b1      	cmp	r1, r6
 8006e18:	f040 848c 	bne.w	8007734 <__ieee754_pow+0x9d4>
 8006e1c:	f00c 0c01 	and.w	ip, ip, #1
 8006e20:	f1cc 0102 	rsb	r1, ip, #2
 8006e24:	9100      	str	r1, [sp, #0]
 8006e26:	4959      	ldr	r1, [pc, #356]	; (8006f8c <__ieee754_pow+0x22c>)
 8006e28:	428e      	cmp	r6, r1
 8006e2a:	d12d      	bne.n	8006e88 <__ieee754_pow+0x128>
 8006e2c:	2f00      	cmp	r7, #0
 8006e2e:	da79      	bge.n	8006f24 <__ieee754_pow+0x1c4>
 8006e30:	4956      	ldr	r1, [pc, #344]	; (8006f8c <__ieee754_pow+0x22c>)
 8006e32:	2000      	movs	r0, #0
 8006e34:	f7f9 fd02 	bl	800083c <__aeabi_ddiv>
 8006e38:	e016      	b.n	8006e68 <__ieee754_pow+0x108>
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	9100      	str	r1, [sp, #0]
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d13b      	bne.n	8006eba <__ieee754_pow+0x15a>
 8006e42:	494f      	ldr	r1, [pc, #316]	; (8006f80 <__ieee754_pow+0x220>)
 8006e44:	428e      	cmp	r6, r1
 8006e46:	d1ee      	bne.n	8006e26 <__ieee754_pow+0xc6>
 8006e48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006e4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006e50:	ea53 0308 	orrs.w	r3, r3, r8
 8006e54:	f000 8466 	beq.w	8007724 <__ieee754_pow+0x9c4>
 8006e58:	4b4d      	ldr	r3, [pc, #308]	; (8006f90 <__ieee754_pow+0x230>)
 8006e5a:	429c      	cmp	r4, r3
 8006e5c:	dd0d      	ble.n	8006e7a <__ieee754_pow+0x11a>
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	f280 8464 	bge.w	800772c <__ieee754_pow+0x9cc>
 8006e64:	2000      	movs	r0, #0
 8006e66:	2100      	movs	r1, #0
 8006e68:	ec41 0b10 	vmov	d0, r0, r1
 8006e6c:	b00d      	add	sp, #52	; 0x34
 8006e6e:	ecbd 8b06 	vpop	{d8-d10}
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e76:	2102      	movs	r1, #2
 8006e78:	e7e0      	b.n	8006e3c <__ieee754_pow+0xdc>
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	daf2      	bge.n	8006e64 <__ieee754_pow+0x104>
 8006e7e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006e82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e86:	e7ef      	b.n	8006e68 <__ieee754_pow+0x108>
 8006e88:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006e8c:	d104      	bne.n	8006e98 <__ieee754_pow+0x138>
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	f7f9 fba9 	bl	80005e8 <__aeabi_dmul>
 8006e96:	e7e7      	b.n	8006e68 <__ieee754_pow+0x108>
 8006e98:	493e      	ldr	r1, [pc, #248]	; (8006f94 <__ieee754_pow+0x234>)
 8006e9a:	428f      	cmp	r7, r1
 8006e9c:	d10d      	bne.n	8006eba <__ieee754_pow+0x15a>
 8006e9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ea2:	db0a      	blt.n	8006eba <__ieee754_pow+0x15a>
 8006ea4:	ec43 2b10 	vmov	d0, r2, r3
 8006ea8:	b00d      	add	sp, #52	; 0x34
 8006eaa:	ecbd 8b06 	vpop	{d8-d10}
 8006eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb2:	f000 bc77 	b.w	80077a4 <__ieee754_sqrt>
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	9100      	str	r1, [sp, #0]
 8006eba:	ec43 2b10 	vmov	d0, r2, r3
 8006ebe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ec2:	f000 fd23 	bl	800790c <fabs>
 8006ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eca:	ec51 0b10 	vmov	r0, r1, d0
 8006ece:	f1b8 0f00 	cmp.w	r8, #0
 8006ed2:	d12a      	bne.n	8006f2a <__ieee754_pow+0x1ca>
 8006ed4:	b12c      	cbz	r4, 8006ee2 <__ieee754_pow+0x182>
 8006ed6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006f8c <__ieee754_pow+0x22c>
 8006eda:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006ede:	45e6      	cmp	lr, ip
 8006ee0:	d123      	bne.n	8006f2a <__ieee754_pow+0x1ca>
 8006ee2:	2f00      	cmp	r7, #0
 8006ee4:	da05      	bge.n	8006ef2 <__ieee754_pow+0x192>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	2000      	movs	r0, #0
 8006eec:	4927      	ldr	r1, [pc, #156]	; (8006f8c <__ieee754_pow+0x22c>)
 8006eee:	f7f9 fca5 	bl	800083c <__aeabi_ddiv>
 8006ef2:	f1b9 0f00 	cmp.w	r9, #0
 8006ef6:	dab7      	bge.n	8006e68 <__ieee754_pow+0x108>
 8006ef8:	9b00      	ldr	r3, [sp, #0]
 8006efa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006efe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f02:	4323      	orrs	r3, r4
 8006f04:	d108      	bne.n	8006f18 <__ieee754_pow+0x1b8>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f7f9 f9b3 	bl	8000278 <__aeabi_dsub>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	e78d      	b.n	8006e34 <__ieee754_pow+0xd4>
 8006f18:	9b00      	ldr	r3, [sp, #0]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d1a4      	bne.n	8006e68 <__ieee754_pow+0x108>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f24:	4610      	mov	r0, r2
 8006f26:	4619      	mov	r1, r3
 8006f28:	e79e      	b.n	8006e68 <__ieee754_pow+0x108>
 8006f2a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006f2e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006f32:	950a      	str	r5, [sp, #40]	; 0x28
 8006f34:	9d00      	ldr	r5, [sp, #0]
 8006f36:	46ac      	mov	ip, r5
 8006f38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006f3a:	ea5c 0505 	orrs.w	r5, ip, r5
 8006f3e:	d0e4      	beq.n	8006f0a <__ieee754_pow+0x1aa>
 8006f40:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <__ieee754_pow+0x238>)
 8006f42:	429e      	cmp	r6, r3
 8006f44:	f340 80fc 	ble.w	8007140 <__ieee754_pow+0x3e0>
 8006f48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006f4c:	429e      	cmp	r6, r3
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <__ieee754_pow+0x230>)
 8006f50:	dd07      	ble.n	8006f62 <__ieee754_pow+0x202>
 8006f52:	429c      	cmp	r4, r3
 8006f54:	dc0a      	bgt.n	8006f6c <__ieee754_pow+0x20c>
 8006f56:	2f00      	cmp	r7, #0
 8006f58:	da84      	bge.n	8006e64 <__ieee754_pow+0x104>
 8006f5a:	a307      	add	r3, pc, #28	; (adr r3, 8006f78 <__ieee754_pow+0x218>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	e795      	b.n	8006e8e <__ieee754_pow+0x12e>
 8006f62:	429c      	cmp	r4, r3
 8006f64:	dbf7      	blt.n	8006f56 <__ieee754_pow+0x1f6>
 8006f66:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <__ieee754_pow+0x22c>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	dd17      	ble.n	8006f9c <__ieee754_pow+0x23c>
 8006f6c:	2f00      	cmp	r7, #0
 8006f6e:	dcf4      	bgt.n	8006f5a <__ieee754_pow+0x1fa>
 8006f70:	e778      	b.n	8006e64 <__ieee754_pow+0x104>
 8006f72:	bf00      	nop
 8006f74:	f3af 8000 	nop.w
 8006f78:	8800759c 	.word	0x8800759c
 8006f7c:	7e37e43c 	.word	0x7e37e43c
 8006f80:	7ff00000 	.word	0x7ff00000
 8006f84:	08007ca1 	.word	0x08007ca1
 8006f88:	433fffff 	.word	0x433fffff
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	3fefffff 	.word	0x3fefffff
 8006f94:	3fe00000 	.word	0x3fe00000
 8006f98:	41e00000 	.word	0x41e00000
 8006f9c:	4b64      	ldr	r3, [pc, #400]	; (8007130 <__ieee754_pow+0x3d0>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f7f9 f96a 	bl	8000278 <__aeabi_dsub>
 8006fa4:	a356      	add	r3, pc, #344	; (adr r3, 8007100 <__ieee754_pow+0x3a0>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	4604      	mov	r4, r0
 8006fac:	460d      	mov	r5, r1
 8006fae:	f7f9 fb1b 	bl	80005e8 <__aeabi_dmul>
 8006fb2:	a355      	add	r3, pc, #340	; (adr r3, 8007108 <__ieee754_pow+0x3a8>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	4606      	mov	r6, r0
 8006fba:	460f      	mov	r7, r1
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7f9 fb12 	bl	80005e8 <__aeabi_dmul>
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	; (8007134 <__ieee754_pow+0x3d4>)
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	468b      	mov	fp, r1
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	f7f9 fb0a 	bl	80005e8 <__aeabi_dmul>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	a14d      	add	r1, pc, #308	; (adr r1, 8007110 <__ieee754_pow+0x3b0>)
 8006fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fde:	f7f9 f94b 	bl	8000278 <__aeabi_dsub>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	f7f9 faff 	bl	80005e8 <__aeabi_dmul>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	2000      	movs	r0, #0
 8006ff0:	4951      	ldr	r1, [pc, #324]	; (8007138 <__ieee754_pow+0x3d8>)
 8006ff2:	f7f9 f941 	bl	8000278 <__aeabi_dsub>
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4689      	mov	r9, r1
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 faf1 	bl	80005e8 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 faeb 	bl	80005e8 <__aeabi_dmul>
 8007012:	a341      	add	r3, pc, #260	; (adr r3, 8007118 <__ieee754_pow+0x3b8>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 fae6 	bl	80005e8 <__aeabi_dmul>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4650      	mov	r0, sl
 8007022:	4659      	mov	r1, fp
 8007024:	f7f9 f928 	bl	8000278 <__aeabi_dsub>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4680      	mov	r8, r0
 800702e:	4689      	mov	r9, r1
 8007030:	4630      	mov	r0, r6
 8007032:	4639      	mov	r1, r7
 8007034:	f7f9 f922 	bl	800027c <__adddf3>
 8007038:	2400      	movs	r4, #0
 800703a:	4632      	mov	r2, r6
 800703c:	463b      	mov	r3, r7
 800703e:	4620      	mov	r0, r4
 8007040:	460d      	mov	r5, r1
 8007042:	f7f9 f919 	bl	8000278 <__aeabi_dsub>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 f913 	bl	8000278 <__aeabi_dsub>
 8007052:	9b00      	ldr	r3, [sp, #0]
 8007054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007056:	3b01      	subs	r3, #1
 8007058:	4313      	orrs	r3, r2
 800705a:	4682      	mov	sl, r0
 800705c:	468b      	mov	fp, r1
 800705e:	f040 81f1 	bne.w	8007444 <__ieee754_pow+0x6e4>
 8007062:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007120 <__ieee754_pow+0x3c0>
 8007066:	eeb0 8a47 	vmov.f32	s16, s14
 800706a:	eef0 8a67 	vmov.f32	s17, s15
 800706e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007072:	2600      	movs	r6, #0
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800707c:	f7f9 f8fc 	bl	8000278 <__aeabi_dsub>
 8007080:	4622      	mov	r2, r4
 8007082:	462b      	mov	r3, r5
 8007084:	f7f9 fab0 	bl	80005e8 <__aeabi_dmul>
 8007088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708c:	4680      	mov	r8, r0
 800708e:	4689      	mov	r9, r1
 8007090:	4650      	mov	r0, sl
 8007092:	4659      	mov	r1, fp
 8007094:	f7f9 faa8 	bl	80005e8 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4640      	mov	r0, r8
 800709e:	4649      	mov	r1, r9
 80070a0:	f7f9 f8ec 	bl	800027c <__adddf3>
 80070a4:	4632      	mov	r2, r6
 80070a6:	463b      	mov	r3, r7
 80070a8:	4680      	mov	r8, r0
 80070aa:	4689      	mov	r9, r1
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 fa9a 	bl	80005e8 <__aeabi_dmul>
 80070b4:	460b      	mov	r3, r1
 80070b6:	4604      	mov	r4, r0
 80070b8:	460d      	mov	r5, r1
 80070ba:	4602      	mov	r2, r0
 80070bc:	4649      	mov	r1, r9
 80070be:	4640      	mov	r0, r8
 80070c0:	f7f9 f8dc 	bl	800027c <__adddf3>
 80070c4:	4b1d      	ldr	r3, [pc, #116]	; (800713c <__ieee754_pow+0x3dc>)
 80070c6:	4299      	cmp	r1, r3
 80070c8:	ec45 4b19 	vmov	d9, r4, r5
 80070cc:	4606      	mov	r6, r0
 80070ce:	460f      	mov	r7, r1
 80070d0:	468b      	mov	fp, r1
 80070d2:	f340 82fe 	ble.w	80076d2 <__ieee754_pow+0x972>
 80070d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80070da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80070de:	4303      	orrs	r3, r0
 80070e0:	f000 81f0 	beq.w	80074c4 <__ieee754_pow+0x764>
 80070e4:	a310      	add	r3, pc, #64	; (adr r3, 8007128 <__ieee754_pow+0x3c8>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	ec51 0b18 	vmov	r0, r1, d8
 80070ee:	f7f9 fa7b 	bl	80005e8 <__aeabi_dmul>
 80070f2:	a30d      	add	r3, pc, #52	; (adr r3, 8007128 <__ieee754_pow+0x3c8>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	e6cb      	b.n	8006e92 <__ieee754_pow+0x132>
 80070fa:	bf00      	nop
 80070fc:	f3af 8000 	nop.w
 8007100:	60000000 	.word	0x60000000
 8007104:	3ff71547 	.word	0x3ff71547
 8007108:	f85ddf44 	.word	0xf85ddf44
 800710c:	3e54ae0b 	.word	0x3e54ae0b
 8007110:	55555555 	.word	0x55555555
 8007114:	3fd55555 	.word	0x3fd55555
 8007118:	652b82fe 	.word	0x652b82fe
 800711c:	3ff71547 	.word	0x3ff71547
 8007120:	00000000 	.word	0x00000000
 8007124:	bff00000 	.word	0xbff00000
 8007128:	8800759c 	.word	0x8800759c
 800712c:	7e37e43c 	.word	0x7e37e43c
 8007130:	3ff00000 	.word	0x3ff00000
 8007134:	3fd00000 	.word	0x3fd00000
 8007138:	3fe00000 	.word	0x3fe00000
 800713c:	408fffff 	.word	0x408fffff
 8007140:	4bd7      	ldr	r3, [pc, #860]	; (80074a0 <__ieee754_pow+0x740>)
 8007142:	ea03 0309 	and.w	r3, r3, r9
 8007146:	2200      	movs	r2, #0
 8007148:	b92b      	cbnz	r3, 8007156 <__ieee754_pow+0x3f6>
 800714a:	4bd6      	ldr	r3, [pc, #856]	; (80074a4 <__ieee754_pow+0x744>)
 800714c:	f7f9 fa4c 	bl	80005e8 <__aeabi_dmul>
 8007150:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007154:	460c      	mov	r4, r1
 8007156:	1523      	asrs	r3, r4, #20
 8007158:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800715c:	4413      	add	r3, r2
 800715e:	9309      	str	r3, [sp, #36]	; 0x24
 8007160:	4bd1      	ldr	r3, [pc, #836]	; (80074a8 <__ieee754_pow+0x748>)
 8007162:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007166:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800716a:	429c      	cmp	r4, r3
 800716c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007170:	dd08      	ble.n	8007184 <__ieee754_pow+0x424>
 8007172:	4bce      	ldr	r3, [pc, #824]	; (80074ac <__ieee754_pow+0x74c>)
 8007174:	429c      	cmp	r4, r3
 8007176:	f340 8163 	ble.w	8007440 <__ieee754_pow+0x6e0>
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	3301      	adds	r3, #1
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007184:	2400      	movs	r4, #0
 8007186:	00e3      	lsls	r3, r4, #3
 8007188:	930b      	str	r3, [sp, #44]	; 0x2c
 800718a:	4bc9      	ldr	r3, [pc, #804]	; (80074b0 <__ieee754_pow+0x750>)
 800718c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007190:	ed93 7b00 	vldr	d7, [r3]
 8007194:	4629      	mov	r1, r5
 8007196:	ec53 2b17 	vmov	r2, r3, d7
 800719a:	eeb0 8a47 	vmov.f32	s16, s14
 800719e:	eef0 8a67 	vmov.f32	s17, s15
 80071a2:	4682      	mov	sl, r0
 80071a4:	f7f9 f868 	bl	8000278 <__aeabi_dsub>
 80071a8:	4652      	mov	r2, sl
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	462b      	mov	r3, r5
 80071b0:	ec51 0b18 	vmov	r0, r1, d8
 80071b4:	f7f9 f862 	bl	800027c <__adddf3>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	2000      	movs	r0, #0
 80071be:	49bd      	ldr	r1, [pc, #756]	; (80074b4 <__ieee754_pow+0x754>)
 80071c0:	f7f9 fb3c 	bl	800083c <__aeabi_ddiv>
 80071c4:	ec41 0b19 	vmov	d9, r0, r1
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4630      	mov	r0, r6
 80071ce:	4639      	mov	r1, r7
 80071d0:	f7f9 fa0a 	bl	80005e8 <__aeabi_dmul>
 80071d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071e0:	2300      	movs	r3, #0
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071e8:	46ab      	mov	fp, r5
 80071ea:	106d      	asrs	r5, r5, #1
 80071ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80071f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80071f4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80071f8:	2200      	movs	r2, #0
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	4614      	mov	r4, r2
 8007200:	461d      	mov	r5, r3
 8007202:	f7f9 f9f1 	bl	80005e8 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 f833 	bl	8000278 <__aeabi_dsub>
 8007212:	ec53 2b18 	vmov	r2, r3, d8
 8007216:	4606      	mov	r6, r0
 8007218:	460f      	mov	r7, r1
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f82b 	bl	8000278 <__aeabi_dsub>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4650      	mov	r0, sl
 8007228:	4659      	mov	r1, fp
 800722a:	f7f9 f825 	bl	8000278 <__aeabi_dsub>
 800722e:	4642      	mov	r2, r8
 8007230:	464b      	mov	r3, r9
 8007232:	f7f9 f9d9 	bl	80005e8 <__aeabi_dmul>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4630      	mov	r0, r6
 800723c:	4639      	mov	r1, r7
 800723e:	f7f9 f81b 	bl	8000278 <__aeabi_dsub>
 8007242:	ec53 2b19 	vmov	r2, r3, d9
 8007246:	f7f9 f9cf 	bl	80005e8 <__aeabi_dmul>
 800724a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800724e:	ec41 0b18 	vmov	d8, r0, r1
 8007252:	4610      	mov	r0, r2
 8007254:	4619      	mov	r1, r3
 8007256:	f7f9 f9c7 	bl	80005e8 <__aeabi_dmul>
 800725a:	a37d      	add	r3, pc, #500	; (adr r3, 8007450 <__ieee754_pow+0x6f0>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
 8007264:	f7f9 f9c0 	bl	80005e8 <__aeabi_dmul>
 8007268:	a37b      	add	r3, pc, #492	; (adr r3, 8007458 <__ieee754_pow+0x6f8>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f805 	bl	800027c <__adddf3>
 8007272:	4622      	mov	r2, r4
 8007274:	462b      	mov	r3, r5
 8007276:	f7f9 f9b7 	bl	80005e8 <__aeabi_dmul>
 800727a:	a379      	add	r3, pc, #484	; (adr r3, 8007460 <__ieee754_pow+0x700>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f8 fffc 	bl	800027c <__adddf3>
 8007284:	4622      	mov	r2, r4
 8007286:	462b      	mov	r3, r5
 8007288:	f7f9 f9ae 	bl	80005e8 <__aeabi_dmul>
 800728c:	a376      	add	r3, pc, #472	; (adr r3, 8007468 <__ieee754_pow+0x708>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f8 fff3 	bl	800027c <__adddf3>
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	f7f9 f9a5 	bl	80005e8 <__aeabi_dmul>
 800729e:	a374      	add	r3, pc, #464	; (adr r3, 8007470 <__ieee754_pow+0x710>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f8 ffea 	bl	800027c <__adddf3>
 80072a8:	4622      	mov	r2, r4
 80072aa:	462b      	mov	r3, r5
 80072ac:	f7f9 f99c 	bl	80005e8 <__aeabi_dmul>
 80072b0:	a371      	add	r3, pc, #452	; (adr r3, 8007478 <__ieee754_pow+0x718>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f8 ffe1 	bl	800027c <__adddf3>
 80072ba:	4622      	mov	r2, r4
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	462b      	mov	r3, r5
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7f9 f98f 	bl	80005e8 <__aeabi_dmul>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f9 f989 	bl	80005e8 <__aeabi_dmul>
 80072d6:	4642      	mov	r2, r8
 80072d8:	4604      	mov	r4, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	464b      	mov	r3, r9
 80072de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072e2:	f7f8 ffcb 	bl	800027c <__adddf3>
 80072e6:	ec53 2b18 	vmov	r2, r3, d8
 80072ea:	f7f9 f97d 	bl	80005e8 <__aeabi_dmul>
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	f7f8 ffc3 	bl	800027c <__adddf3>
 80072f6:	4642      	mov	r2, r8
 80072f8:	4682      	mov	sl, r0
 80072fa:	468b      	mov	fp, r1
 80072fc:	464b      	mov	r3, r9
 80072fe:	4640      	mov	r0, r8
 8007300:	4649      	mov	r1, r9
 8007302:	f7f9 f971 	bl	80005e8 <__aeabi_dmul>
 8007306:	4b6c      	ldr	r3, [pc, #432]	; (80074b8 <__ieee754_pow+0x758>)
 8007308:	2200      	movs	r2, #0
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	f7f8 ffb5 	bl	800027c <__adddf3>
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	f7f8 ffb1 	bl	800027c <__adddf3>
 800731a:	9c04      	ldr	r4, [sp, #16]
 800731c:	460d      	mov	r5, r1
 800731e:	4622      	mov	r2, r4
 8007320:	460b      	mov	r3, r1
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 f95f 	bl	80005e8 <__aeabi_dmul>
 800732a:	4b63      	ldr	r3, [pc, #396]	; (80074b8 <__ieee754_pow+0x758>)
 800732c:	4680      	mov	r8, r0
 800732e:	4689      	mov	r9, r1
 8007330:	2200      	movs	r2, #0
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f8 ff9f 	bl	8000278 <__aeabi_dsub>
 800733a:	4632      	mov	r2, r6
 800733c:	463b      	mov	r3, r7
 800733e:	f7f8 ff9b 	bl	8000278 <__aeabi_dsub>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4650      	mov	r0, sl
 8007348:	4659      	mov	r1, fp
 800734a:	f7f8 ff95 	bl	8000278 <__aeabi_dsub>
 800734e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007352:	f7f9 f949 	bl	80005e8 <__aeabi_dmul>
 8007356:	4622      	mov	r2, r4
 8007358:	4606      	mov	r6, r0
 800735a:	460f      	mov	r7, r1
 800735c:	462b      	mov	r3, r5
 800735e:	ec51 0b18 	vmov	r0, r1, d8
 8007362:	f7f9 f941 	bl	80005e8 <__aeabi_dmul>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4630      	mov	r0, r6
 800736c:	4639      	mov	r1, r7
 800736e:	f7f8 ff85 	bl	800027c <__adddf3>
 8007372:	4606      	mov	r6, r0
 8007374:	460f      	mov	r7, r1
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4640      	mov	r0, r8
 800737c:	4649      	mov	r1, r9
 800737e:	f7f8 ff7d 	bl	800027c <__adddf3>
 8007382:	9c04      	ldr	r4, [sp, #16]
 8007384:	a33e      	add	r3, pc, #248	; (adr r3, 8007480 <__ieee754_pow+0x720>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	4620      	mov	r0, r4
 800738c:	460d      	mov	r5, r1
 800738e:	f7f9 f92b 	bl	80005e8 <__aeabi_dmul>
 8007392:	4642      	mov	r2, r8
 8007394:	ec41 0b18 	vmov	d8, r0, r1
 8007398:	464b      	mov	r3, r9
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f7f8 ff6b 	bl	8000278 <__aeabi_dsub>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4630      	mov	r0, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f8 ff65 	bl	8000278 <__aeabi_dsub>
 80073ae:	a336      	add	r3, pc, #216	; (adr r3, 8007488 <__ieee754_pow+0x728>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f9 f918 	bl	80005e8 <__aeabi_dmul>
 80073b8:	a335      	add	r3, pc, #212	; (adr r3, 8007490 <__ieee754_pow+0x730>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 f90f 	bl	80005e8 <__aeabi_dmul>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f8 ff53 	bl	800027c <__adddf3>
 80073d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073d8:	4b38      	ldr	r3, [pc, #224]	; (80074bc <__ieee754_pow+0x75c>)
 80073da:	4413      	add	r3, r2
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f8 ff4c 	bl	800027c <__adddf3>
 80073e4:	4682      	mov	sl, r0
 80073e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e8:	468b      	mov	fp, r1
 80073ea:	f7f9 f893 	bl	8000514 <__aeabi_i2d>
 80073ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073f0:	4b33      	ldr	r3, [pc, #204]	; (80074c0 <__ieee754_pow+0x760>)
 80073f2:	4413      	add	r3, r2
 80073f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	4652      	mov	r2, sl
 80073fe:	465b      	mov	r3, fp
 8007400:	ec51 0b18 	vmov	r0, r1, d8
 8007404:	f7f8 ff3a 	bl	800027c <__adddf3>
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	f7f8 ff36 	bl	800027c <__adddf3>
 8007410:	4632      	mov	r2, r6
 8007412:	463b      	mov	r3, r7
 8007414:	f7f8 ff32 	bl	800027c <__adddf3>
 8007418:	9c04      	ldr	r4, [sp, #16]
 800741a:	4632      	mov	r2, r6
 800741c:	463b      	mov	r3, r7
 800741e:	4620      	mov	r0, r4
 8007420:	460d      	mov	r5, r1
 8007422:	f7f8 ff29 	bl	8000278 <__aeabi_dsub>
 8007426:	4642      	mov	r2, r8
 8007428:	464b      	mov	r3, r9
 800742a:	f7f8 ff25 	bl	8000278 <__aeabi_dsub>
 800742e:	ec53 2b18 	vmov	r2, r3, d8
 8007432:	f7f8 ff21 	bl	8000278 <__aeabi_dsub>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4650      	mov	r0, sl
 800743c:	4659      	mov	r1, fp
 800743e:	e606      	b.n	800704e <__ieee754_pow+0x2ee>
 8007440:	2401      	movs	r4, #1
 8007442:	e6a0      	b.n	8007186 <__ieee754_pow+0x426>
 8007444:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007498 <__ieee754_pow+0x738>
 8007448:	e60d      	b.n	8007066 <__ieee754_pow+0x306>
 800744a:	bf00      	nop
 800744c:	f3af 8000 	nop.w
 8007450:	4a454eef 	.word	0x4a454eef
 8007454:	3fca7e28 	.word	0x3fca7e28
 8007458:	93c9db65 	.word	0x93c9db65
 800745c:	3fcd864a 	.word	0x3fcd864a
 8007460:	a91d4101 	.word	0xa91d4101
 8007464:	3fd17460 	.word	0x3fd17460
 8007468:	518f264d 	.word	0x518f264d
 800746c:	3fd55555 	.word	0x3fd55555
 8007470:	db6fabff 	.word	0xdb6fabff
 8007474:	3fdb6db6 	.word	0x3fdb6db6
 8007478:	33333303 	.word	0x33333303
 800747c:	3fe33333 	.word	0x3fe33333
 8007480:	e0000000 	.word	0xe0000000
 8007484:	3feec709 	.word	0x3feec709
 8007488:	dc3a03fd 	.word	0xdc3a03fd
 800748c:	3feec709 	.word	0x3feec709
 8007490:	145b01f5 	.word	0x145b01f5
 8007494:	be3e2fe0 	.word	0xbe3e2fe0
 8007498:	00000000 	.word	0x00000000
 800749c:	3ff00000 	.word	0x3ff00000
 80074a0:	7ff00000 	.word	0x7ff00000
 80074a4:	43400000 	.word	0x43400000
 80074a8:	0003988e 	.word	0x0003988e
 80074ac:	000bb679 	.word	0x000bb679
 80074b0:	08007cd0 	.word	0x08007cd0
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	40080000 	.word	0x40080000
 80074bc:	08007cf0 	.word	0x08007cf0
 80074c0:	08007ce0 	.word	0x08007ce0
 80074c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800779c <__ieee754_pow+0xa3c>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f8 fed5 	bl	800027c <__adddf3>
 80074d2:	4622      	mov	r2, r4
 80074d4:	ec41 0b1a 	vmov	d10, r0, r1
 80074d8:	462b      	mov	r3, r5
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f8 fecb 	bl	8000278 <__aeabi_dsub>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	ec51 0b1a 	vmov	r0, r1, d10
 80074ea:	f7f9 fb0d 	bl	8000b08 <__aeabi_dcmpgt>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f47f adf8 	bne.w	80070e4 <__ieee754_pow+0x384>
 80074f4:	4aa4      	ldr	r2, [pc, #656]	; (8007788 <__ieee754_pow+0xa28>)
 80074f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074fa:	4293      	cmp	r3, r2
 80074fc:	f340 810b 	ble.w	8007716 <__ieee754_pow+0x9b6>
 8007500:	151b      	asrs	r3, r3, #20
 8007502:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007506:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800750a:	fa4a f303 	asr.w	r3, sl, r3
 800750e:	445b      	add	r3, fp
 8007510:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007514:	4e9d      	ldr	r6, [pc, #628]	; (800778c <__ieee754_pow+0xa2c>)
 8007516:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800751a:	4116      	asrs	r6, r2
 800751c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007520:	2000      	movs	r0, #0
 8007522:	ea23 0106 	bic.w	r1, r3, r6
 8007526:	f1c2 0214 	rsb	r2, r2, #20
 800752a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800752e:	fa4a fa02 	asr.w	sl, sl, r2
 8007532:	f1bb 0f00 	cmp.w	fp, #0
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	bfb8      	it	lt
 8007540:	f1ca 0a00 	rsblt	sl, sl, #0
 8007544:	f7f8 fe98 	bl	8000278 <__aeabi_dsub>
 8007548:	ec41 0b19 	vmov	d9, r0, r1
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	ec51 0b19 	vmov	r0, r1, d9
 8007554:	f7f8 fe92 	bl	800027c <__adddf3>
 8007558:	2400      	movs	r4, #0
 800755a:	a379      	add	r3, pc, #484	; (adr r3, 8007740 <__ieee754_pow+0x9e0>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	4620      	mov	r0, r4
 8007562:	460d      	mov	r5, r1
 8007564:	f7f9 f840 	bl	80005e8 <__aeabi_dmul>
 8007568:	ec53 2b19 	vmov	r2, r3, d9
 800756c:	4606      	mov	r6, r0
 800756e:	460f      	mov	r7, r1
 8007570:	4620      	mov	r0, r4
 8007572:	4629      	mov	r1, r5
 8007574:	f7f8 fe80 	bl	8000278 <__aeabi_dsub>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4640      	mov	r0, r8
 800757e:	4649      	mov	r1, r9
 8007580:	f7f8 fe7a 	bl	8000278 <__aeabi_dsub>
 8007584:	a370      	add	r3, pc, #448	; (adr r3, 8007748 <__ieee754_pow+0x9e8>)
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f7f9 f82d 	bl	80005e8 <__aeabi_dmul>
 800758e:	a370      	add	r3, pc, #448	; (adr r3, 8007750 <__ieee754_pow+0x9f0>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	4680      	mov	r8, r0
 8007596:	4689      	mov	r9, r1
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	f7f9 f824 	bl	80005e8 <__aeabi_dmul>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f8 fe68 	bl	800027c <__adddf3>
 80075ac:	4604      	mov	r4, r0
 80075ae:	460d      	mov	r5, r1
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f8 fe60 	bl	800027c <__adddf3>
 80075bc:	4632      	mov	r2, r6
 80075be:	463b      	mov	r3, r7
 80075c0:	4680      	mov	r8, r0
 80075c2:	4689      	mov	r9, r1
 80075c4:	f7f8 fe58 	bl	8000278 <__aeabi_dsub>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4620      	mov	r0, r4
 80075ce:	4629      	mov	r1, r5
 80075d0:	f7f8 fe52 	bl	8000278 <__aeabi_dsub>
 80075d4:	4642      	mov	r2, r8
 80075d6:	4606      	mov	r6, r0
 80075d8:	460f      	mov	r7, r1
 80075da:	464b      	mov	r3, r9
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f9 f802 	bl	80005e8 <__aeabi_dmul>
 80075e4:	a35c      	add	r3, pc, #368	; (adr r3, 8007758 <__ieee754_pow+0x9f8>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	f7f8 fffb 	bl	80005e8 <__aeabi_dmul>
 80075f2:	a35b      	add	r3, pc, #364	; (adr r3, 8007760 <__ieee754_pow+0xa00>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f7f8 fe3e 	bl	8000278 <__aeabi_dsub>
 80075fc:	4622      	mov	r2, r4
 80075fe:	462b      	mov	r3, r5
 8007600:	f7f8 fff2 	bl	80005e8 <__aeabi_dmul>
 8007604:	a358      	add	r3, pc, #352	; (adr r3, 8007768 <__ieee754_pow+0xa08>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f8 fe37 	bl	800027c <__adddf3>
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	f7f8 ffe9 	bl	80005e8 <__aeabi_dmul>
 8007616:	a356      	add	r3, pc, #344	; (adr r3, 8007770 <__ieee754_pow+0xa10>)
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f7f8 fe2c 	bl	8000278 <__aeabi_dsub>
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	f7f8 ffe0 	bl	80005e8 <__aeabi_dmul>
 8007628:	a353      	add	r3, pc, #332	; (adr r3, 8007778 <__ieee754_pow+0xa18>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 fe25 	bl	800027c <__adddf3>
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	f7f8 ffd7 	bl	80005e8 <__aeabi_dmul>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4640      	mov	r0, r8
 8007640:	4649      	mov	r1, r9
 8007642:	f7f8 fe19 	bl	8000278 <__aeabi_dsub>
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	f7f8 ffc9 	bl	80005e8 <__aeabi_dmul>
 8007656:	2200      	movs	r2, #0
 8007658:	ec41 0b19 	vmov	d9, r0, r1
 800765c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	f7f8 fe08 	bl	8000278 <__aeabi_dsub>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	ec51 0b19 	vmov	r0, r1, d9
 8007670:	f7f9 f8e4 	bl	800083c <__aeabi_ddiv>
 8007674:	4632      	mov	r2, r6
 8007676:	4604      	mov	r4, r0
 8007678:	460d      	mov	r5, r1
 800767a:	463b      	mov	r3, r7
 800767c:	4640      	mov	r0, r8
 800767e:	4649      	mov	r1, r9
 8007680:	f7f8 ffb2 	bl	80005e8 <__aeabi_dmul>
 8007684:	4632      	mov	r2, r6
 8007686:	463b      	mov	r3, r7
 8007688:	f7f8 fdf8 	bl	800027c <__adddf3>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f8 fdf0 	bl	8000278 <__aeabi_dsub>
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	f7f8 fdec 	bl	8000278 <__aeabi_dsub>
 80076a0:	460b      	mov	r3, r1
 80076a2:	4602      	mov	r2, r0
 80076a4:	493a      	ldr	r1, [pc, #232]	; (8007790 <__ieee754_pow+0xa30>)
 80076a6:	2000      	movs	r0, #0
 80076a8:	f7f8 fde6 	bl	8000278 <__aeabi_dsub>
 80076ac:	e9cd 0100 	strd	r0, r1, [sp]
 80076b0:	9b01      	ldr	r3, [sp, #4]
 80076b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80076b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ba:	da2f      	bge.n	800771c <__ieee754_pow+0x9bc>
 80076bc:	4650      	mov	r0, sl
 80076be:	ed9d 0b00 	vldr	d0, [sp]
 80076c2:	f000 f9cd 	bl	8007a60 <scalbn>
 80076c6:	ec51 0b10 	vmov	r0, r1, d0
 80076ca:	ec53 2b18 	vmov	r2, r3, d8
 80076ce:	f7ff bbe0 	b.w	8006e92 <__ieee754_pow+0x132>
 80076d2:	4b30      	ldr	r3, [pc, #192]	; (8007794 <__ieee754_pow+0xa34>)
 80076d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80076d8:	429e      	cmp	r6, r3
 80076da:	f77f af0b 	ble.w	80074f4 <__ieee754_pow+0x794>
 80076de:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <__ieee754_pow+0xa38>)
 80076e0:	440b      	add	r3, r1
 80076e2:	4303      	orrs	r3, r0
 80076e4:	d00b      	beq.n	80076fe <__ieee754_pow+0x99e>
 80076e6:	a326      	add	r3, pc, #152	; (adr r3, 8007780 <__ieee754_pow+0xa20>)
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	ec51 0b18 	vmov	r0, r1, d8
 80076f0:	f7f8 ff7a 	bl	80005e8 <__aeabi_dmul>
 80076f4:	a322      	add	r3, pc, #136	; (adr r3, 8007780 <__ieee754_pow+0xa20>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7ff bbca 	b.w	8006e92 <__ieee754_pow+0x132>
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	f7f8 fdb9 	bl	8000278 <__aeabi_dsub>
 8007706:	4642      	mov	r2, r8
 8007708:	464b      	mov	r3, r9
 800770a:	f7f9 f9f3 	bl	8000af4 <__aeabi_dcmpge>
 800770e:	2800      	cmp	r0, #0
 8007710:	f43f aef0 	beq.w	80074f4 <__ieee754_pow+0x794>
 8007714:	e7e7      	b.n	80076e6 <__ieee754_pow+0x986>
 8007716:	f04f 0a00 	mov.w	sl, #0
 800771a:	e717      	b.n	800754c <__ieee754_pow+0x7ec>
 800771c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007720:	4619      	mov	r1, r3
 8007722:	e7d2      	b.n	80076ca <__ieee754_pow+0x96a>
 8007724:	491a      	ldr	r1, [pc, #104]	; (8007790 <__ieee754_pow+0xa30>)
 8007726:	2000      	movs	r0, #0
 8007728:	f7ff bb9e 	b.w	8006e68 <__ieee754_pow+0x108>
 800772c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007730:	f7ff bb9a 	b.w	8006e68 <__ieee754_pow+0x108>
 8007734:	9000      	str	r0, [sp, #0]
 8007736:	f7ff bb76 	b.w	8006e26 <__ieee754_pow+0xc6>
 800773a:	2100      	movs	r1, #0
 800773c:	f7ff bb60 	b.w	8006e00 <__ieee754_pow+0xa0>
 8007740:	00000000 	.word	0x00000000
 8007744:	3fe62e43 	.word	0x3fe62e43
 8007748:	fefa39ef 	.word	0xfefa39ef
 800774c:	3fe62e42 	.word	0x3fe62e42
 8007750:	0ca86c39 	.word	0x0ca86c39
 8007754:	be205c61 	.word	0xbe205c61
 8007758:	72bea4d0 	.word	0x72bea4d0
 800775c:	3e663769 	.word	0x3e663769
 8007760:	c5d26bf1 	.word	0xc5d26bf1
 8007764:	3ebbbd41 	.word	0x3ebbbd41
 8007768:	af25de2c 	.word	0xaf25de2c
 800776c:	3f11566a 	.word	0x3f11566a
 8007770:	16bebd93 	.word	0x16bebd93
 8007774:	3f66c16c 	.word	0x3f66c16c
 8007778:	5555553e 	.word	0x5555553e
 800777c:	3fc55555 	.word	0x3fc55555
 8007780:	c2f8f359 	.word	0xc2f8f359
 8007784:	01a56e1f 	.word	0x01a56e1f
 8007788:	3fe00000 	.word	0x3fe00000
 800778c:	000fffff 	.word	0x000fffff
 8007790:	3ff00000 	.word	0x3ff00000
 8007794:	4090cbff 	.word	0x4090cbff
 8007798:	3f6f3400 	.word	0x3f6f3400
 800779c:	652b82fe 	.word	0x652b82fe
 80077a0:	3c971547 	.word	0x3c971547

080077a4 <__ieee754_sqrt>:
 80077a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a8:	ec55 4b10 	vmov	r4, r5, d0
 80077ac:	4e56      	ldr	r6, [pc, #344]	; (8007908 <__ieee754_sqrt+0x164>)
 80077ae:	43ae      	bics	r6, r5
 80077b0:	ee10 0a10 	vmov	r0, s0
 80077b4:	ee10 3a10 	vmov	r3, s0
 80077b8:	4629      	mov	r1, r5
 80077ba:	462a      	mov	r2, r5
 80077bc:	d110      	bne.n	80077e0 <__ieee754_sqrt+0x3c>
 80077be:	ee10 2a10 	vmov	r2, s0
 80077c2:	462b      	mov	r3, r5
 80077c4:	f7f8 ff10 	bl	80005e8 <__aeabi_dmul>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 fd54 	bl	800027c <__adddf3>
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	ec45 4b10 	vmov	d0, r4, r5
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	dc10      	bgt.n	8007806 <__ieee754_sqrt+0x62>
 80077e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077e8:	4330      	orrs	r0, r6
 80077ea:	d0f5      	beq.n	80077d8 <__ieee754_sqrt+0x34>
 80077ec:	b15d      	cbz	r5, 8007806 <__ieee754_sqrt+0x62>
 80077ee:	ee10 2a10 	vmov	r2, s0
 80077f2:	462b      	mov	r3, r5
 80077f4:	ee10 0a10 	vmov	r0, s0
 80077f8:	f7f8 fd3e 	bl	8000278 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	f7f9 f81c 	bl	800083c <__aeabi_ddiv>
 8007804:	e7e6      	b.n	80077d4 <__ieee754_sqrt+0x30>
 8007806:	1509      	asrs	r1, r1, #20
 8007808:	d076      	beq.n	80078f8 <__ieee754_sqrt+0x154>
 800780a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800780e:	07ce      	lsls	r6, r1, #31
 8007810:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007814:	bf5e      	ittt	pl
 8007816:	0fda      	lsrpl	r2, r3, #31
 8007818:	005b      	lslpl	r3, r3, #1
 800781a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800781e:	0fda      	lsrs	r2, r3, #31
 8007820:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007824:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007828:	2000      	movs	r0, #0
 800782a:	106d      	asrs	r5, r5, #1
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	f04f 0e16 	mov.w	lr, #22
 8007832:	4684      	mov	ip, r0
 8007834:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007838:	eb0c 0401 	add.w	r4, ip, r1
 800783c:	4294      	cmp	r4, r2
 800783e:	bfde      	ittt	le
 8007840:	1b12      	suble	r2, r2, r4
 8007842:	eb04 0c01 	addle.w	ip, r4, r1
 8007846:	1840      	addle	r0, r0, r1
 8007848:	0052      	lsls	r2, r2, #1
 800784a:	f1be 0e01 	subs.w	lr, lr, #1
 800784e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007852:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007856:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800785a:	d1ed      	bne.n	8007838 <__ieee754_sqrt+0x94>
 800785c:	4671      	mov	r1, lr
 800785e:	2720      	movs	r7, #32
 8007860:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007864:	4562      	cmp	r2, ip
 8007866:	eb04 060e 	add.w	r6, r4, lr
 800786a:	dc02      	bgt.n	8007872 <__ieee754_sqrt+0xce>
 800786c:	d113      	bne.n	8007896 <__ieee754_sqrt+0xf2>
 800786e:	429e      	cmp	r6, r3
 8007870:	d811      	bhi.n	8007896 <__ieee754_sqrt+0xf2>
 8007872:	2e00      	cmp	r6, #0
 8007874:	eb06 0e04 	add.w	lr, r6, r4
 8007878:	da43      	bge.n	8007902 <__ieee754_sqrt+0x15e>
 800787a:	f1be 0f00 	cmp.w	lr, #0
 800787e:	db40      	blt.n	8007902 <__ieee754_sqrt+0x15e>
 8007880:	f10c 0801 	add.w	r8, ip, #1
 8007884:	eba2 020c 	sub.w	r2, r2, ip
 8007888:	429e      	cmp	r6, r3
 800788a:	bf88      	it	hi
 800788c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	4421      	add	r1, r4
 8007894:	46c4      	mov	ip, r8
 8007896:	0052      	lsls	r2, r2, #1
 8007898:	3f01      	subs	r7, #1
 800789a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800789e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80078a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078a6:	d1dd      	bne.n	8007864 <__ieee754_sqrt+0xc0>
 80078a8:	4313      	orrs	r3, r2
 80078aa:	d006      	beq.n	80078ba <__ieee754_sqrt+0x116>
 80078ac:	1c4c      	adds	r4, r1, #1
 80078ae:	bf13      	iteet	ne
 80078b0:	3101      	addne	r1, #1
 80078b2:	3001      	addeq	r0, #1
 80078b4:	4639      	moveq	r1, r7
 80078b6:	f021 0101 	bicne.w	r1, r1, #1
 80078ba:	1043      	asrs	r3, r0, #1
 80078bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80078c0:	0849      	lsrs	r1, r1, #1
 80078c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078c6:	07c2      	lsls	r2, r0, #31
 80078c8:	bf48      	it	mi
 80078ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80078ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80078d2:	460c      	mov	r4, r1
 80078d4:	463d      	mov	r5, r7
 80078d6:	e77f      	b.n	80077d8 <__ieee754_sqrt+0x34>
 80078d8:	0ada      	lsrs	r2, r3, #11
 80078da:	3815      	subs	r0, #21
 80078dc:	055b      	lsls	r3, r3, #21
 80078de:	2a00      	cmp	r2, #0
 80078e0:	d0fa      	beq.n	80078d8 <__ieee754_sqrt+0x134>
 80078e2:	02d7      	lsls	r7, r2, #11
 80078e4:	d50a      	bpl.n	80078fc <__ieee754_sqrt+0x158>
 80078e6:	f1c1 0420 	rsb	r4, r1, #32
 80078ea:	fa23 f404 	lsr.w	r4, r3, r4
 80078ee:	1e4d      	subs	r5, r1, #1
 80078f0:	408b      	lsls	r3, r1
 80078f2:	4322      	orrs	r2, r4
 80078f4:	1b41      	subs	r1, r0, r5
 80078f6:	e788      	b.n	800780a <__ieee754_sqrt+0x66>
 80078f8:	4608      	mov	r0, r1
 80078fa:	e7f0      	b.n	80078de <__ieee754_sqrt+0x13a>
 80078fc:	0052      	lsls	r2, r2, #1
 80078fe:	3101      	adds	r1, #1
 8007900:	e7ef      	b.n	80078e2 <__ieee754_sqrt+0x13e>
 8007902:	46e0      	mov	r8, ip
 8007904:	e7be      	b.n	8007884 <__ieee754_sqrt+0xe0>
 8007906:	bf00      	nop
 8007908:	7ff00000 	.word	0x7ff00000

0800790c <fabs>:
 800790c:	ec51 0b10 	vmov	r0, r1, d0
 8007910:	ee10 2a10 	vmov	r2, s0
 8007914:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007918:	ec43 2b10 	vmov	d0, r2, r3
 800791c:	4770      	bx	lr

0800791e <finite>:
 800791e:	b082      	sub	sp, #8
 8007920:	ed8d 0b00 	vstr	d0, [sp]
 8007924:	9801      	ldr	r0, [sp, #4]
 8007926:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800792a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800792e:	0fc0      	lsrs	r0, r0, #31
 8007930:	b002      	add	sp, #8
 8007932:	4770      	bx	lr
 8007934:	0000      	movs	r0, r0
	...

08007938 <nan>:
 8007938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007940 <nan+0x8>
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	00000000 	.word	0x00000000
 8007944:	7ff80000 	.word	0x7ff80000

08007948 <rint>:
 8007948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800794a:	ec51 0b10 	vmov	r0, r1, d0
 800794e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007952:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007956:	2e13      	cmp	r6, #19
 8007958:	ee10 4a10 	vmov	r4, s0
 800795c:	460b      	mov	r3, r1
 800795e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007962:	dc58      	bgt.n	8007a16 <rint+0xce>
 8007964:	2e00      	cmp	r6, #0
 8007966:	da2b      	bge.n	80079c0 <rint+0x78>
 8007968:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800796c:	4302      	orrs	r2, r0
 800796e:	d023      	beq.n	80079b8 <rint+0x70>
 8007970:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007974:	4302      	orrs	r2, r0
 8007976:	4254      	negs	r4, r2
 8007978:	4314      	orrs	r4, r2
 800797a:	0c4b      	lsrs	r3, r1, #17
 800797c:	0b24      	lsrs	r4, r4, #12
 800797e:	045b      	lsls	r3, r3, #17
 8007980:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007984:	ea44 0103 	orr.w	r1, r4, r3
 8007988:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <rint+0x10c>)
 800798a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800798e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f8 fc6f 	bl	800027c <__adddf3>
 800799e:	e9cd 0100 	strd	r0, r1, [sp]
 80079a2:	463b      	mov	r3, r7
 80079a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a8:	4632      	mov	r2, r6
 80079aa:	f7f8 fc65 	bl	8000278 <__aeabi_dsub>
 80079ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80079b6:	4639      	mov	r1, r7
 80079b8:	ec41 0b10 	vmov	d0, r0, r1
 80079bc:	b003      	add	sp, #12
 80079be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c0:	4a25      	ldr	r2, [pc, #148]	; (8007a58 <rint+0x110>)
 80079c2:	4132      	asrs	r2, r6
 80079c4:	ea01 0702 	and.w	r7, r1, r2
 80079c8:	4307      	orrs	r7, r0
 80079ca:	d0f5      	beq.n	80079b8 <rint+0x70>
 80079cc:	0851      	lsrs	r1, r2, #1
 80079ce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80079d2:	4314      	orrs	r4, r2
 80079d4:	d00c      	beq.n	80079f0 <rint+0xa8>
 80079d6:	ea23 0201 	bic.w	r2, r3, r1
 80079da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80079de:	2e13      	cmp	r6, #19
 80079e0:	fa43 f606 	asr.w	r6, r3, r6
 80079e4:	bf0c      	ite	eq
 80079e6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80079ea:	2400      	movne	r4, #0
 80079ec:	ea42 0306 	orr.w	r3, r2, r6
 80079f0:	4918      	ldr	r1, [pc, #96]	; (8007a54 <rint+0x10c>)
 80079f2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80079f6:	4622      	mov	r2, r4
 80079f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fc3c 	bl	800027c <__adddf3>
 8007a04:	e9cd 0100 	strd	r0, r1, [sp]
 8007a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	462b      	mov	r3, r5
 8007a10:	f7f8 fc32 	bl	8000278 <__aeabi_dsub>
 8007a14:	e7d0      	b.n	80079b8 <rint+0x70>
 8007a16:	2e33      	cmp	r6, #51	; 0x33
 8007a18:	dd07      	ble.n	8007a2a <rint+0xe2>
 8007a1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007a1e:	d1cb      	bne.n	80079b8 <rint+0x70>
 8007a20:	ee10 2a10 	vmov	r2, s0
 8007a24:	f7f8 fc2a 	bl	800027c <__adddf3>
 8007a28:	e7c6      	b.n	80079b8 <rint+0x70>
 8007a2a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007a2e:	f04f 36ff 	mov.w	r6, #4294967295
 8007a32:	40d6      	lsrs	r6, r2
 8007a34:	4230      	tst	r0, r6
 8007a36:	d0bf      	beq.n	80079b8 <rint+0x70>
 8007a38:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007a3c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007a40:	bf1f      	itttt	ne
 8007a42:	ea24 0101 	bicne.w	r1, r4, r1
 8007a46:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007a4a:	fa44 f202 	asrne.w	r2, r4, r2
 8007a4e:	ea41 0402 	orrne.w	r4, r1, r2
 8007a52:	e7cd      	b.n	80079f0 <rint+0xa8>
 8007a54:	08007d00 	.word	0x08007d00
 8007a58:	000fffff 	.word	0x000fffff
 8007a5c:	00000000 	.word	0x00000000

08007a60 <scalbn>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	ec55 4b10 	vmov	r4, r5, d0
 8007a66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	b99a      	cbnz	r2, 8007a98 <scalbn+0x38>
 8007a70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a74:	4323      	orrs	r3, r4
 8007a76:	d036      	beq.n	8007ae6 <scalbn+0x86>
 8007a78:	4b39      	ldr	r3, [pc, #228]	; (8007b60 <scalbn+0x100>)
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	ee10 0a10 	vmov	r0, s0
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7f8 fdb1 	bl	80005e8 <__aeabi_dmul>
 8007a86:	4b37      	ldr	r3, [pc, #220]	; (8007b64 <scalbn+0x104>)
 8007a88:	429e      	cmp	r6, r3
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	da10      	bge.n	8007ab2 <scalbn+0x52>
 8007a90:	a32b      	add	r3, pc, #172	; (adr r3, 8007b40 <scalbn+0xe0>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	e03a      	b.n	8007b0e <scalbn+0xae>
 8007a98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007a9c:	428a      	cmp	r2, r1
 8007a9e:	d10c      	bne.n	8007aba <scalbn+0x5a>
 8007aa0:	ee10 2a10 	vmov	r2, s0
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fbe8 	bl	800027c <__adddf3>
 8007aac:	4604      	mov	r4, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	e019      	b.n	8007ae6 <scalbn+0x86>
 8007ab2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	3a36      	subs	r2, #54	; 0x36
 8007aba:	4432      	add	r2, r6
 8007abc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ac0:	428a      	cmp	r2, r1
 8007ac2:	dd08      	ble.n	8007ad6 <scalbn+0x76>
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	a120      	add	r1, pc, #128	; (adr r1, 8007b48 <scalbn+0xe8>)
 8007ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007acc:	da1c      	bge.n	8007b08 <scalbn+0xa8>
 8007ace:	a120      	add	r1, pc, #128	; (adr r1, 8007b50 <scalbn+0xf0>)
 8007ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ad4:	e018      	b.n	8007b08 <scalbn+0xa8>
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	dd08      	ble.n	8007aec <scalbn+0x8c>
 8007ada:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ade:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ae2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ae6:	ec45 4b10 	vmov	d0, r4, r5
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007af0:	da19      	bge.n	8007b26 <scalbn+0xc6>
 8007af2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007af6:	429e      	cmp	r6, r3
 8007af8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007afc:	dd0a      	ble.n	8007b14 <scalbn+0xb4>
 8007afe:	a112      	add	r1, pc, #72	; (adr r1, 8007b48 <scalbn+0xe8>)
 8007b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e2      	bne.n	8007ace <scalbn+0x6e>
 8007b08:	a30f      	add	r3, pc, #60	; (adr r3, 8007b48 <scalbn+0xe8>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fd6b 	bl	80005e8 <__aeabi_dmul>
 8007b12:	e7cb      	b.n	8007aac <scalbn+0x4c>
 8007b14:	a10a      	add	r1, pc, #40	; (adr r1, 8007b40 <scalbn+0xe0>)
 8007b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0b8      	beq.n	8007a90 <scalbn+0x30>
 8007b1e:	a10e      	add	r1, pc, #56	; (adr r1, 8007b58 <scalbn+0xf8>)
 8007b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b24:	e7b4      	b.n	8007a90 <scalbn+0x30>
 8007b26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b2a:	3236      	adds	r2, #54	; 0x36
 8007b2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007b34:	4620      	mov	r0, r4
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <scalbn+0x108>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	e7e8      	b.n	8007b0e <scalbn+0xae>
 8007b3c:	f3af 8000 	nop.w
 8007b40:	c2f8f359 	.word	0xc2f8f359
 8007b44:	01a56e1f 	.word	0x01a56e1f
 8007b48:	8800759c 	.word	0x8800759c
 8007b4c:	7e37e43c 	.word	0x7e37e43c
 8007b50:	8800759c 	.word	0x8800759c
 8007b54:	fe37e43c 	.word	0xfe37e43c
 8007b58:	c2f8f359 	.word	0xc2f8f359
 8007b5c:	81a56e1f 	.word	0x81a56e1f
 8007b60:	43500000 	.word	0x43500000
 8007b64:	ffff3cb0 	.word	0xffff3cb0
 8007b68:	3c900000 	.word	0x3c900000

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr
