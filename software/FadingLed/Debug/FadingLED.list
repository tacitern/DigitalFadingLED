
FadingLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800ad40  0800ad40  0001ad40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b060  0800b060  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b068  0800b068  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000078  0800b0e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  0800b0e8  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bdd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e8  00000000  00000000  00036c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015349  00000000  00000000  0003c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c41  00000000  00000000  00051559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e231  00000000  00000000  0006819a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e63cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  000e6420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ad28 	.word	0x0800ad28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800ad28 	.word	0x0800ad28

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fe63 	bl	8001f10 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fdad 	bl	8001db4 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fe55 	bl	8001f10 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fe4b 	bl	8001f10 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fdcf 	bl	8001e2c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fdc5 	bl	8001e2c <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_uldivmod>:
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d111      	bne.n	80002d8 <__aeabi_uldivmod+0x28>
 80002b4:	2a00      	cmp	r2, #0
 80002b6:	d10f      	bne.n	80002d8 <__aeabi_uldivmod+0x28>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d100      	bne.n	80002be <__aeabi_uldivmod+0xe>
 80002bc:	2800      	cmp	r0, #0
 80002be:	d002      	beq.n	80002c6 <__aeabi_uldivmod+0x16>
 80002c0:	2100      	movs	r1, #0
 80002c2:	43c9      	mvns	r1, r1
 80002c4:	1c08      	adds	r0, r1, #0
 80002c6:	b407      	push	{r0, r1, r2}
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__aeabi_uldivmod+0x24>)
 80002ca:	a102      	add	r1, pc, #8	; (adr r1, 80002d4 <__aeabi_uldivmod+0x24>)
 80002cc:	1840      	adds	r0, r0, r1
 80002ce:	9002      	str	r0, [sp, #8]
 80002d0:	bd03      	pop	{r0, r1, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	ffffff5d 	.word	0xffffff5d
 80002d8:	b403      	push	{r0, r1}
 80002da:	4668      	mov	r0, sp
 80002dc:	b501      	push	{r0, lr}
 80002de:	9802      	ldr	r0, [sp, #8]
 80002e0:	f000 f864 	bl	80003ac <__udivmoddi4>
 80002e4:	9b01      	ldr	r3, [sp, #4]
 80002e6:	469e      	mov	lr, r3
 80002e8:	b002      	add	sp, #8
 80002ea:	bc0c      	pop	{r2, r3}
 80002ec:	4770      	bx	lr
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_lmul>:
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f2:	0415      	lsls	r5, r2, #16
 80002f4:	0c2d      	lsrs	r5, r5, #16
 80002f6:	000f      	movs	r7, r1
 80002f8:	0001      	movs	r1, r0
 80002fa:	002e      	movs	r6, r5
 80002fc:	46c6      	mov	lr, r8
 80002fe:	4684      	mov	ip, r0
 8000300:	0400      	lsls	r0, r0, #16
 8000302:	0c14      	lsrs	r4, r2, #16
 8000304:	0c00      	lsrs	r0, r0, #16
 8000306:	0c09      	lsrs	r1, r1, #16
 8000308:	4346      	muls	r6, r0
 800030a:	434d      	muls	r5, r1
 800030c:	4360      	muls	r0, r4
 800030e:	4361      	muls	r1, r4
 8000310:	1940      	adds	r0, r0, r5
 8000312:	0c34      	lsrs	r4, r6, #16
 8000314:	1824      	adds	r4, r4, r0
 8000316:	b500      	push	{lr}
 8000318:	42a5      	cmp	r5, r4
 800031a:	d903      	bls.n	8000324 <__aeabi_lmul+0x34>
 800031c:	2080      	movs	r0, #128	; 0x80
 800031e:	0240      	lsls	r0, r0, #9
 8000320:	4680      	mov	r8, r0
 8000322:	4441      	add	r1, r8
 8000324:	0c25      	lsrs	r5, r4, #16
 8000326:	186d      	adds	r5, r5, r1
 8000328:	4661      	mov	r1, ip
 800032a:	4359      	muls	r1, r3
 800032c:	437a      	muls	r2, r7
 800032e:	0430      	lsls	r0, r6, #16
 8000330:	1949      	adds	r1, r1, r5
 8000332:	0424      	lsls	r4, r4, #16
 8000334:	0c00      	lsrs	r0, r0, #16
 8000336:	1820      	adds	r0, r4, r0
 8000338:	1889      	adds	r1, r1, r2
 800033a:	bc80      	pop	{r7}
 800033c:	46b8      	mov	r8, r7
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000340 <__aeabi_f2uiz>:
 8000340:	219e      	movs	r1, #158	; 0x9e
 8000342:	b510      	push	{r4, lr}
 8000344:	05c9      	lsls	r1, r1, #23
 8000346:	1c04      	adds	r4, r0, #0
 8000348:	f002 fd04 	bl	8002d54 <__aeabi_fcmpge>
 800034c:	2800      	cmp	r0, #0
 800034e:	d103      	bne.n	8000358 <__aeabi_f2uiz+0x18>
 8000350:	1c20      	adds	r0, r4, #0
 8000352:	f000 fe81 	bl	8001058 <__aeabi_f2iz>
 8000356:	bd10      	pop	{r4, pc}
 8000358:	219e      	movs	r1, #158	; 0x9e
 800035a:	1c20      	adds	r0, r4, #0
 800035c:	05c9      	lsls	r1, r1, #23
 800035e:	f000 fcb3 	bl	8000cc8 <__aeabi_fsub>
 8000362:	f000 fe79 	bl	8001058 <__aeabi_f2iz>
 8000366:	2380      	movs	r3, #128	; 0x80
 8000368:	061b      	lsls	r3, r3, #24
 800036a:	469c      	mov	ip, r3
 800036c:	4460      	add	r0, ip
 800036e:	e7f2      	b.n	8000356 <__aeabi_f2uiz+0x16>

08000370 <__aeabi_d2uiz>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	2200      	movs	r2, #0
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <__aeabi_d2uiz+0x38>)
 8000376:	0004      	movs	r4, r0
 8000378:	000d      	movs	r5, r1
 800037a:	f7ff ff8f 	bl	800029c <__aeabi_dcmpge>
 800037e:	2800      	cmp	r0, #0
 8000380:	d104      	bne.n	800038c <__aeabi_d2uiz+0x1c>
 8000382:	0020      	movs	r0, r4
 8000384:	0029      	movs	r1, r5
 8000386:	f002 fc4f 	bl	8002c28 <__aeabi_d2iz>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <__aeabi_d2uiz+0x38>)
 800038e:	2200      	movs	r2, #0
 8000390:	0020      	movs	r0, r4
 8000392:	0029      	movs	r1, r5
 8000394:	f002 f898 	bl	80024c8 <__aeabi_dsub>
 8000398:	f002 fc46 	bl	8002c28 <__aeabi_d2iz>
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	061b      	lsls	r3, r3, #24
 80003a0:	469c      	mov	ip, r3
 80003a2:	4460      	add	r0, ip
 80003a4:	e7f1      	b.n	800038a <__aeabi_d2uiz+0x1a>
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	41e00000 	.word	0x41e00000

080003ac <__udivmoddi4>:
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ae:	4657      	mov	r7, sl
 80003b0:	464e      	mov	r6, r9
 80003b2:	4645      	mov	r5, r8
 80003b4:	46de      	mov	lr, fp
 80003b6:	b5e0      	push	{r5, r6, r7, lr}
 80003b8:	0004      	movs	r4, r0
 80003ba:	000d      	movs	r5, r1
 80003bc:	4692      	mov	sl, r2
 80003be:	4699      	mov	r9, r3
 80003c0:	b083      	sub	sp, #12
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d830      	bhi.n	8000428 <__udivmoddi4+0x7c>
 80003c6:	d02d      	beq.n	8000424 <__udivmoddi4+0x78>
 80003c8:	4649      	mov	r1, r9
 80003ca:	4650      	mov	r0, sl
 80003cc:	f002 fcea 	bl	8002da4 <__clzdi2>
 80003d0:	0029      	movs	r1, r5
 80003d2:	0006      	movs	r6, r0
 80003d4:	0020      	movs	r0, r4
 80003d6:	f002 fce5 	bl	8002da4 <__clzdi2>
 80003da:	1a33      	subs	r3, r6, r0
 80003dc:	4698      	mov	r8, r3
 80003de:	3b20      	subs	r3, #32
 80003e0:	469b      	mov	fp, r3
 80003e2:	d433      	bmi.n	800044c <__udivmoddi4+0xa0>
 80003e4:	465a      	mov	r2, fp
 80003e6:	4653      	mov	r3, sl
 80003e8:	4093      	lsls	r3, r2
 80003ea:	4642      	mov	r2, r8
 80003ec:	001f      	movs	r7, r3
 80003ee:	4653      	mov	r3, sl
 80003f0:	4093      	lsls	r3, r2
 80003f2:	001e      	movs	r6, r3
 80003f4:	42af      	cmp	r7, r5
 80003f6:	d83a      	bhi.n	800046e <__udivmoddi4+0xc2>
 80003f8:	42af      	cmp	r7, r5
 80003fa:	d100      	bne.n	80003fe <__udivmoddi4+0x52>
 80003fc:	e078      	b.n	80004f0 <__udivmoddi4+0x144>
 80003fe:	465b      	mov	r3, fp
 8000400:	1ba4      	subs	r4, r4, r6
 8000402:	41bd      	sbcs	r5, r7
 8000404:	2b00      	cmp	r3, #0
 8000406:	da00      	bge.n	800040a <__udivmoddi4+0x5e>
 8000408:	e075      	b.n	80004f6 <__udivmoddi4+0x14a>
 800040a:	2200      	movs	r2, #0
 800040c:	2300      	movs	r3, #0
 800040e:	9200      	str	r2, [sp, #0]
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2301      	movs	r3, #1
 8000414:	465a      	mov	r2, fp
 8000416:	4093      	lsls	r3, r2
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2301      	movs	r3, #1
 800041c:	4642      	mov	r2, r8
 800041e:	4093      	lsls	r3, r2
 8000420:	9300      	str	r3, [sp, #0]
 8000422:	e028      	b.n	8000476 <__udivmoddi4+0xca>
 8000424:	4282      	cmp	r2, r0
 8000426:	d9cf      	bls.n	80003c8 <__udivmoddi4+0x1c>
 8000428:	2200      	movs	r2, #0
 800042a:	2300      	movs	r3, #0
 800042c:	9200      	str	r2, [sp, #0]
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <__udivmoddi4+0x8e>
 8000436:	601c      	str	r4, [r3, #0]
 8000438:	605d      	str	r5, [r3, #4]
 800043a:	9800      	ldr	r0, [sp, #0]
 800043c:	9901      	ldr	r1, [sp, #4]
 800043e:	b003      	add	sp, #12
 8000440:	bcf0      	pop	{r4, r5, r6, r7}
 8000442:	46bb      	mov	fp, r7
 8000444:	46b2      	mov	sl, r6
 8000446:	46a9      	mov	r9, r5
 8000448:	46a0      	mov	r8, r4
 800044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044c:	4642      	mov	r2, r8
 800044e:	2320      	movs	r3, #32
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	4652      	mov	r2, sl
 8000454:	40da      	lsrs	r2, r3
 8000456:	4641      	mov	r1, r8
 8000458:	0013      	movs	r3, r2
 800045a:	464a      	mov	r2, r9
 800045c:	408a      	lsls	r2, r1
 800045e:	0017      	movs	r7, r2
 8000460:	4642      	mov	r2, r8
 8000462:	431f      	orrs	r7, r3
 8000464:	4653      	mov	r3, sl
 8000466:	4093      	lsls	r3, r2
 8000468:	001e      	movs	r6, r3
 800046a:	42af      	cmp	r7, r5
 800046c:	d9c4      	bls.n	80003f8 <__udivmoddi4+0x4c>
 800046e:	2200      	movs	r2, #0
 8000470:	2300      	movs	r3, #0
 8000472:	9200      	str	r2, [sp, #0]
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	4643      	mov	r3, r8
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0d9      	beq.n	8000430 <__udivmoddi4+0x84>
 800047c:	07fb      	lsls	r3, r7, #31
 800047e:	0872      	lsrs	r2, r6, #1
 8000480:	431a      	orrs	r2, r3
 8000482:	4646      	mov	r6, r8
 8000484:	087b      	lsrs	r3, r7, #1
 8000486:	e00e      	b.n	80004a6 <__udivmoddi4+0xfa>
 8000488:	42ab      	cmp	r3, r5
 800048a:	d101      	bne.n	8000490 <__udivmoddi4+0xe4>
 800048c:	42a2      	cmp	r2, r4
 800048e:	d80c      	bhi.n	80004aa <__udivmoddi4+0xfe>
 8000490:	1aa4      	subs	r4, r4, r2
 8000492:	419d      	sbcs	r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	1924      	adds	r4, r4, r4
 8000498:	416d      	adcs	r5, r5
 800049a:	2100      	movs	r1, #0
 800049c:	3e01      	subs	r6, #1
 800049e:	1824      	adds	r4, r4, r0
 80004a0:	414d      	adcs	r5, r1
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d006      	beq.n	80004b4 <__udivmoddi4+0x108>
 80004a6:	42ab      	cmp	r3, r5
 80004a8:	d9ee      	bls.n	8000488 <__udivmoddi4+0xdc>
 80004aa:	3e01      	subs	r6, #1
 80004ac:	1924      	adds	r4, r4, r4
 80004ae:	416d      	adcs	r5, r5
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d1f8      	bne.n	80004a6 <__udivmoddi4+0xfa>
 80004b4:	9800      	ldr	r0, [sp, #0]
 80004b6:	9901      	ldr	r1, [sp, #4]
 80004b8:	465b      	mov	r3, fp
 80004ba:	1900      	adds	r0, r0, r4
 80004bc:	4169      	adcs	r1, r5
 80004be:	2b00      	cmp	r3, #0
 80004c0:	db24      	blt.n	800050c <__udivmoddi4+0x160>
 80004c2:	002b      	movs	r3, r5
 80004c4:	465a      	mov	r2, fp
 80004c6:	4644      	mov	r4, r8
 80004c8:	40d3      	lsrs	r3, r2
 80004ca:	002a      	movs	r2, r5
 80004cc:	40e2      	lsrs	r2, r4
 80004ce:	001c      	movs	r4, r3
 80004d0:	465b      	mov	r3, fp
 80004d2:	0015      	movs	r5, r2
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	db2a      	blt.n	800052e <__udivmoddi4+0x182>
 80004d8:	0026      	movs	r6, r4
 80004da:	409e      	lsls	r6, r3
 80004dc:	0033      	movs	r3, r6
 80004de:	0026      	movs	r6, r4
 80004e0:	4647      	mov	r7, r8
 80004e2:	40be      	lsls	r6, r7
 80004e4:	0032      	movs	r2, r6
 80004e6:	1a80      	subs	r0, r0, r2
 80004e8:	4199      	sbcs	r1, r3
 80004ea:	9000      	str	r0, [sp, #0]
 80004ec:	9101      	str	r1, [sp, #4]
 80004ee:	e79f      	b.n	8000430 <__udivmoddi4+0x84>
 80004f0:	42a3      	cmp	r3, r4
 80004f2:	d8bc      	bhi.n	800046e <__udivmoddi4+0xc2>
 80004f4:	e783      	b.n	80003fe <__udivmoddi4+0x52>
 80004f6:	4642      	mov	r2, r8
 80004f8:	2320      	movs	r3, #32
 80004fa:	2100      	movs	r1, #0
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	2200      	movs	r2, #0
 8000500:	9100      	str	r1, [sp, #0]
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	40da      	lsrs	r2, r3
 8000508:	9201      	str	r2, [sp, #4]
 800050a:	e786      	b.n	800041a <__udivmoddi4+0x6e>
 800050c:	4642      	mov	r2, r8
 800050e:	2320      	movs	r3, #32
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	002a      	movs	r2, r5
 8000514:	4646      	mov	r6, r8
 8000516:	409a      	lsls	r2, r3
 8000518:	0023      	movs	r3, r4
 800051a:	40f3      	lsrs	r3, r6
 800051c:	4644      	mov	r4, r8
 800051e:	4313      	orrs	r3, r2
 8000520:	002a      	movs	r2, r5
 8000522:	40e2      	lsrs	r2, r4
 8000524:	001c      	movs	r4, r3
 8000526:	465b      	mov	r3, fp
 8000528:	0015      	movs	r5, r2
 800052a:	2b00      	cmp	r3, #0
 800052c:	dad4      	bge.n	80004d8 <__udivmoddi4+0x12c>
 800052e:	4642      	mov	r2, r8
 8000530:	002f      	movs	r7, r5
 8000532:	2320      	movs	r3, #32
 8000534:	0026      	movs	r6, r4
 8000536:	4097      	lsls	r7, r2
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	40de      	lsrs	r6, r3
 800053c:	003b      	movs	r3, r7
 800053e:	4333      	orrs	r3, r6
 8000540:	e7cd      	b.n	80004de <__udivmoddi4+0x132>
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_fadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4646      	mov	r6, r8
 8000548:	46d6      	mov	lr, sl
 800054a:	464f      	mov	r7, r9
 800054c:	024d      	lsls	r5, r1, #9
 800054e:	0242      	lsls	r2, r0, #9
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	0a52      	lsrs	r2, r2, #9
 8000554:	0a6e      	lsrs	r6, r5, #9
 8000556:	0047      	lsls	r7, r0, #1
 8000558:	46b0      	mov	r8, r6
 800055a:	0e3f      	lsrs	r7, r7, #24
 800055c:	004e      	lsls	r6, r1, #1
 800055e:	0fc4      	lsrs	r4, r0, #31
 8000560:	00d0      	lsls	r0, r2, #3
 8000562:	4694      	mov	ip, r2
 8000564:	003b      	movs	r3, r7
 8000566:	4682      	mov	sl, r0
 8000568:	0e36      	lsrs	r6, r6, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09ad      	lsrs	r5, r5, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d06d      	beq.n	800064e <__aeabi_fadd+0x10a>
 8000572:	1bb8      	subs	r0, r7, r6
 8000574:	4681      	mov	r9, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	dd4d      	ble.n	8000616 <__aeabi_fadd+0xd2>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x3c>
 800057e:	e088      	b.n	8000692 <__aeabi_fadd+0x14e>
 8000580:	2fff      	cmp	r7, #255	; 0xff
 8000582:	d05a      	beq.n	800063a <__aeabi_fadd+0xf6>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	04db      	lsls	r3, r3, #19
 8000588:	431d      	orrs	r5, r3
 800058a:	464b      	mov	r3, r9
 800058c:	2201      	movs	r2, #1
 800058e:	2b1b      	cmp	r3, #27
 8000590:	dc0a      	bgt.n	80005a8 <__aeabi_fadd+0x64>
 8000592:	002b      	movs	r3, r5
 8000594:	464a      	mov	r2, r9
 8000596:	4649      	mov	r1, r9
 8000598:	40d3      	lsrs	r3, r2
 800059a:	2220      	movs	r2, #32
 800059c:	1a52      	subs	r2, r2, r1
 800059e:	4095      	lsls	r5, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	1e55      	subs	r5, r2, #1
 80005a4:	41aa      	sbcs	r2, r5
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4653      	mov	r3, sl
 80005aa:	1a9a      	subs	r2, r3, r2
 80005ac:	0153      	lsls	r3, r2, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0x6e>
 80005b0:	e0b9      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	0996      	lsrs	r6, r2, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f002 fbd6 	bl	8002d68 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4287      	cmp	r7, r0
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x82>
 80005c4:	e0d4      	b.n	8000770 <__aeabi_fadd+0x22c>
 80005c6:	0033      	movs	r3, r6
 80005c8:	1bc7      	subs	r7, r0, r7
 80005ca:	2020      	movs	r0, #32
 80005cc:	3701      	adds	r7, #1
 80005ce:	40fb      	lsrs	r3, r7
 80005d0:	1bc7      	subs	r7, r0, r7
 80005d2:	40be      	lsls	r6, r7
 80005d4:	0032      	movs	r2, r6
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	41b2      	sbcs	r2, r6
 80005da:	2700      	movs	r7, #0
 80005dc:	431a      	orrs	r2, r3
 80005de:	0753      	lsls	r3, r2, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005ea:	3204      	adds	r2, #4
 80005ec:	0153      	lsls	r3, r2, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0xae>
 80005f0:	e09c      	b.n	800072c <__aeabi_fadd+0x1e8>
 80005f2:	1c7b      	adds	r3, r7, #1
 80005f4:	2ffe      	cmp	r7, #254	; 0xfe
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xb6>
 80005f8:	e09a      	b.n	8000730 <__aeabi_fadd+0x1ec>
 80005fa:	0192      	lsls	r2, r2, #6
 80005fc:	0a52      	lsrs	r2, r2, #9
 80005fe:	4694      	mov	ip, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	05d8      	lsls	r0, r3, #23
 8000604:	4663      	mov	r3, ip
 8000606:	07e4      	lsls	r4, r4, #31
 8000608:	4318      	orrs	r0, r3
 800060a:	4320      	orrs	r0, r4
 800060c:	bce0      	pop	{r5, r6, r7}
 800060e:	46ba      	mov	sl, r7
 8000610:	46b1      	mov	r9, r6
 8000612:	46a8      	mov	r8, r5
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	2800      	cmp	r0, #0
 8000618:	d049      	beq.n	80006ae <__aeabi_fadd+0x16a>
 800061a:	1bf3      	subs	r3, r6, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0xde>
 8000620:	e0b6      	b.n	8000790 <__aeabi_fadd+0x24c>
 8000622:	4652      	mov	r2, sl
 8000624:	2a00      	cmp	r2, #0
 8000626:	d060      	beq.n	80006ea <__aeabi_fadd+0x1a6>
 8000628:	3b01      	subs	r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0xec>
 800062e:	e0fc      	b.n	800082a <__aeabi_fadd+0x2e6>
 8000630:	2eff      	cmp	r6, #255	; 0xff
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xf2>
 8000634:	e0b4      	b.n	80007a0 <__aeabi_fadd+0x25c>
 8000636:	000c      	movs	r4, r1
 8000638:	4642      	mov	r2, r8
 800063a:	2a00      	cmp	r2, #0
 800063c:	d078      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4310      	orrs	r0, r2
 8000644:	0242      	lsls	r2, r0, #9
 8000646:	0a53      	lsrs	r3, r2, #9
 8000648:	469c      	mov	ip, r3
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	e7d9      	b.n	8000602 <__aeabi_fadd+0xbe>
 800064e:	1bb9      	subs	r1, r7, r6
 8000650:	2900      	cmp	r1, #0
 8000652:	dd71      	ble.n	8000738 <__aeabi_fadd+0x1f4>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d03f      	beq.n	80006d8 <__aeabi_fadd+0x194>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d0ee      	beq.n	800063a <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	2201      	movs	r2, #1
 8000664:	291b      	cmp	r1, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x134>
 8000668:	002a      	movs	r2, r5
 800066a:	2320      	movs	r3, #32
 800066c:	40ca      	lsrs	r2, r1
 800066e:	1a59      	subs	r1, r3, r1
 8000670:	408d      	lsls	r5, r1
 8000672:	1e6b      	subs	r3, r5, #1
 8000674:	419d      	sbcs	r5, r3
 8000676:	432a      	orrs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	0153      	lsls	r3, r2, #5
 800067c:	d553      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 800067e:	3701      	adds	r7, #1
 8000680:	2fff      	cmp	r7, #255	; 0xff
 8000682:	d055      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 8000684:	2301      	movs	r3, #1
 8000686:	497b      	ldr	r1, [pc, #492]	; (8000874 <__aeabi_fadd+0x330>)
 8000688:	4013      	ands	r3, r2
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	400a      	ands	r2, r1
 800068e:	431a      	orrs	r2, r3
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0x9a>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d02c      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	469c      	mov	ip, r3
 800069c:	44e1      	add	r9, ip
 800069e:	464b      	mov	r3, r9
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x162>
 80006a4:	e0ad      	b.n	8000802 <__aeabi_fadd+0x2be>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x168>
 80006aa:	e76e      	b.n	800058a <__aeabi_fadd+0x46>
 80006ac:	e7c5      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ae:	20fe      	movs	r0, #254	; 0xfe
 80006b0:	1c7e      	adds	r6, r7, #1
 80006b2:	4230      	tst	r0, r6
 80006b4:	d160      	bne.n	8000778 <__aeabi_fadd+0x234>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x178>
 80006ba:	e093      	b.n	80007e4 <__aeabi_fadd+0x2a0>
 80006bc:	4652      	mov	r2, sl
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x180>
 80006c2:	e0b6      	b.n	8000832 <__aeabi_fadd+0x2ee>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d09c      	beq.n	8000602 <__aeabi_fadd+0xbe>
 80006c8:	1b52      	subs	r2, r2, r5
 80006ca:	0150      	lsls	r0, r2, #5
 80006cc:	d400      	bmi.n	80006d0 <__aeabi_fadd+0x18c>
 80006ce:	e0c3      	b.n	8000858 <__aeabi_fadd+0x314>
 80006d0:	4653      	mov	r3, sl
 80006d2:	000c      	movs	r4, r1
 80006d4:	1aea      	subs	r2, r5, r3
 80006d6:	e782      	b.n	80005de <__aeabi_fadd+0x9a>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d009      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 80006dc:	3901      	subs	r1, #1
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x1a0>
 80006e2:	e08b      	b.n	80007fc <__aeabi_fadd+0x2b8>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d1bc      	bne.n	8000662 <__aeabi_fadd+0x11e>
 80006e8:	e7a7      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	0037      	movs	r7, r6
 80006f0:	2fff      	cmp	r7, #255	; 0xff
 80006f2:	d0a2      	beq.n	800063a <__aeabi_fadd+0xf6>
 80006f4:	0252      	lsls	r2, r2, #9
 80006f6:	0a53      	lsrs	r3, r2, #9
 80006f8:	469c      	mov	ip, r3
 80006fa:	b2fb      	uxtb	r3, r7
 80006fc:	e781      	b.n	8000602 <__aeabi_fadd+0xbe>
 80006fe:	21fe      	movs	r1, #254	; 0xfe
 8000700:	3701      	adds	r7, #1
 8000702:	4239      	tst	r1, r7
 8000704:	d165      	bne.n	80007d2 <__aeabi_fadd+0x28e>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d17e      	bne.n	8000808 <__aeabi_fadd+0x2c4>
 800070a:	2800      	cmp	r0, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e0aa      	b.n	8000866 <__aeabi_fadd+0x322>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x1d2>
 8000714:	e775      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000716:	002a      	movs	r2, r5
 8000718:	4452      	add	r2, sl
 800071a:	2700      	movs	r7, #0
 800071c:	0153      	lsls	r3, r2, #5
 800071e:	d502      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <__aeabi_fadd+0x334>)
 8000722:	3701      	adds	r7, #1
 8000724:	401a      	ands	r2, r3
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x1e8>
 800072a:	e75a      	b.n	80005e2 <__aeabi_fadd+0x9e>
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	e7df      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 8000730:	2200      	movs	r2, #0
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	4694      	mov	ip, r2
 8000736:	e764      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000738:	2900      	cmp	r1, #0
 800073a:	d0e0      	beq.n	80006fe <__aeabi_fadd+0x1ba>
 800073c:	1bf3      	subs	r3, r6, r7
 800073e:	2f00      	cmp	r7, #0
 8000740:	d03e      	beq.n	80007c0 <__aeabi_fadd+0x27c>
 8000742:	2eff      	cmp	r6, #255	; 0xff
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x204>
 8000746:	e777      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0001      	movs	r1, r0
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4311      	orrs	r1, r2
 8000750:	468a      	mov	sl, r1
 8000752:	2201      	movs	r2, #1
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fadd+0x226>
 8000758:	4652      	mov	r2, sl
 800075a:	2120      	movs	r1, #32
 800075c:	4650      	mov	r0, sl
 800075e:	40da      	lsrs	r2, r3
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	1e43      	subs	r3, r0, #1
 8000766:	4198      	sbcs	r0, r3
 8000768:	4302      	orrs	r2, r0
 800076a:	0037      	movs	r7, r6
 800076c:	1952      	adds	r2, r2, r5
 800076e:	e784      	b.n	800067a <__aeabi_fadd+0x136>
 8000770:	4a41      	ldr	r2, [pc, #260]	; (8000878 <__aeabi_fadd+0x334>)
 8000772:	1a3f      	subs	r7, r7, r0
 8000774:	4032      	ands	r2, r6
 8000776:	e732      	b.n	80005de <__aeabi_fadd+0x9a>
 8000778:	4653      	mov	r3, sl
 800077a:	1b5e      	subs	r6, r3, r5
 800077c:	0173      	lsls	r3, r6, #5
 800077e:	d42d      	bmi.n	80007dc <__aeabi_fadd+0x298>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x242>
 8000784:	e717      	b.n	80005b6 <__aeabi_fadd+0x72>
 8000786:	2200      	movs	r2, #0
 8000788:	2400      	movs	r4, #0
 800078a:	2300      	movs	r3, #0
 800078c:	4694      	mov	ip, r2
 800078e:	e738      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000790:	2eff      	cmp	r6, #255	; 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x252>
 8000794:	e74f      	b.n	8000636 <__aeabi_fadd+0xf2>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4650      	mov	r0, sl
 800079a:	04d2      	lsls	r2, r2, #19
 800079c:	4310      	orrs	r0, r2
 800079e:	4682      	mov	sl, r0
 80007a0:	2201      	movs	r2, #1
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc08      	bgt.n	80007b8 <__aeabi_fadd+0x274>
 80007a6:	4652      	mov	r2, sl
 80007a8:	2420      	movs	r4, #32
 80007aa:	4650      	mov	r0, sl
 80007ac:	40da      	lsrs	r2, r3
 80007ae:	1ae3      	subs	r3, r4, r3
 80007b0:	4098      	lsls	r0, r3
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4302      	orrs	r2, r0
 80007b8:	000c      	movs	r4, r1
 80007ba:	0037      	movs	r7, r6
 80007bc:	1aaa      	subs	r2, r5, r2
 80007be:	e6f5      	b.n	80005ac <__aeabi_fadd+0x68>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d093      	beq.n	80006ec <__aeabi_fadd+0x1a8>
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d04f      	beq.n	800086a <__aeabi_fadd+0x326>
 80007ca:	2eff      	cmp	r6, #255	; 0xff
 80007cc:	d1c1      	bne.n	8000752 <__aeabi_fadd+0x20e>
 80007ce:	4642      	mov	r2, r8
 80007d0:	e733      	b.n	800063a <__aeabi_fadd+0xf6>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d0ac      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 80007d6:	4455      	add	r5, sl
 80007d8:	086a      	lsrs	r2, r5, #1
 80007da:	e7a4      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80007dc:	4653      	mov	r3, sl
 80007de:	000c      	movs	r4, r1
 80007e0:	1aee      	subs	r6, r5, r3
 80007e2:	e6e8      	b.n	80005b6 <__aeabi_fadd+0x72>
 80007e4:	4653      	mov	r3, sl
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d128      	bne.n	800083c <__aeabi_fadd+0x2f8>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x2ac>
 80007ee:	e722      	b.n	8000636 <__aeabi_fadd+0xf2>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	469c      	mov	ip, r3
 80007f6:	2400      	movs	r4, #0
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	e702      	b.n	8000602 <__aeabi_fadd+0xbe>
 80007fc:	002a      	movs	r2, r5
 80007fe:	4452      	add	r2, sl
 8000800:	e73b      	b.n	800067a <__aeabi_fadd+0x136>
 8000802:	4653      	mov	r3, sl
 8000804:	1b5a      	subs	r2, r3, r5
 8000806:	e6d1      	b.n	80005ac <__aeabi_fadd+0x68>
 8000808:	2800      	cmp	r0, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x2ca>
 800080c:	e714      	b.n	8000638 <__aeabi_fadd+0xf4>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x2d0>
 8000812:	e712      	b.n	800063a <__aeabi_fadd+0xf6>
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	421a      	tst	r2, r3
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2da>
 800081c:	e70d      	b.n	800063a <__aeabi_fadd+0xf6>
 800081e:	4641      	mov	r1, r8
 8000820:	4219      	tst	r1, r3
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x2e2>
 8000824:	e709      	b.n	800063a <__aeabi_fadd+0xf6>
 8000826:	4642      	mov	r2, r8
 8000828:	e707      	b.n	800063a <__aeabi_fadd+0xf6>
 800082a:	000c      	movs	r4, r1
 800082c:	0037      	movs	r7, r6
 800082e:	1aaa      	subs	r2, r5, r2
 8000830:	e6bc      	b.n	80005ac <__aeabi_fadd+0x68>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d013      	beq.n	800085e <__aeabi_fadd+0x31a>
 8000836:	000c      	movs	r4, r1
 8000838:	46c4      	mov	ip, r8
 800083a:	e6e2      	b.n	8000602 <__aeabi_fadd+0xbe>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2fe>
 8000840:	e6fb      	b.n	800063a <__aeabi_fadd+0xf6>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	03db      	lsls	r3, r3, #15
 8000846:	421a      	tst	r2, r3
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x308>
 800084a:	e6f6      	b.n	800063a <__aeabi_fadd+0xf6>
 800084c:	4640      	mov	r0, r8
 800084e:	4218      	tst	r0, r3
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000852:	e6f2      	b.n	800063a <__aeabi_fadd+0xf6>
 8000854:	000c      	movs	r4, r1
 8000856:	e6ef      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x31a>
 800085c:	e763      	b.n	8000726 <__aeabi_fadd+0x1e2>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	4694      	mov	ip, r2
 8000864:	e6cd      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000866:	46c4      	mov	ip, r8
 8000868:	e6cb      	b.n	8000602 <__aeabi_fadd+0xbe>
 800086a:	002a      	movs	r2, r5
 800086c:	0037      	movs	r7, r6
 800086e:	4452      	add	r2, sl
 8000870:	e703      	b.n	800067a <__aeabi_fadd+0x136>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_fdiv>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0047      	lsls	r7, r0, #1
 800088a:	1c0c      	adds	r4, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	0fc6      	lsrs	r6, r0, #31
 8000892:	2f00      	cmp	r7, #0
 8000894:	d066      	beq.n	8000964 <__aeabi_fdiv+0xe8>
 8000896:	2fff      	cmp	r7, #255	; 0xff
 8000898:	d06c      	beq.n	8000974 <__aeabi_fdiv+0xf8>
 800089a:	2300      	movs	r3, #0
 800089c:	00ea      	lsls	r2, r5, #3
 800089e:	2580      	movs	r5, #128	; 0x80
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	04ed      	lsls	r5, r5, #19
 80008a6:	4315      	orrs	r5, r2
 80008a8:	3f7f      	subs	r7, #127	; 0x7f
 80008aa:	0260      	lsls	r0, r4, #9
 80008ac:	0061      	lsls	r1, r4, #1
 80008ae:	0a43      	lsrs	r3, r0, #9
 80008b0:	4698      	mov	r8, r3
 80008b2:	0e09      	lsrs	r1, r1, #24
 80008b4:	0fe4      	lsrs	r4, r4, #31
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d048      	beq.n	800094c <__aeabi_fdiv+0xd0>
 80008ba:	29ff      	cmp	r1, #255	; 0xff
 80008bc:	d010      	beq.n	80008e0 <__aeabi_fdiv+0x64>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	00d8      	lsls	r0, r3, #3
 80008c2:	04d2      	lsls	r2, r2, #19
 80008c4:	4302      	orrs	r2, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	2000      	movs	r0, #0
 80008ca:	397f      	subs	r1, #127	; 0x7f
 80008cc:	464a      	mov	r2, r9
 80008ce:	0033      	movs	r3, r6
 80008d0:	1a7f      	subs	r7, r7, r1
 80008d2:	4302      	orrs	r2, r0
 80008d4:	496c      	ldr	r1, [pc, #432]	; (8000a88 <__aeabi_fdiv+0x20c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	588a      	ldr	r2, [r1, r2]
 80008da:	4063      	eors	r3, r4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4697      	mov	pc, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16d      	bne.n	80009c0 <__aeabi_fdiv+0x144>
 80008e4:	2002      	movs	r0, #2
 80008e6:	3fff      	subs	r7, #255	; 0xff
 80008e8:	e033      	b.n	8000952 <__aeabi_fdiv+0xd6>
 80008ea:	2300      	movs	r3, #0
 80008ec:	4698      	mov	r8, r3
 80008ee:	0026      	movs	r6, r4
 80008f0:	4645      	mov	r5, r8
 80008f2:	4682      	mov	sl, r0
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x80>
 80008fa:	e07f      	b.n	80009fc <__aeabi_fdiv+0x180>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x86>
 8000900:	e094      	b.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d017      	beq.n	8000936 <__aeabi_fdiv+0xba>
 8000906:	0038      	movs	r0, r7
 8000908:	307f      	adds	r0, #127	; 0x7f
 800090a:	2800      	cmp	r0, #0
 800090c:	dd5f      	ble.n	80009ce <__aeabi_fdiv+0x152>
 800090e:	076b      	lsls	r3, r5, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0xa0>
 8000912:	230f      	movs	r3, #15
 8000914:	402b      	ands	r3, r5
 8000916:	2b04      	cmp	r3, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0xa0>
 800091a:	3504      	adds	r5, #4
 800091c:	012b      	lsls	r3, r5, #4
 800091e:	d503      	bpl.n	8000928 <__aeabi_fdiv+0xac>
 8000920:	0038      	movs	r0, r7
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <__aeabi_fdiv+0x210>)
 8000924:	3080      	adds	r0, #128	; 0x80
 8000926:	401d      	ands	r5, r3
 8000928:	28fe      	cmp	r0, #254	; 0xfe
 800092a:	dc67      	bgt.n	80009fc <__aeabi_fdiv+0x180>
 800092c:	01ad      	lsls	r5, r5, #6
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	e002      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000934:	001e      	movs	r6, r3
 8000936:	2000      	movs	r0, #0
 8000938:	2500      	movs	r5, #0
 800093a:	05c0      	lsls	r0, r0, #23
 800093c:	4328      	orrs	r0, r5
 800093e:	07f6      	lsls	r6, r6, #31
 8000940:	4330      	orrs	r0, r6
 8000942:	bce0      	pop	{r5, r6, r7}
 8000944:	46ba      	mov	sl, r7
 8000946:	46b1      	mov	r9, r6
 8000948:	46a8      	mov	r8, r5
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12b      	bne.n	80009a8 <__aeabi_fdiv+0x12c>
 8000950:	2001      	movs	r0, #1
 8000952:	464a      	mov	r2, r9
 8000954:	0033      	movs	r3, r6
 8000956:	494e      	ldr	r1, [pc, #312]	; (8000a90 <__aeabi_fdiv+0x214>)
 8000958:	4302      	orrs	r2, r0
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	588a      	ldr	r2, [r1, r2]
 800095e:	4063      	eors	r3, r4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4697      	mov	pc, r2
 8000964:	2d00      	cmp	r5, #0
 8000966:	d113      	bne.n	8000990 <__aeabi_fdiv+0x114>
 8000968:	2304      	movs	r3, #4
 800096a:	4699      	mov	r9, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2700      	movs	r7, #0
 8000970:	469a      	mov	sl, r3
 8000972:	e79a      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000974:	2d00      	cmp	r5, #0
 8000976:	d105      	bne.n	8000984 <__aeabi_fdiv+0x108>
 8000978:	2308      	movs	r3, #8
 800097a:	4699      	mov	r9, r3
 800097c:	3b06      	subs	r3, #6
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000984:	230c      	movs	r3, #12
 8000986:	4699      	mov	r9, r3
 8000988:	3b09      	subs	r3, #9
 800098a:	27ff      	movs	r7, #255	; 0xff
 800098c:	469a      	mov	sl, r3
 800098e:	e78c      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000990:	0028      	movs	r0, r5
 8000992:	f002 f9e9 	bl	8002d68 <__clzsi2>
 8000996:	2776      	movs	r7, #118	; 0x76
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409d      	lsls	r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	427f      	negs	r7, r7
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	1a3f      	subs	r7, r7, r0
 80009a6:	e780      	b.n	80008aa <__aeabi_fdiv+0x2e>
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 f9dd 	bl	8002d68 <__clzsi2>
 80009ae:	4642      	mov	r2, r8
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	2176      	movs	r1, #118	; 0x76
 80009b4:	409a      	lsls	r2, r3
 80009b6:	4249      	negs	r1, r1
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	4690      	mov	r8, r2
 80009bc:	2000      	movs	r0, #0
 80009be:	e785      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	2003      	movs	r0, #3
 80009c4:	e782      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c6:	001e      	movs	r6, r3
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	2500      	movs	r5, #0
 80009cc:	e7b5      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009ce:	2301      	movs	r3, #1
 80009d0:	1a1b      	subs	r3, r3, r0
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dcaf      	bgt.n	8000936 <__aeabi_fdiv+0xba>
 80009d6:	379e      	adds	r7, #158	; 0x9e
 80009d8:	0029      	movs	r1, r5
 80009da:	40bd      	lsls	r5, r7
 80009dc:	40d9      	lsrs	r1, r3
 80009de:	1e6a      	subs	r2, r5, #1
 80009e0:	4195      	sbcs	r5, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	076b      	lsls	r3, r5, #29
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009e8:	230f      	movs	r3, #15
 80009ea:	402b      	ands	r3, r5
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009f0:	3504      	adds	r5, #4
 80009f2:	016b      	lsls	r3, r5, #5
 80009f4:	d544      	bpl.n	8000a80 <__aeabi_fdiv+0x204>
 80009f6:	2001      	movs	r0, #1
 80009f8:	2500      	movs	r5, #0
 80009fa:	e79e      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	2500      	movs	r5, #0
 8000a00:	e79b      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a02:	2580      	movs	r5, #128	; 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	03ed      	lsls	r5, r5, #15
 8000a0a:	e796      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4698      	mov	r8, r3
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	03c0      	lsls	r0, r0, #15
 8000a14:	4205      	tst	r5, r0
 8000a16:	d009      	beq.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	4203      	tst	r3, r0
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4305      	orrs	r5, r0
 8000a22:	026d      	lsls	r5, r5, #9
 8000a24:	0026      	movs	r6, r4
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e786      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	03c0      	lsls	r0, r0, #15
 8000a30:	4305      	orrs	r5, r0
 8000a32:	026d      	lsls	r5, r5, #9
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a6d      	lsrs	r5, r5, #9
 8000a38:	e77f      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	016a      	lsls	r2, r5, #5
 8000a3e:	0148      	lsls	r0, r1, #5
 8000a40:	4282      	cmp	r2, r0
 8000a42:	d219      	bcs.n	8000a78 <__aeabi_fdiv+0x1fc>
 8000a44:	211b      	movs	r1, #27
 8000a46:	2500      	movs	r5, #0
 8000a48:	3f01      	subs	r7, #1
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0014      	movs	r4, r2
 8000a4e:	006d      	lsls	r5, r5, #1
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fdiv+0x1de>
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d801      	bhi.n	8000a5e <__aeabi_fdiv+0x1e2>
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	4335      	orrs	r5, r6
 8000a5e:	3901      	subs	r1, #1
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d1f3      	bne.n	8000a4c <__aeabi_fdiv+0x1d0>
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	0038      	movs	r0, r7
 8000a6a:	307f      	adds	r0, #127	; 0x7f
 8000a6c:	001e      	movs	r6, r3
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	2800      	cmp	r0, #0
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_fdiv+0x1fa>
 8000a74:	e74b      	b.n	800090e <__aeabi_fdiv+0x92>
 8000a76:	e7aa      	b.n	80009ce <__aeabi_fdiv+0x152>
 8000a78:	211a      	movs	r1, #26
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	1a12      	subs	r2, r2, r0
 8000a7e:	e7e4      	b.n	8000a4a <__aeabi_fdiv+0x1ce>
 8000a80:	01ad      	lsls	r5, r5, #6
 8000a82:	2000      	movs	r0, #0
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	e758      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a88:	0800ae3c 	.word	0x0800ae3c
 8000a8c:	f7ffffff 	.word	0xf7ffffff
 8000a90:	0800ae7c 	.word	0x0800ae7c

08000a94 <__aeabi_fmul>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	4657      	mov	r7, sl
 8000a98:	464e      	mov	r6, r9
 8000a9a:	4645      	mov	r5, r8
 8000a9c:	46de      	mov	lr, fp
 8000a9e:	0244      	lsls	r4, r0, #9
 8000aa0:	b5e0      	push	{r5, r6, r7, lr}
 8000aa2:	0045      	lsls	r5, r0, #1
 8000aa4:	1c0f      	adds	r7, r1, #0
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	0e2d      	lsrs	r5, r5, #24
 8000aaa:	0fc6      	lsrs	r6, r0, #31
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d047      	beq.n	8000b40 <__aeabi_fmul+0xac>
 8000ab0:	2dff      	cmp	r5, #255	; 0xff
 8000ab2:	d04d      	beq.n	8000b50 <__aeabi_fmul+0xbc>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2080      	movs	r0, #128	; 0x80
 8000ab8:	469a      	mov	sl, r3
 8000aba:	469b      	mov	fp, r3
 8000abc:	00e4      	lsls	r4, r4, #3
 8000abe:	04c0      	lsls	r0, r0, #19
 8000ac0:	4304      	orrs	r4, r0
 8000ac2:	3d7f      	subs	r5, #127	; 0x7f
 8000ac4:	0278      	lsls	r0, r7, #9
 8000ac6:	0a43      	lsrs	r3, r0, #9
 8000ac8:	4699      	mov	r9, r3
 8000aca:	007a      	lsls	r2, r7, #1
 8000acc:	0ffb      	lsrs	r3, r7, #31
 8000ace:	4698      	mov	r8, r3
 8000ad0:	0e12      	lsrs	r2, r2, #24
 8000ad2:	464b      	mov	r3, r9
 8000ad4:	d044      	beq.n	8000b60 <__aeabi_fmul+0xcc>
 8000ad6:	2aff      	cmp	r2, #255	; 0xff
 8000ad8:	d011      	beq.n	8000afe <__aeabi_fmul+0x6a>
 8000ada:	00d8      	lsls	r0, r3, #3
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	04db      	lsls	r3, r3, #19
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	3a7f      	subs	r2, #127	; 0x7f
 8000ae8:	18ad      	adds	r5, r5, r2
 8000aea:	4647      	mov	r7, r8
 8000aec:	4653      	mov	r3, sl
 8000aee:	4077      	eors	r7, r6
 8000af0:	1c69      	adds	r1, r5, #1
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d83f      	bhi.n	8000b76 <__aeabi_fmul+0xe2>
 8000af6:	4a72      	ldr	r2, [pc, #456]	; (8000cc0 <__aeabi_fmul+0x22c>)
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	58d3      	ldr	r3, [r2, r3]
 8000afc:	469f      	mov	pc, r3
 8000afe:	35ff      	adds	r5, #255	; 0xff
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fmul+0x72>
 8000b04:	e079      	b.n	8000bfa <__aeabi_fmul+0x166>
 8000b06:	4652      	mov	r2, sl
 8000b08:	2302      	movs	r3, #2
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	4692      	mov	sl, r2
 8000b0e:	2002      	movs	r0, #2
 8000b10:	e7eb      	b.n	8000aea <__aeabi_fmul+0x56>
 8000b12:	4647      	mov	r7, r8
 8000b14:	464c      	mov	r4, r9
 8000b16:	4683      	mov	fp, r0
 8000b18:	465b      	mov	r3, fp
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d028      	beq.n	8000b70 <__aeabi_fmul+0xdc>
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fmul+0x90>
 8000b22:	e0c6      	b.n	8000cb2 <__aeabi_fmul+0x21e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d14f      	bne.n	8000bc8 <__aeabi_fmul+0x134>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	05c0      	lsls	r0, r0, #23
 8000b2e:	07ff      	lsls	r7, r7, #31
 8000b30:	4320      	orrs	r0, r4
 8000b32:	4338      	orrs	r0, r7
 8000b34:	bcf0      	pop	{r4, r5, r6, r7}
 8000b36:	46bb      	mov	fp, r7
 8000b38:	46b2      	mov	sl, r6
 8000b3a:	46a9      	mov	r9, r5
 8000b3c:	46a0      	mov	r8, r4
 8000b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d171      	bne.n	8000c28 <__aeabi_fmul+0x194>
 8000b44:	2304      	movs	r3, #4
 8000b46:	469a      	mov	sl, r3
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	e7b9      	b.n	8000ac4 <__aeabi_fmul+0x30>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d163      	bne.n	8000c1c <__aeabi_fmul+0x188>
 8000b54:	2308      	movs	r3, #8
 8000b56:	469a      	mov	sl, r3
 8000b58:	3b06      	subs	r3, #6
 8000b5a:	25ff      	movs	r5, #255	; 0xff
 8000b5c:	469b      	mov	fp, r3
 8000b5e:	e7b1      	b.n	8000ac4 <__aeabi_fmul+0x30>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d150      	bne.n	8000c06 <__aeabi_fmul+0x172>
 8000b64:	4652      	mov	r2, sl
 8000b66:	3301      	adds	r3, #1
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	4692      	mov	sl, r2
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	e7bc      	b.n	8000aea <__aeabi_fmul+0x56>
 8000b70:	20ff      	movs	r0, #255	; 0xff
 8000b72:	2400      	movs	r4, #0
 8000b74:	e7da      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000b76:	4648      	mov	r0, r9
 8000b78:	0c26      	lsrs	r6, r4, #16
 8000b7a:	0424      	lsls	r4, r4, #16
 8000b7c:	0c22      	lsrs	r2, r4, #16
 8000b7e:	0404      	lsls	r4, r0, #16
 8000b80:	0c24      	lsrs	r4, r4, #16
 8000b82:	464b      	mov	r3, r9
 8000b84:	0020      	movs	r0, r4
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	4350      	muls	r0, r2
 8000b8a:	4374      	muls	r4, r6
 8000b8c:	435a      	muls	r2, r3
 8000b8e:	435e      	muls	r6, r3
 8000b90:	1912      	adds	r2, r2, r4
 8000b92:	0c03      	lsrs	r3, r0, #16
 8000b94:	189b      	adds	r3, r3, r2
 8000b96:	429c      	cmp	r4, r3
 8000b98:	d903      	bls.n	8000ba2 <__aeabi_fmul+0x10e>
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0252      	lsls	r2, r2, #9
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	4466      	add	r6, ip
 8000ba2:	0400      	lsls	r0, r0, #16
 8000ba4:	041a      	lsls	r2, r3, #16
 8000ba6:	0c00      	lsrs	r0, r0, #16
 8000ba8:	1812      	adds	r2, r2, r0
 8000baa:	0194      	lsls	r4, r2, #6
 8000bac:	1e60      	subs	r0, r4, #1
 8000bae:	4184      	sbcs	r4, r0
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	0e92      	lsrs	r2, r2, #26
 8000bb4:	199b      	adds	r3, r3, r6
 8000bb6:	4314      	orrs	r4, r2
 8000bb8:	019b      	lsls	r3, r3, #6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	d572      	bpl.n	8000ca6 <__aeabi_fmul+0x212>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	0863      	lsrs	r3, r4, #1
 8000bc4:	4004      	ands	r4, r0
 8000bc6:	431c      	orrs	r4, r3
 8000bc8:	0008      	movs	r0, r1
 8000bca:	307f      	adds	r0, #127	; 0x7f
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	dd3c      	ble.n	8000c4a <__aeabi_fmul+0x1b6>
 8000bd0:	0763      	lsls	r3, r4, #29
 8000bd2:	d004      	beq.n	8000bde <__aeabi_fmul+0x14a>
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	4023      	ands	r3, r4
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d000      	beq.n	8000bde <__aeabi_fmul+0x14a>
 8000bdc:	3404      	adds	r4, #4
 8000bde:	0123      	lsls	r3, r4, #4
 8000be0:	d503      	bpl.n	8000bea <__aeabi_fmul+0x156>
 8000be2:	3180      	adds	r1, #128	; 0x80
 8000be4:	0008      	movs	r0, r1
 8000be6:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <__aeabi_fmul+0x230>)
 8000be8:	401c      	ands	r4, r3
 8000bea:	28fe      	cmp	r0, #254	; 0xfe
 8000bec:	dcc0      	bgt.n	8000b70 <__aeabi_fmul+0xdc>
 8000bee:	01a4      	lsls	r4, r4, #6
 8000bf0:	0a64      	lsrs	r4, r4, #9
 8000bf2:	b2c0      	uxtb	r0, r0
 8000bf4:	e79a      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000bf6:	0037      	movs	r7, r6
 8000bf8:	e78e      	b.n	8000b18 <__aeabi_fmul+0x84>
 8000bfa:	4652      	mov	r2, sl
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	4692      	mov	sl, r2
 8000c02:	2003      	movs	r0, #3
 8000c04:	e771      	b.n	8000aea <__aeabi_fmul+0x56>
 8000c06:	4648      	mov	r0, r9
 8000c08:	f002 f8ae 	bl	8002d68 <__clzsi2>
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	1f43      	subs	r3, r0, #5
 8000c10:	409a      	lsls	r2, r3
 8000c12:	1a2d      	subs	r5, r5, r0
 8000c14:	4691      	mov	r9, r2
 8000c16:	2000      	movs	r0, #0
 8000c18:	3d76      	subs	r5, #118	; 0x76
 8000c1a:	e766      	b.n	8000aea <__aeabi_fmul+0x56>
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3b09      	subs	r3, #9
 8000c22:	25ff      	movs	r5, #255	; 0xff
 8000c24:	469b      	mov	fp, r3
 8000c26:	e74d      	b.n	8000ac4 <__aeabi_fmul+0x30>
 8000c28:	0020      	movs	r0, r4
 8000c2a:	f002 f89d 	bl	8002d68 <__clzsi2>
 8000c2e:	2576      	movs	r5, #118	; 0x76
 8000c30:	1f43      	subs	r3, r0, #5
 8000c32:	409c      	lsls	r4, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	426d      	negs	r5, r5
 8000c38:	469a      	mov	sl, r3
 8000c3a:	469b      	mov	fp, r3
 8000c3c:	1a2d      	subs	r5, r5, r0
 8000c3e:	e741      	b.n	8000ac4 <__aeabi_fmul+0x30>
 8000c40:	2480      	movs	r4, #128	; 0x80
 8000c42:	2700      	movs	r7, #0
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	03e4      	lsls	r4, r4, #15
 8000c48:	e770      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2b1b      	cmp	r3, #27
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_fmul+0x1c0>
 8000c52:	e769      	b.n	8000b28 <__aeabi_fmul+0x94>
 8000c54:	319e      	adds	r1, #158	; 0x9e
 8000c56:	0020      	movs	r0, r4
 8000c58:	408c      	lsls	r4, r1
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	1e63      	subs	r3, r4, #1
 8000c5e:	419c      	sbcs	r4, r3
 8000c60:	4304      	orrs	r4, r0
 8000c62:	0763      	lsls	r3, r4, #29
 8000c64:	d004      	beq.n	8000c70 <__aeabi_fmul+0x1dc>
 8000c66:	230f      	movs	r3, #15
 8000c68:	4023      	ands	r3, r4
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_fmul+0x1dc>
 8000c6e:	3404      	adds	r4, #4
 8000c70:	0163      	lsls	r3, r4, #5
 8000c72:	d51a      	bpl.n	8000caa <__aeabi_fmul+0x216>
 8000c74:	2001      	movs	r0, #1
 8000c76:	2400      	movs	r4, #0
 8000c78:	e758      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000c7a:	2080      	movs	r0, #128	; 0x80
 8000c7c:	03c0      	lsls	r0, r0, #15
 8000c7e:	4204      	tst	r4, r0
 8000c80:	d009      	beq.n	8000c96 <__aeabi_fmul+0x202>
 8000c82:	464b      	mov	r3, r9
 8000c84:	4203      	tst	r3, r0
 8000c86:	d106      	bne.n	8000c96 <__aeabi_fmul+0x202>
 8000c88:	464c      	mov	r4, r9
 8000c8a:	4304      	orrs	r4, r0
 8000c8c:	0264      	lsls	r4, r4, #9
 8000c8e:	4647      	mov	r7, r8
 8000c90:	20ff      	movs	r0, #255	; 0xff
 8000c92:	0a64      	lsrs	r4, r4, #9
 8000c94:	e74a      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000c96:	2080      	movs	r0, #128	; 0x80
 8000c98:	03c0      	lsls	r0, r0, #15
 8000c9a:	4304      	orrs	r4, r0
 8000c9c:	0264      	lsls	r4, r4, #9
 8000c9e:	0037      	movs	r7, r6
 8000ca0:	20ff      	movs	r0, #255	; 0xff
 8000ca2:	0a64      	lsrs	r4, r4, #9
 8000ca4:	e742      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000ca6:	0029      	movs	r1, r5
 8000ca8:	e78e      	b.n	8000bc8 <__aeabi_fmul+0x134>
 8000caa:	01a4      	lsls	r4, r4, #6
 8000cac:	2000      	movs	r0, #0
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	e73c      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000cb2:	2080      	movs	r0, #128	; 0x80
 8000cb4:	03c0      	lsls	r0, r0, #15
 8000cb6:	4304      	orrs	r4, r0
 8000cb8:	0264      	lsls	r4, r4, #9
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	0a64      	lsrs	r4, r4, #9
 8000cbe:	e735      	b.n	8000b2c <__aeabi_fmul+0x98>
 8000cc0:	0800aebc 	.word	0x0800aebc
 8000cc4:	f7ffffff 	.word	0xf7ffffff

08000cc8 <__aeabi_fsub>:
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	4646      	mov	r6, r8
 8000ccc:	46d6      	mov	lr, sl
 8000cce:	464f      	mov	r7, r9
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	00da      	lsls	r2, r3, #3
 8000cd6:	4694      	mov	ip, r2
 8000cd8:	024a      	lsls	r2, r1, #9
 8000cda:	b5c0      	push	{r6, r7, lr}
 8000cdc:	0044      	lsls	r4, r0, #1
 8000cde:	0a56      	lsrs	r6, r2, #9
 8000ce0:	1c05      	adds	r5, r0, #0
 8000ce2:	46b0      	mov	r8, r6
 8000ce4:	0e24      	lsrs	r4, r4, #24
 8000ce6:	004e      	lsls	r6, r1, #1
 8000ce8:	0992      	lsrs	r2, r2, #6
 8000cea:	001f      	movs	r7, r3
 8000cec:	0020      	movs	r0, r4
 8000cee:	4692      	mov	sl, r2
 8000cf0:	0fed      	lsrs	r5, r5, #31
 8000cf2:	0e36      	lsrs	r6, r6, #24
 8000cf4:	0fc9      	lsrs	r1, r1, #31
 8000cf6:	2eff      	cmp	r6, #255	; 0xff
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fsub+0x34>
 8000cfa:	e07f      	b.n	8000dfc <__aeabi_fsub+0x134>
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4051      	eors	r1, r2
 8000d00:	428d      	cmp	r5, r1
 8000d02:	d051      	beq.n	8000da8 <__aeabi_fsub+0xe0>
 8000d04:	1ba2      	subs	r2, r4, r6
 8000d06:	4691      	mov	r9, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	dc00      	bgt.n	8000d0e <__aeabi_fsub+0x46>
 8000d0c:	e07e      	b.n	8000e0c <__aeabi_fsub+0x144>
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fsub+0x4c>
 8000d12:	e099      	b.n	8000e48 <__aeabi_fsub+0x180>
 8000d14:	2cff      	cmp	r4, #255	; 0xff
 8000d16:	d100      	bne.n	8000d1a <__aeabi_fsub+0x52>
 8000d18:	e08c      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	4652      	mov	r2, sl
 8000d1e:	04db      	lsls	r3, r3, #19
 8000d20:	431a      	orrs	r2, r3
 8000d22:	4692      	mov	sl, r2
 8000d24:	464a      	mov	r2, r9
 8000d26:	2301      	movs	r3, #1
 8000d28:	2a1b      	cmp	r2, #27
 8000d2a:	dc08      	bgt.n	8000d3e <__aeabi_fsub+0x76>
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	2120      	movs	r1, #32
 8000d30:	40d3      	lsrs	r3, r2
 8000d32:	1a89      	subs	r1, r1, r2
 8000d34:	4652      	mov	r2, sl
 8000d36:	408a      	lsls	r2, r1
 8000d38:	1e51      	subs	r1, r2, #1
 8000d3a:	418a      	sbcs	r2, r1
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4662      	mov	r2, ip
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	015a      	lsls	r2, r3, #5
 8000d44:	d400      	bmi.n	8000d48 <__aeabi_fsub+0x80>
 8000d46:	e0f3      	b.n	8000f30 <__aeabi_fsub+0x268>
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	099e      	lsrs	r6, r3, #6
 8000d4c:	0030      	movs	r0, r6
 8000d4e:	f002 f80b 	bl	8002d68 <__clzsi2>
 8000d52:	3805      	subs	r0, #5
 8000d54:	4086      	lsls	r6, r0
 8000d56:	4284      	cmp	r4, r0
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fsub+0x94>
 8000d5a:	e0f7      	b.n	8000f4c <__aeabi_fsub+0x284>
 8000d5c:	0032      	movs	r2, r6
 8000d5e:	1b04      	subs	r4, r0, r4
 8000d60:	2020      	movs	r0, #32
 8000d62:	3401      	adds	r4, #1
 8000d64:	40e2      	lsrs	r2, r4
 8000d66:	1b04      	subs	r4, r0, r4
 8000d68:	40a6      	lsls	r6, r4
 8000d6a:	0033      	movs	r3, r6
 8000d6c:	1e5e      	subs	r6, r3, #1
 8000d6e:	41b3      	sbcs	r3, r6
 8000d70:	2400      	movs	r4, #0
 8000d72:	4313      	orrs	r3, r2
 8000d74:	075a      	lsls	r2, r3, #29
 8000d76:	d004      	beq.n	8000d82 <__aeabi_fsub+0xba>
 8000d78:	220f      	movs	r2, #15
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	2a04      	cmp	r2, #4
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fsub+0xba>
 8000d80:	3304      	adds	r3, #4
 8000d82:	015a      	lsls	r2, r3, #5
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_fsub+0xc0>
 8000d86:	e0d6      	b.n	8000f36 <__aeabi_fsub+0x26e>
 8000d88:	1c62      	adds	r2, r4, #1
 8000d8a:	2cfe      	cmp	r4, #254	; 0xfe
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0xc8>
 8000d8e:	e0da      	b.n	8000f46 <__aeabi_fsub+0x27e>
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	0a5f      	lsrs	r7, r3, #9
 8000d94:	b2d0      	uxtb	r0, r2
 8000d96:	05c0      	lsls	r0, r0, #23
 8000d98:	4338      	orrs	r0, r7
 8000d9a:	07ed      	lsls	r5, r5, #31
 8000d9c:	4328      	orrs	r0, r5
 8000d9e:	bce0      	pop	{r5, r6, r7}
 8000da0:	46ba      	mov	sl, r7
 8000da2:	46b1      	mov	r9, r6
 8000da4:	46a8      	mov	r8, r5
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da8:	1ba2      	subs	r2, r4, r6
 8000daa:	4691      	mov	r9, r2
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	dd63      	ble.n	8000e78 <__aeabi_fsub+0x1b0>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_fsub+0xee>
 8000db4:	e099      	b.n	8000eea <__aeabi_fsub+0x222>
 8000db6:	2cff      	cmp	r4, #255	; 0xff
 8000db8:	d03c      	beq.n	8000e34 <__aeabi_fsub+0x16c>
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	04db      	lsls	r3, r3, #19
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	4692      	mov	sl, r2
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2a1b      	cmp	r2, #27
 8000dca:	dc08      	bgt.n	8000dde <__aeabi_fsub+0x116>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	2120      	movs	r1, #32
 8000dd0:	40d3      	lsrs	r3, r2
 8000dd2:	1a89      	subs	r1, r1, r2
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	408a      	lsls	r2, r1
 8000dd8:	1e51      	subs	r1, r2, #1
 8000dda:	418a      	sbcs	r2, r1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	015a      	lsls	r2, r3, #5
 8000de2:	d400      	bmi.n	8000de6 <__aeabi_fsub+0x11e>
 8000de4:	e0a4      	b.n	8000f30 <__aeabi_fsub+0x268>
 8000de6:	3401      	adds	r4, #1
 8000de8:	2cff      	cmp	r4, #255	; 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x126>
 8000dec:	e0ab      	b.n	8000f46 <__aeabi_fsub+0x27e>
 8000dee:	2201      	movs	r2, #1
 8000df0:	4997      	ldr	r1, [pc, #604]	; (8001050 <__aeabi_fsub+0x388>)
 8000df2:	401a      	ands	r2, r3
 8000df4:	085b      	lsrs	r3, r3, #1
 8000df6:	400b      	ands	r3, r1
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	e7bb      	b.n	8000d74 <__aeabi_fsub+0xac>
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d032      	beq.n	8000e66 <__aeabi_fsub+0x19e>
 8000e00:	428d      	cmp	r5, r1
 8000e02:	d035      	beq.n	8000e70 <__aeabi_fsub+0x1a8>
 8000e04:	22ff      	movs	r2, #255	; 0xff
 8000e06:	4252      	negs	r2, r2
 8000e08:	4691      	mov	r9, r2
 8000e0a:	44a1      	add	r9, r4
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	d051      	beq.n	8000eb6 <__aeabi_fsub+0x1ee>
 8000e12:	1b30      	subs	r0, r6, r4
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x152>
 8000e18:	e09c      	b.n	8000f54 <__aeabi_fsub+0x28c>
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x15a>
 8000e20:	e0df      	b.n	8000fe2 <__aeabi_fsub+0x31a>
 8000e22:	3801      	subs	r0, #1
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x162>
 8000e28:	e0f7      	b.n	800101a <__aeabi_fsub+0x352>
 8000e2a:	2eff      	cmp	r6, #255	; 0xff
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_fsub+0x168>
 8000e2e:	e099      	b.n	8000f64 <__aeabi_fsub+0x29c>
 8000e30:	000d      	movs	r5, r1
 8000e32:	4643      	mov	r3, r8
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_fsub+0x172>
 8000e38:	e085      	b.n	8000f46 <__aeabi_fsub+0x27e>
 8000e3a:	2780      	movs	r7, #128	; 0x80
 8000e3c:	03ff      	lsls	r7, r7, #15
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	027f      	lsls	r7, r7, #9
 8000e42:	20ff      	movs	r0, #255	; 0xff
 8000e44:	0a7f      	lsrs	r7, r7, #9
 8000e46:	e7a6      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000e48:	4652      	mov	r2, sl
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d074      	beq.n	8000f38 <__aeabi_fsub+0x270>
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4252      	negs	r2, r2
 8000e52:	4690      	mov	r8, r2
 8000e54:	44c1      	add	r9, r8
 8000e56:	464a      	mov	r2, r9
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_fsub+0x196>
 8000e5c:	e0c8      	b.n	8000ff0 <__aeabi_fsub+0x328>
 8000e5e:	2cff      	cmp	r4, #255	; 0xff
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fsub+0x19c>
 8000e62:	e75f      	b.n	8000d24 <__aeabi_fsub+0x5c>
 8000e64:	e7e6      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8000e66:	2201      	movs	r2, #1
 8000e68:	4051      	eors	r1, r2
 8000e6a:	42a9      	cmp	r1, r5
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_fsub+0x1a8>
 8000e6e:	e749      	b.n	8000d04 <__aeabi_fsub+0x3c>
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	4252      	negs	r2, r2
 8000e74:	4691      	mov	r9, r2
 8000e76:	44a1      	add	r9, r4
 8000e78:	464a      	mov	r2, r9
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d043      	beq.n	8000f06 <__aeabi_fsub+0x23e>
 8000e7e:	1b31      	subs	r1, r6, r4
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x1be>
 8000e84:	e08c      	b.n	8000fa0 <__aeabi_fsub+0x2d8>
 8000e86:	2eff      	cmp	r6, #255	; 0xff
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x1c4>
 8000e8a:	e092      	b.n	8000fb2 <__aeabi_fsub+0x2ea>
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	4662      	mov	r2, ip
 8000e90:	04db      	lsls	r3, r3, #19
 8000e92:	431a      	orrs	r2, r3
 8000e94:	4694      	mov	ip, r2
 8000e96:	2301      	movs	r3, #1
 8000e98:	291b      	cmp	r1, #27
 8000e9a:	dc09      	bgt.n	8000eb0 <__aeabi_fsub+0x1e8>
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	4663      	mov	r3, ip
 8000ea0:	4662      	mov	r2, ip
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	1a41      	subs	r1, r0, r1
 8000ea6:	408a      	lsls	r2, r1
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	1e48      	subs	r0, r1, #1
 8000eac:	4181      	sbcs	r1, r0
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	0034      	movs	r4, r6
 8000eb2:	4453      	add	r3, sl
 8000eb4:	e794      	b.n	8000de0 <__aeabi_fsub+0x118>
 8000eb6:	22fe      	movs	r2, #254	; 0xfe
 8000eb8:	1c66      	adds	r6, r4, #1
 8000eba:	4232      	tst	r2, r6
 8000ebc:	d164      	bne.n	8000f88 <__aeabi_fsub+0x2c0>
 8000ebe:	2c00      	cmp	r4, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x1fc>
 8000ec2:	e082      	b.n	8000fca <__aeabi_fsub+0x302>
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x204>
 8000eca:	e0ab      	b.n	8001024 <__aeabi_fsub+0x35c>
 8000ecc:	4653      	mov	r3, sl
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x20c>
 8000ed2:	e760      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000ed4:	4663      	mov	r3, ip
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	015a      	lsls	r2, r3, #5
 8000edc:	d400      	bmi.n	8000ee0 <__aeabi_fsub+0x218>
 8000ede:	e0aa      	b.n	8001036 <__aeabi_fsub+0x36e>
 8000ee0:	4663      	mov	r3, ip
 8000ee2:	4652      	mov	r2, sl
 8000ee4:	000d      	movs	r5, r1
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	e744      	b.n	8000d74 <__aeabi_fsub+0xac>
 8000eea:	4652      	mov	r2, sl
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d023      	beq.n	8000f38 <__aeabi_fsub+0x270>
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4252      	negs	r2, r2
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	44c1      	add	r9, r8
 8000ef8:	464a      	mov	r2, r9
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d075      	beq.n	8000fea <__aeabi_fsub+0x322>
 8000efe:	2cff      	cmp	r4, #255	; 0xff
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x23c>
 8000f02:	e75f      	b.n	8000dc4 <__aeabi_fsub+0xfc>
 8000f04:	e796      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8000f06:	26fe      	movs	r6, #254	; 0xfe
 8000f08:	3401      	adds	r4, #1
 8000f0a:	4226      	tst	r6, r4
 8000f0c:	d153      	bne.n	8000fb6 <__aeabi_fsub+0x2ee>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d172      	bne.n	8000ff8 <__aeabi_fsub+0x330>
 8000f12:	4663      	mov	r3, ip
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x252>
 8000f18:	e093      	b.n	8001042 <__aeabi_fsub+0x37a>
 8000f1a:	4653      	mov	r3, sl
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_fsub+0x25a>
 8000f20:	e739      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000f22:	4463      	add	r3, ip
 8000f24:	2400      	movs	r4, #0
 8000f26:	015a      	lsls	r2, r3, #5
 8000f28:	d502      	bpl.n	8000f30 <__aeabi_fsub+0x268>
 8000f2a:	4a4a      	ldr	r2, [pc, #296]	; (8001054 <__aeabi_fsub+0x38c>)
 8000f2c:	3401      	adds	r4, #1
 8000f2e:	4013      	ands	r3, r2
 8000f30:	075a      	lsls	r2, r3, #29
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0x26e>
 8000f34:	e720      	b.n	8000d78 <__aeabi_fsub+0xb0>
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	2cff      	cmp	r4, #255	; 0xff
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x276>
 8000f3c:	e77a      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	0a5f      	lsrs	r7, r3, #9
 8000f42:	b2e0      	uxtb	r0, r4
 8000f44:	e727      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000f46:	20ff      	movs	r0, #255	; 0xff
 8000f48:	2700      	movs	r7, #0
 8000f4a:	e724      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000f4c:	4b41      	ldr	r3, [pc, #260]	; (8001054 <__aeabi_fsub+0x38c>)
 8000f4e:	1a24      	subs	r4, r4, r0
 8000f50:	4033      	ands	r3, r6
 8000f52:	e70f      	b.n	8000d74 <__aeabi_fsub+0xac>
 8000f54:	2eff      	cmp	r6, #255	; 0xff
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x292>
 8000f58:	e76a      	b.n	8000e30 <__aeabi_fsub+0x168>
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	04db      	lsls	r3, r3, #19
 8000f60:	431a      	orrs	r2, r3
 8000f62:	4694      	mov	ip, r2
 8000f64:	2301      	movs	r3, #1
 8000f66:	281b      	cmp	r0, #27
 8000f68:	dc09      	bgt.n	8000f7e <__aeabi_fsub+0x2b6>
 8000f6a:	2420      	movs	r4, #32
 8000f6c:	4663      	mov	r3, ip
 8000f6e:	4662      	mov	r2, ip
 8000f70:	40c3      	lsrs	r3, r0
 8000f72:	1a20      	subs	r0, r4, r0
 8000f74:	4082      	lsls	r2, r0
 8000f76:	0010      	movs	r0, r2
 8000f78:	1e44      	subs	r4, r0, #1
 8000f7a:	41a0      	sbcs	r0, r4
 8000f7c:	4303      	orrs	r3, r0
 8000f7e:	4652      	mov	r2, sl
 8000f80:	000d      	movs	r5, r1
 8000f82:	0034      	movs	r4, r6
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	e6dc      	b.n	8000d42 <__aeabi_fsub+0x7a>
 8000f88:	4663      	mov	r3, ip
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	1a9e      	subs	r6, r3, r2
 8000f8e:	0173      	lsls	r3, r6, #5
 8000f90:	d417      	bmi.n	8000fc2 <__aeabi_fsub+0x2fa>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_fsub+0x2d0>
 8000f96:	e6d9      	b.n	8000d4c <__aeabi_fsub+0x84>
 8000f98:	2500      	movs	r5, #0
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	2700      	movs	r7, #0
 8000f9e:	e6fa      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d044      	beq.n	8001030 <__aeabi_fsub+0x368>
 8000fa6:	3901      	subs	r1, #1
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	d04c      	beq.n	8001046 <__aeabi_fsub+0x37e>
 8000fac:	2eff      	cmp	r6, #255	; 0xff
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x2ea>
 8000fb0:	e771      	b.n	8000e96 <__aeabi_fsub+0x1ce>
 8000fb2:	4643      	mov	r3, r8
 8000fb4:	e73e      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8000fb6:	2cff      	cmp	r4, #255	; 0xff
 8000fb8:	d0c5      	beq.n	8000f46 <__aeabi_fsub+0x27e>
 8000fba:	4652      	mov	r2, sl
 8000fbc:	4462      	add	r2, ip
 8000fbe:	0853      	lsrs	r3, r2, #1
 8000fc0:	e7b6      	b.n	8000f30 <__aeabi_fsub+0x268>
 8000fc2:	4663      	mov	r3, ip
 8000fc4:	000d      	movs	r5, r1
 8000fc6:	1ad6      	subs	r6, r2, r3
 8000fc8:	e6c0      	b.n	8000d4c <__aeabi_fsub+0x84>
 8000fca:	4662      	mov	r2, ip
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d116      	bne.n	8000ffe <__aeabi_fsub+0x336>
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_fsub+0x310>
 8000fd6:	e72b      	b.n	8000e30 <__aeabi_fsub+0x168>
 8000fd8:	2780      	movs	r7, #128	; 0x80
 8000fda:	2500      	movs	r5, #0
 8000fdc:	20ff      	movs	r0, #255	; 0xff
 8000fde:	03ff      	lsls	r7, r7, #15
 8000fe0:	e6d9      	b.n	8000d96 <__aeabi_fsub+0xce>
 8000fe2:	000d      	movs	r5, r1
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0034      	movs	r4, r6
 8000fe8:	e7a6      	b.n	8000f38 <__aeabi_fsub+0x270>
 8000fea:	4653      	mov	r3, sl
 8000fec:	4463      	add	r3, ip
 8000fee:	e6f7      	b.n	8000de0 <__aeabi_fsub+0x118>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	4652      	mov	r2, sl
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	e6a4      	b.n	8000d42 <__aeabi_fsub+0x7a>
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d0d9      	beq.n	8000fb2 <__aeabi_fsub+0x2ea>
 8000ffe:	4652      	mov	r2, sl
 8001000:	2a00      	cmp	r2, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_fsub+0x33e>
 8001004:	e716      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	03d2      	lsls	r2, r2, #15
 800100a:	4213      	tst	r3, r2
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x348>
 800100e:	e711      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8001010:	4640      	mov	r0, r8
 8001012:	4210      	tst	r0, r2
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x350>
 8001016:	e70d      	b.n	8000e34 <__aeabi_fsub+0x16c>
 8001018:	e70a      	b.n	8000e30 <__aeabi_fsub+0x168>
 800101a:	4652      	mov	r2, sl
 800101c:	000d      	movs	r5, r1
 800101e:	0034      	movs	r4, r6
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	e68e      	b.n	8000d42 <__aeabi_fsub+0x7a>
 8001024:	4653      	mov	r3, sl
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <__aeabi_fsub+0x374>
 800102a:	000d      	movs	r5, r1
 800102c:	4647      	mov	r7, r8
 800102e:	e6b2      	b.n	8000d96 <__aeabi_fsub+0xce>
 8001030:	4643      	mov	r3, r8
 8001032:	0034      	movs	r4, r6
 8001034:	e780      	b.n	8000f38 <__aeabi_fsub+0x270>
 8001036:	2b00      	cmp	r3, #0
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x374>
 800103a:	e779      	b.n	8000f30 <__aeabi_fsub+0x268>
 800103c:	2500      	movs	r5, #0
 800103e:	2700      	movs	r7, #0
 8001040:	e6a9      	b.n	8000d96 <__aeabi_fsub+0xce>
 8001042:	4647      	mov	r7, r8
 8001044:	e6a7      	b.n	8000d96 <__aeabi_fsub+0xce>
 8001046:	4653      	mov	r3, sl
 8001048:	0034      	movs	r4, r6
 800104a:	4463      	add	r3, ip
 800104c:	e6c8      	b.n	8000de0 <__aeabi_fsub+0x118>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	7dffffff 	.word	0x7dffffff
 8001054:	fbffffff 	.word	0xfbffffff

08001058 <__aeabi_f2iz>:
 8001058:	0241      	lsls	r1, r0, #9
 800105a:	0042      	lsls	r2, r0, #1
 800105c:	0fc3      	lsrs	r3, r0, #31
 800105e:	0a49      	lsrs	r1, r1, #9
 8001060:	2000      	movs	r0, #0
 8001062:	0e12      	lsrs	r2, r2, #24
 8001064:	2a7e      	cmp	r2, #126	; 0x7e
 8001066:	d903      	bls.n	8001070 <__aeabi_f2iz+0x18>
 8001068:	2a9d      	cmp	r2, #157	; 0x9d
 800106a:	d902      	bls.n	8001072 <__aeabi_f2iz+0x1a>
 800106c:	4a09      	ldr	r2, [pc, #36]	; (8001094 <__aeabi_f2iz+0x3c>)
 800106e:	1898      	adds	r0, r3, r2
 8001070:	4770      	bx	lr
 8001072:	2080      	movs	r0, #128	; 0x80
 8001074:	0400      	lsls	r0, r0, #16
 8001076:	4301      	orrs	r1, r0
 8001078:	2a95      	cmp	r2, #149	; 0x95
 800107a:	dc07      	bgt.n	800108c <__aeabi_f2iz+0x34>
 800107c:	2096      	movs	r0, #150	; 0x96
 800107e:	1a82      	subs	r2, r0, r2
 8001080:	40d1      	lsrs	r1, r2
 8001082:	4248      	negs	r0, r1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f3      	bne.n	8001070 <__aeabi_f2iz+0x18>
 8001088:	0008      	movs	r0, r1
 800108a:	e7f1      	b.n	8001070 <__aeabi_f2iz+0x18>
 800108c:	3a96      	subs	r2, #150	; 0x96
 800108e:	4091      	lsls	r1, r2
 8001090:	e7f7      	b.n	8001082 <__aeabi_f2iz+0x2a>
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	7fffffff 	.word	0x7fffffff

08001098 <__aeabi_ui2f>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	1e05      	subs	r5, r0, #0
 800109c:	d00e      	beq.n	80010bc <__aeabi_ui2f+0x24>
 800109e:	f001 fe63 	bl	8002d68 <__clzsi2>
 80010a2:	239e      	movs	r3, #158	; 0x9e
 80010a4:	0004      	movs	r4, r0
 80010a6:	1a1b      	subs	r3, r3, r0
 80010a8:	2b96      	cmp	r3, #150	; 0x96
 80010aa:	dc0c      	bgt.n	80010c6 <__aeabi_ui2f+0x2e>
 80010ac:	2808      	cmp	r0, #8
 80010ae:	dd01      	ble.n	80010b4 <__aeabi_ui2f+0x1c>
 80010b0:	3c08      	subs	r4, #8
 80010b2:	40a5      	lsls	r5, r4
 80010b4:	026d      	lsls	r5, r5, #9
 80010b6:	0a6d      	lsrs	r5, r5, #9
 80010b8:	b2d8      	uxtb	r0, r3
 80010ba:	e001      	b.n	80010c0 <__aeabi_ui2f+0x28>
 80010bc:	2000      	movs	r0, #0
 80010be:	2500      	movs	r5, #0
 80010c0:	05c0      	lsls	r0, r0, #23
 80010c2:	4328      	orrs	r0, r5
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
 80010c6:	2b99      	cmp	r3, #153	; 0x99
 80010c8:	dd09      	ble.n	80010de <__aeabi_ui2f+0x46>
 80010ca:	0002      	movs	r2, r0
 80010cc:	0029      	movs	r1, r5
 80010ce:	321b      	adds	r2, #27
 80010d0:	4091      	lsls	r1, r2
 80010d2:	1e4a      	subs	r2, r1, #1
 80010d4:	4191      	sbcs	r1, r2
 80010d6:	2205      	movs	r2, #5
 80010d8:	1a12      	subs	r2, r2, r0
 80010da:	40d5      	lsrs	r5, r2
 80010dc:	430d      	orrs	r5, r1
 80010de:	2c05      	cmp	r4, #5
 80010e0:	dd01      	ble.n	80010e6 <__aeabi_ui2f+0x4e>
 80010e2:	1f62      	subs	r2, r4, #5
 80010e4:	4095      	lsls	r5, r2
 80010e6:	0029      	movs	r1, r5
 80010e8:	4e08      	ldr	r6, [pc, #32]	; (800110c <__aeabi_ui2f+0x74>)
 80010ea:	4031      	ands	r1, r6
 80010ec:	076a      	lsls	r2, r5, #29
 80010ee:	d009      	beq.n	8001104 <__aeabi_ui2f+0x6c>
 80010f0:	200f      	movs	r0, #15
 80010f2:	4028      	ands	r0, r5
 80010f4:	2804      	cmp	r0, #4
 80010f6:	d005      	beq.n	8001104 <__aeabi_ui2f+0x6c>
 80010f8:	3104      	adds	r1, #4
 80010fa:	014a      	lsls	r2, r1, #5
 80010fc:	d502      	bpl.n	8001104 <__aeabi_ui2f+0x6c>
 80010fe:	239f      	movs	r3, #159	; 0x9f
 8001100:	4031      	ands	r1, r6
 8001102:	1b1b      	subs	r3, r3, r4
 8001104:	0189      	lsls	r1, r1, #6
 8001106:	0a4d      	lsrs	r5, r1, #9
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	e7d9      	b.n	80010c0 <__aeabi_ui2f+0x28>
 800110c:	fbffffff 	.word	0xfbffffff

08001110 <__aeabi_dadd>:
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	464f      	mov	r7, r9
 8001114:	46d6      	mov	lr, sl
 8001116:	4646      	mov	r6, r8
 8001118:	000d      	movs	r5, r1
 800111a:	0001      	movs	r1, r0
 800111c:	0018      	movs	r0, r3
 800111e:	b5c0      	push	{r6, r7, lr}
 8001120:	0017      	movs	r7, r2
 8001122:	032b      	lsls	r3, r5, #12
 8001124:	0a5a      	lsrs	r2, r3, #9
 8001126:	0f4b      	lsrs	r3, r1, #29
 8001128:	4313      	orrs	r3, r2
 800112a:	00ca      	lsls	r2, r1, #3
 800112c:	4691      	mov	r9, r2
 800112e:	0302      	lsls	r2, r0, #12
 8001130:	006e      	lsls	r6, r5, #1
 8001132:	0041      	lsls	r1, r0, #1
 8001134:	0a52      	lsrs	r2, r2, #9
 8001136:	0fec      	lsrs	r4, r5, #31
 8001138:	0f7d      	lsrs	r5, r7, #29
 800113a:	4315      	orrs	r5, r2
 800113c:	0d76      	lsrs	r6, r6, #21
 800113e:	0d49      	lsrs	r1, r1, #21
 8001140:	0fc0      	lsrs	r0, r0, #31
 8001142:	4682      	mov	sl, r0
 8001144:	46ac      	mov	ip, r5
 8001146:	00ff      	lsls	r7, r7, #3
 8001148:	1a72      	subs	r2, r6, r1
 800114a:	4284      	cmp	r4, r0
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x40>
 800114e:	e098      	b.n	8001282 <__aeabi_dadd+0x172>
 8001150:	2a00      	cmp	r2, #0
 8001152:	dc00      	bgt.n	8001156 <__aeabi_dadd+0x46>
 8001154:	e081      	b.n	800125a <__aeabi_dadd+0x14a>
 8001156:	2900      	cmp	r1, #0
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x4c>
 800115a:	e0b6      	b.n	80012ca <__aeabi_dadd+0x1ba>
 800115c:	49c9      	ldr	r1, [pc, #804]	; (8001484 <__aeabi_dadd+0x374>)
 800115e:	428e      	cmp	r6, r1
 8001160:	d100      	bne.n	8001164 <__aeabi_dadd+0x54>
 8001162:	e172      	b.n	800144a <__aeabi_dadd+0x33a>
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	0028      	movs	r0, r5
 8001168:	0409      	lsls	r1, r1, #16
 800116a:	4308      	orrs	r0, r1
 800116c:	4684      	mov	ip, r0
 800116e:	2a38      	cmp	r2, #56	; 0x38
 8001170:	dd00      	ble.n	8001174 <__aeabi_dadd+0x64>
 8001172:	e15e      	b.n	8001432 <__aeabi_dadd+0x322>
 8001174:	2a1f      	cmp	r2, #31
 8001176:	dd00      	ble.n	800117a <__aeabi_dadd+0x6a>
 8001178:	e1ee      	b.n	8001558 <__aeabi_dadd+0x448>
 800117a:	2020      	movs	r0, #32
 800117c:	0039      	movs	r1, r7
 800117e:	4665      	mov	r5, ip
 8001180:	1a80      	subs	r0, r0, r2
 8001182:	4087      	lsls	r7, r0
 8001184:	40d1      	lsrs	r1, r2
 8001186:	4085      	lsls	r5, r0
 8001188:	430d      	orrs	r5, r1
 800118a:	0039      	movs	r1, r7
 800118c:	1e4f      	subs	r7, r1, #1
 800118e:	41b9      	sbcs	r1, r7
 8001190:	4667      	mov	r7, ip
 8001192:	40d7      	lsrs	r7, r2
 8001194:	4329      	orrs	r1, r5
 8001196:	1bdb      	subs	r3, r3, r7
 8001198:	464a      	mov	r2, r9
 800119a:	1a55      	subs	r5, r2, r1
 800119c:	45a9      	cmp	r9, r5
 800119e:	4189      	sbcs	r1, r1
 80011a0:	4249      	negs	r1, r1
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	4698      	mov	r8, r3
 80011a6:	4643      	mov	r3, r8
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	d400      	bmi.n	80011ae <__aeabi_dadd+0x9e>
 80011ac:	e0cc      	b.n	8001348 <__aeabi_dadd+0x238>
 80011ae:	4643      	mov	r3, r8
 80011b0:	025b      	lsls	r3, r3, #9
 80011b2:	0a5b      	lsrs	r3, r3, #9
 80011b4:	4698      	mov	r8, r3
 80011b6:	4643      	mov	r3, r8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0xae>
 80011bc:	e12c      	b.n	8001418 <__aeabi_dadd+0x308>
 80011be:	4640      	mov	r0, r8
 80011c0:	f001 fdd2 	bl	8002d68 <__clzsi2>
 80011c4:	0001      	movs	r1, r0
 80011c6:	3908      	subs	r1, #8
 80011c8:	2220      	movs	r2, #32
 80011ca:	0028      	movs	r0, r5
 80011cc:	4643      	mov	r3, r8
 80011ce:	1a52      	subs	r2, r2, r1
 80011d0:	408b      	lsls	r3, r1
 80011d2:	40d0      	lsrs	r0, r2
 80011d4:	408d      	lsls	r5, r1
 80011d6:	4303      	orrs	r3, r0
 80011d8:	428e      	cmp	r6, r1
 80011da:	dd00      	ble.n	80011de <__aeabi_dadd+0xce>
 80011dc:	e117      	b.n	800140e <__aeabi_dadd+0x2fe>
 80011de:	1b8e      	subs	r6, r1, r6
 80011e0:	1c72      	adds	r2, r6, #1
 80011e2:	2a1f      	cmp	r2, #31
 80011e4:	dd00      	ble.n	80011e8 <__aeabi_dadd+0xd8>
 80011e6:	e1a7      	b.n	8001538 <__aeabi_dadd+0x428>
 80011e8:	2120      	movs	r1, #32
 80011ea:	0018      	movs	r0, r3
 80011ec:	002e      	movs	r6, r5
 80011ee:	1a89      	subs	r1, r1, r2
 80011f0:	408d      	lsls	r5, r1
 80011f2:	4088      	lsls	r0, r1
 80011f4:	40d6      	lsrs	r6, r2
 80011f6:	40d3      	lsrs	r3, r2
 80011f8:	1e69      	subs	r1, r5, #1
 80011fa:	418d      	sbcs	r5, r1
 80011fc:	4330      	orrs	r0, r6
 80011fe:	4698      	mov	r8, r3
 8001200:	2600      	movs	r6, #0
 8001202:	4305      	orrs	r5, r0
 8001204:	076b      	lsls	r3, r5, #29
 8001206:	d009      	beq.n	800121c <__aeabi_dadd+0x10c>
 8001208:	230f      	movs	r3, #15
 800120a:	402b      	ands	r3, r5
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <__aeabi_dadd+0x10c>
 8001210:	1d2b      	adds	r3, r5, #4
 8001212:	42ab      	cmp	r3, r5
 8001214:	41ad      	sbcs	r5, r5
 8001216:	426d      	negs	r5, r5
 8001218:	44a8      	add	r8, r5
 800121a:	001d      	movs	r5, r3
 800121c:	4643      	mov	r3, r8
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	d400      	bmi.n	8001224 <__aeabi_dadd+0x114>
 8001222:	e094      	b.n	800134e <__aeabi_dadd+0x23e>
 8001224:	4b97      	ldr	r3, [pc, #604]	; (8001484 <__aeabi_dadd+0x374>)
 8001226:	1c72      	adds	r2, r6, #1
 8001228:	429a      	cmp	r2, r3
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x11e>
 800122c:	e09d      	b.n	800136a <__aeabi_dadd+0x25a>
 800122e:	4641      	mov	r1, r8
 8001230:	4b95      	ldr	r3, [pc, #596]	; (8001488 <__aeabi_dadd+0x378>)
 8001232:	08ed      	lsrs	r5, r5, #3
 8001234:	4019      	ands	r1, r3
 8001236:	000b      	movs	r3, r1
 8001238:	0552      	lsls	r2, r2, #21
 800123a:	0749      	lsls	r1, r1, #29
 800123c:	025b      	lsls	r3, r3, #9
 800123e:	4329      	orrs	r1, r5
 8001240:	0b1b      	lsrs	r3, r3, #12
 8001242:	0d52      	lsrs	r2, r2, #21
 8001244:	0512      	lsls	r2, r2, #20
 8001246:	4313      	orrs	r3, r2
 8001248:	07e4      	lsls	r4, r4, #31
 800124a:	4323      	orrs	r3, r4
 800124c:	0008      	movs	r0, r1
 800124e:	0019      	movs	r1, r3
 8001250:	bce0      	pop	{r5, r6, r7}
 8001252:	46ba      	mov	sl, r7
 8001254:	46b1      	mov	r9, r6
 8001256:	46a8      	mov	r8, r5
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125a:	2a00      	cmp	r2, #0
 800125c:	d043      	beq.n	80012e6 <__aeabi_dadd+0x1d6>
 800125e:	1b8a      	subs	r2, r1, r6
 8001260:	2e00      	cmp	r6, #0
 8001262:	d000      	beq.n	8001266 <__aeabi_dadd+0x156>
 8001264:	e12a      	b.n	80014bc <__aeabi_dadd+0x3ac>
 8001266:	464c      	mov	r4, r9
 8001268:	431c      	orrs	r4, r3
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x15e>
 800126c:	e1d1      	b.n	8001612 <__aeabi_dadd+0x502>
 800126e:	1e54      	subs	r4, r2, #1
 8001270:	2a01      	cmp	r2, #1
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x166>
 8001274:	e21f      	b.n	80016b6 <__aeabi_dadd+0x5a6>
 8001276:	4d83      	ldr	r5, [pc, #524]	; (8001484 <__aeabi_dadd+0x374>)
 8001278:	42aa      	cmp	r2, r5
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x16e>
 800127c:	e272      	b.n	8001764 <__aeabi_dadd+0x654>
 800127e:	0022      	movs	r2, r4
 8001280:	e123      	b.n	80014ca <__aeabi_dadd+0x3ba>
 8001282:	2a00      	cmp	r2, #0
 8001284:	dc00      	bgt.n	8001288 <__aeabi_dadd+0x178>
 8001286:	e098      	b.n	80013ba <__aeabi_dadd+0x2aa>
 8001288:	2900      	cmp	r1, #0
 800128a:	d042      	beq.n	8001312 <__aeabi_dadd+0x202>
 800128c:	497d      	ldr	r1, [pc, #500]	; (8001484 <__aeabi_dadd+0x374>)
 800128e:	428e      	cmp	r6, r1
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x184>
 8001292:	e0da      	b.n	800144a <__aeabi_dadd+0x33a>
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0028      	movs	r0, r5
 8001298:	0409      	lsls	r1, r1, #16
 800129a:	4308      	orrs	r0, r1
 800129c:	4684      	mov	ip, r0
 800129e:	2a38      	cmp	r2, #56	; 0x38
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_dadd+0x194>
 80012a2:	e129      	b.n	80014f8 <__aeabi_dadd+0x3e8>
 80012a4:	2a1f      	cmp	r2, #31
 80012a6:	dc00      	bgt.n	80012aa <__aeabi_dadd+0x19a>
 80012a8:	e187      	b.n	80015ba <__aeabi_dadd+0x4aa>
 80012aa:	0011      	movs	r1, r2
 80012ac:	4665      	mov	r5, ip
 80012ae:	3920      	subs	r1, #32
 80012b0:	40cd      	lsrs	r5, r1
 80012b2:	2a20      	cmp	r2, #32
 80012b4:	d004      	beq.n	80012c0 <__aeabi_dadd+0x1b0>
 80012b6:	2040      	movs	r0, #64	; 0x40
 80012b8:	4661      	mov	r1, ip
 80012ba:	1a82      	subs	r2, r0, r2
 80012bc:	4091      	lsls	r1, r2
 80012be:	430f      	orrs	r7, r1
 80012c0:	0039      	movs	r1, r7
 80012c2:	1e4f      	subs	r7, r1, #1
 80012c4:	41b9      	sbcs	r1, r7
 80012c6:	430d      	orrs	r5, r1
 80012c8:	e11b      	b.n	8001502 <__aeabi_dadd+0x3f2>
 80012ca:	0029      	movs	r1, r5
 80012cc:	4339      	orrs	r1, r7
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x1c2>
 80012d0:	e0b5      	b.n	800143e <__aeabi_dadd+0x32e>
 80012d2:	1e51      	subs	r1, r2, #1
 80012d4:	2a01      	cmp	r2, #1
 80012d6:	d100      	bne.n	80012da <__aeabi_dadd+0x1ca>
 80012d8:	e1ab      	b.n	8001632 <__aeabi_dadd+0x522>
 80012da:	486a      	ldr	r0, [pc, #424]	; (8001484 <__aeabi_dadd+0x374>)
 80012dc:	4282      	cmp	r2, r0
 80012de:	d100      	bne.n	80012e2 <__aeabi_dadd+0x1d2>
 80012e0:	e1b2      	b.n	8001648 <__aeabi_dadd+0x538>
 80012e2:	000a      	movs	r2, r1
 80012e4:	e743      	b.n	800116e <__aeabi_dadd+0x5e>
 80012e6:	4969      	ldr	r1, [pc, #420]	; (800148c <__aeabi_dadd+0x37c>)
 80012e8:	1c75      	adds	r5, r6, #1
 80012ea:	420d      	tst	r5, r1
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x1e0>
 80012ee:	e0cf      	b.n	8001490 <__aeabi_dadd+0x380>
 80012f0:	2e00      	cmp	r6, #0
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x1e6>
 80012f4:	e193      	b.n	800161e <__aeabi_dadd+0x50e>
 80012f6:	4649      	mov	r1, r9
 80012f8:	4319      	orrs	r1, r3
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x1ee>
 80012fc:	e1d1      	b.n	80016a2 <__aeabi_dadd+0x592>
 80012fe:	4661      	mov	r1, ip
 8001300:	4339      	orrs	r1, r7
 8001302:	d000      	beq.n	8001306 <__aeabi_dadd+0x1f6>
 8001304:	e1e3      	b.n	80016ce <__aeabi_dadd+0x5be>
 8001306:	4649      	mov	r1, r9
 8001308:	0758      	lsls	r0, r3, #29
 800130a:	08c9      	lsrs	r1, r1, #3
 800130c:	4301      	orrs	r1, r0
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	e026      	b.n	8001360 <__aeabi_dadd+0x250>
 8001312:	0029      	movs	r1, r5
 8001314:	4339      	orrs	r1, r7
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x20a>
 8001318:	e091      	b.n	800143e <__aeabi_dadd+0x32e>
 800131a:	1e51      	subs	r1, r2, #1
 800131c:	2a01      	cmp	r2, #1
 800131e:	d005      	beq.n	800132c <__aeabi_dadd+0x21c>
 8001320:	4858      	ldr	r0, [pc, #352]	; (8001484 <__aeabi_dadd+0x374>)
 8001322:	4282      	cmp	r2, r0
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x218>
 8001326:	e18f      	b.n	8001648 <__aeabi_dadd+0x538>
 8001328:	000a      	movs	r2, r1
 800132a:	e7b8      	b.n	800129e <__aeabi_dadd+0x18e>
 800132c:	003d      	movs	r5, r7
 800132e:	444d      	add	r5, r9
 8001330:	454d      	cmp	r5, r9
 8001332:	4189      	sbcs	r1, r1
 8001334:	4463      	add	r3, ip
 8001336:	4698      	mov	r8, r3
 8001338:	4249      	negs	r1, r1
 800133a:	4488      	add	r8, r1
 800133c:	4643      	mov	r3, r8
 800133e:	2602      	movs	r6, #2
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	d500      	bpl.n	8001346 <__aeabi_dadd+0x236>
 8001344:	e0eb      	b.n	800151e <__aeabi_dadd+0x40e>
 8001346:	3e01      	subs	r6, #1
 8001348:	076b      	lsls	r3, r5, #29
 800134a:	d000      	beq.n	800134e <__aeabi_dadd+0x23e>
 800134c:	e75c      	b.n	8001208 <__aeabi_dadd+0xf8>
 800134e:	4643      	mov	r3, r8
 8001350:	08e9      	lsrs	r1, r5, #3
 8001352:	075a      	lsls	r2, r3, #29
 8001354:	4311      	orrs	r1, r2
 8001356:	0032      	movs	r2, r6
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	484a      	ldr	r0, [pc, #296]	; (8001484 <__aeabi_dadd+0x374>)
 800135c:	4282      	cmp	r2, r0
 800135e:	d021      	beq.n	80013a4 <__aeabi_dadd+0x294>
 8001360:	031b      	lsls	r3, r3, #12
 8001362:	0552      	lsls	r2, r2, #21
 8001364:	0b1b      	lsrs	r3, r3, #12
 8001366:	0d52      	lsrs	r2, r2, #21
 8001368:	e76c      	b.n	8001244 <__aeabi_dadd+0x134>
 800136a:	2300      	movs	r3, #0
 800136c:	2100      	movs	r1, #0
 800136e:	e769      	b.n	8001244 <__aeabi_dadd+0x134>
 8001370:	002a      	movs	r2, r5
 8001372:	433a      	orrs	r2, r7
 8001374:	d069      	beq.n	800144a <__aeabi_dadd+0x33a>
 8001376:	464a      	mov	r2, r9
 8001378:	0758      	lsls	r0, r3, #29
 800137a:	08d1      	lsrs	r1, r2, #3
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	031b      	lsls	r3, r3, #12
 8001382:	4308      	orrs	r0, r1
 8001384:	421a      	tst	r2, r3
 8001386:	d007      	beq.n	8001398 <__aeabi_dadd+0x288>
 8001388:	0029      	movs	r1, r5
 800138a:	08ed      	lsrs	r5, r5, #3
 800138c:	421d      	tst	r5, r3
 800138e:	d103      	bne.n	8001398 <__aeabi_dadd+0x288>
 8001390:	002a      	movs	r2, r5
 8001392:	08ff      	lsrs	r7, r7, #3
 8001394:	0748      	lsls	r0, r1, #29
 8001396:	4338      	orrs	r0, r7
 8001398:	0f43      	lsrs	r3, r0, #29
 800139a:	00c1      	lsls	r1, r0, #3
 800139c:	075b      	lsls	r3, r3, #29
 800139e:	08c9      	lsrs	r1, r1, #3
 80013a0:	4319      	orrs	r1, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0x29c>
 80013aa:	e213      	b.n	80017d4 <__aeabi_dadd+0x6c4>
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0312      	lsls	r2, r2, #12
 80013b0:	4313      	orrs	r3, r2
 80013b2:	031b      	lsls	r3, r3, #12
 80013b4:	4a33      	ldr	r2, [pc, #204]	; (8001484 <__aeabi_dadd+0x374>)
 80013b6:	0b1b      	lsrs	r3, r3, #12
 80013b8:	e744      	b.n	8001244 <__aeabi_dadd+0x134>
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	d04b      	beq.n	8001456 <__aeabi_dadd+0x346>
 80013be:	1b8a      	subs	r2, r1, r6
 80013c0:	2e00      	cmp	r6, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x2b6>
 80013c4:	e0e7      	b.n	8001596 <__aeabi_dadd+0x486>
 80013c6:	482f      	ldr	r0, [pc, #188]	; (8001484 <__aeabi_dadd+0x374>)
 80013c8:	4281      	cmp	r1, r0
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x2be>
 80013cc:	e195      	b.n	80016fa <__aeabi_dadd+0x5ea>
 80013ce:	2080      	movs	r0, #128	; 0x80
 80013d0:	0400      	lsls	r0, r0, #16
 80013d2:	4303      	orrs	r3, r0
 80013d4:	2a38      	cmp	r2, #56	; 0x38
 80013d6:	dd00      	ble.n	80013da <__aeabi_dadd+0x2ca>
 80013d8:	e143      	b.n	8001662 <__aeabi_dadd+0x552>
 80013da:	2a1f      	cmp	r2, #31
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dadd+0x2d0>
 80013de:	e1db      	b.n	8001798 <__aeabi_dadd+0x688>
 80013e0:	2020      	movs	r0, #32
 80013e2:	001d      	movs	r5, r3
 80013e4:	464e      	mov	r6, r9
 80013e6:	1a80      	subs	r0, r0, r2
 80013e8:	4085      	lsls	r5, r0
 80013ea:	40d6      	lsrs	r6, r2
 80013ec:	4335      	orrs	r5, r6
 80013ee:	464e      	mov	r6, r9
 80013f0:	4086      	lsls	r6, r0
 80013f2:	0030      	movs	r0, r6
 80013f4:	40d3      	lsrs	r3, r2
 80013f6:	1e46      	subs	r6, r0, #1
 80013f8:	41b0      	sbcs	r0, r6
 80013fa:	449c      	add	ip, r3
 80013fc:	4305      	orrs	r5, r0
 80013fe:	19ed      	adds	r5, r5, r7
 8001400:	42bd      	cmp	r5, r7
 8001402:	419b      	sbcs	r3, r3
 8001404:	425b      	negs	r3, r3
 8001406:	4463      	add	r3, ip
 8001408:	4698      	mov	r8, r3
 800140a:	000e      	movs	r6, r1
 800140c:	e07f      	b.n	800150e <__aeabi_dadd+0x3fe>
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <__aeabi_dadd+0x378>)
 8001410:	1a76      	subs	r6, r6, r1
 8001412:	4013      	ands	r3, r2
 8001414:	4698      	mov	r8, r3
 8001416:	e6f5      	b.n	8001204 <__aeabi_dadd+0xf4>
 8001418:	0028      	movs	r0, r5
 800141a:	f001 fca5 	bl	8002d68 <__clzsi2>
 800141e:	0001      	movs	r1, r0
 8001420:	3118      	adds	r1, #24
 8001422:	291f      	cmp	r1, #31
 8001424:	dc00      	bgt.n	8001428 <__aeabi_dadd+0x318>
 8001426:	e6cf      	b.n	80011c8 <__aeabi_dadd+0xb8>
 8001428:	002b      	movs	r3, r5
 800142a:	3808      	subs	r0, #8
 800142c:	4083      	lsls	r3, r0
 800142e:	2500      	movs	r5, #0
 8001430:	e6d2      	b.n	80011d8 <__aeabi_dadd+0xc8>
 8001432:	4662      	mov	r2, ip
 8001434:	433a      	orrs	r2, r7
 8001436:	0011      	movs	r1, r2
 8001438:	1e4f      	subs	r7, r1, #1
 800143a:	41b9      	sbcs	r1, r7
 800143c:	e6ac      	b.n	8001198 <__aeabi_dadd+0x88>
 800143e:	4649      	mov	r1, r9
 8001440:	0758      	lsls	r0, r3, #29
 8001442:	08c9      	lsrs	r1, r1, #3
 8001444:	4301      	orrs	r1, r0
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	e787      	b.n	800135a <__aeabi_dadd+0x24a>
 800144a:	4649      	mov	r1, r9
 800144c:	075a      	lsls	r2, r3, #29
 800144e:	08c9      	lsrs	r1, r1, #3
 8001450:	4311      	orrs	r1, r2
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	e7a6      	b.n	80013a4 <__aeabi_dadd+0x294>
 8001456:	490d      	ldr	r1, [pc, #52]	; (800148c <__aeabi_dadd+0x37c>)
 8001458:	1c70      	adds	r0, r6, #1
 800145a:	4208      	tst	r0, r1
 800145c:	d000      	beq.n	8001460 <__aeabi_dadd+0x350>
 800145e:	e0bb      	b.n	80015d8 <__aeabi_dadd+0x4c8>
 8001460:	2e00      	cmp	r6, #0
 8001462:	d000      	beq.n	8001466 <__aeabi_dadd+0x356>
 8001464:	e114      	b.n	8001690 <__aeabi_dadd+0x580>
 8001466:	4649      	mov	r1, r9
 8001468:	4319      	orrs	r1, r3
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x35e>
 800146c:	e175      	b.n	800175a <__aeabi_dadd+0x64a>
 800146e:	0029      	movs	r1, r5
 8001470:	4339      	orrs	r1, r7
 8001472:	d000      	beq.n	8001476 <__aeabi_dadd+0x366>
 8001474:	e17e      	b.n	8001774 <__aeabi_dadd+0x664>
 8001476:	4649      	mov	r1, r9
 8001478:	0758      	lsls	r0, r3, #29
 800147a:	08c9      	lsrs	r1, r1, #3
 800147c:	4301      	orrs	r1, r0
 800147e:	08db      	lsrs	r3, r3, #3
 8001480:	e76e      	b.n	8001360 <__aeabi_dadd+0x250>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	000007ff 	.word	0x000007ff
 8001488:	ff7fffff 	.word	0xff7fffff
 800148c:	000007fe 	.word	0x000007fe
 8001490:	4649      	mov	r1, r9
 8001492:	1bcd      	subs	r5, r1, r7
 8001494:	4661      	mov	r1, ip
 8001496:	1a58      	subs	r0, r3, r1
 8001498:	45a9      	cmp	r9, r5
 800149a:	4189      	sbcs	r1, r1
 800149c:	4249      	negs	r1, r1
 800149e:	4688      	mov	r8, r1
 80014a0:	0001      	movs	r1, r0
 80014a2:	4640      	mov	r0, r8
 80014a4:	1a09      	subs	r1, r1, r0
 80014a6:	4688      	mov	r8, r1
 80014a8:	0209      	lsls	r1, r1, #8
 80014aa:	d500      	bpl.n	80014ae <__aeabi_dadd+0x39e>
 80014ac:	e0a6      	b.n	80015fc <__aeabi_dadd+0x4ec>
 80014ae:	4641      	mov	r1, r8
 80014b0:	4329      	orrs	r1, r5
 80014b2:	d000      	beq.n	80014b6 <__aeabi_dadd+0x3a6>
 80014b4:	e67f      	b.n	80011b6 <__aeabi_dadd+0xa6>
 80014b6:	2300      	movs	r3, #0
 80014b8:	2400      	movs	r4, #0
 80014ba:	e751      	b.n	8001360 <__aeabi_dadd+0x250>
 80014bc:	4cc7      	ldr	r4, [pc, #796]	; (80017dc <__aeabi_dadd+0x6cc>)
 80014be:	42a1      	cmp	r1, r4
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x3b4>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x544>
 80014c4:	2480      	movs	r4, #128	; 0x80
 80014c6:	0424      	lsls	r4, r4, #16
 80014c8:	4323      	orrs	r3, r4
 80014ca:	2a38      	cmp	r2, #56	; 0x38
 80014cc:	dc54      	bgt.n	8001578 <__aeabi_dadd+0x468>
 80014ce:	2a1f      	cmp	r2, #31
 80014d0:	dd00      	ble.n	80014d4 <__aeabi_dadd+0x3c4>
 80014d2:	e0cc      	b.n	800166e <__aeabi_dadd+0x55e>
 80014d4:	2420      	movs	r4, #32
 80014d6:	4648      	mov	r0, r9
 80014d8:	1aa4      	subs	r4, r4, r2
 80014da:	001d      	movs	r5, r3
 80014dc:	464e      	mov	r6, r9
 80014de:	40a0      	lsls	r0, r4
 80014e0:	40d6      	lsrs	r6, r2
 80014e2:	40a5      	lsls	r5, r4
 80014e4:	0004      	movs	r4, r0
 80014e6:	40d3      	lsrs	r3, r2
 80014e8:	4662      	mov	r2, ip
 80014ea:	4335      	orrs	r5, r6
 80014ec:	1e66      	subs	r6, r4, #1
 80014ee:	41b4      	sbcs	r4, r6
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	469c      	mov	ip, r3
 80014f4:	4325      	orrs	r5, r4
 80014f6:	e044      	b.n	8001582 <__aeabi_dadd+0x472>
 80014f8:	4662      	mov	r2, ip
 80014fa:	433a      	orrs	r2, r7
 80014fc:	0015      	movs	r5, r2
 80014fe:	1e6f      	subs	r7, r5, #1
 8001500:	41bd      	sbcs	r5, r7
 8001502:	444d      	add	r5, r9
 8001504:	454d      	cmp	r5, r9
 8001506:	4189      	sbcs	r1, r1
 8001508:	4249      	negs	r1, r1
 800150a:	4688      	mov	r8, r1
 800150c:	4498      	add	r8, r3
 800150e:	4643      	mov	r3, r8
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	d400      	bmi.n	8001516 <__aeabi_dadd+0x406>
 8001514:	e718      	b.n	8001348 <__aeabi_dadd+0x238>
 8001516:	4bb1      	ldr	r3, [pc, #708]	; (80017dc <__aeabi_dadd+0x6cc>)
 8001518:	3601      	adds	r6, #1
 800151a:	429e      	cmp	r6, r3
 800151c:	d049      	beq.n	80015b2 <__aeabi_dadd+0x4a2>
 800151e:	4642      	mov	r2, r8
 8001520:	4baf      	ldr	r3, [pc, #700]	; (80017e0 <__aeabi_dadd+0x6d0>)
 8001522:	2101      	movs	r1, #1
 8001524:	401a      	ands	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	086a      	lsrs	r2, r5, #1
 800152a:	400d      	ands	r5, r1
 800152c:	4315      	orrs	r5, r2
 800152e:	07d9      	lsls	r1, r3, #31
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	4698      	mov	r8, r3
 8001534:	430d      	orrs	r5, r1
 8001536:	e665      	b.n	8001204 <__aeabi_dadd+0xf4>
 8001538:	0018      	movs	r0, r3
 800153a:	3e1f      	subs	r6, #31
 800153c:	40f0      	lsrs	r0, r6
 800153e:	2a20      	cmp	r2, #32
 8001540:	d003      	beq.n	800154a <__aeabi_dadd+0x43a>
 8001542:	2140      	movs	r1, #64	; 0x40
 8001544:	1a8a      	subs	r2, r1, r2
 8001546:	4093      	lsls	r3, r2
 8001548:	431d      	orrs	r5, r3
 800154a:	1e69      	subs	r1, r5, #1
 800154c:	418d      	sbcs	r5, r1
 800154e:	2300      	movs	r3, #0
 8001550:	2600      	movs	r6, #0
 8001552:	4698      	mov	r8, r3
 8001554:	4305      	orrs	r5, r0
 8001556:	e6f7      	b.n	8001348 <__aeabi_dadd+0x238>
 8001558:	0011      	movs	r1, r2
 800155a:	4665      	mov	r5, ip
 800155c:	3920      	subs	r1, #32
 800155e:	40cd      	lsrs	r5, r1
 8001560:	2a20      	cmp	r2, #32
 8001562:	d004      	beq.n	800156e <__aeabi_dadd+0x45e>
 8001564:	2040      	movs	r0, #64	; 0x40
 8001566:	4661      	mov	r1, ip
 8001568:	1a82      	subs	r2, r0, r2
 800156a:	4091      	lsls	r1, r2
 800156c:	430f      	orrs	r7, r1
 800156e:	0039      	movs	r1, r7
 8001570:	1e4f      	subs	r7, r1, #1
 8001572:	41b9      	sbcs	r1, r7
 8001574:	4329      	orrs	r1, r5
 8001576:	e60f      	b.n	8001198 <__aeabi_dadd+0x88>
 8001578:	464a      	mov	r2, r9
 800157a:	4313      	orrs	r3, r2
 800157c:	001d      	movs	r5, r3
 800157e:	1e6b      	subs	r3, r5, #1
 8001580:	419d      	sbcs	r5, r3
 8001582:	1b7d      	subs	r5, r7, r5
 8001584:	42af      	cmp	r7, r5
 8001586:	419b      	sbcs	r3, r3
 8001588:	4662      	mov	r2, ip
 800158a:	425b      	negs	r3, r3
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4698      	mov	r8, r3
 8001590:	4654      	mov	r4, sl
 8001592:	000e      	movs	r6, r1
 8001594:	e607      	b.n	80011a6 <__aeabi_dadd+0x96>
 8001596:	4648      	mov	r0, r9
 8001598:	4318      	orrs	r0, r3
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x48e>
 800159c:	e0b3      	b.n	8001706 <__aeabi_dadd+0x5f6>
 800159e:	1e50      	subs	r0, r2, #1
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x496>
 80015a4:	e10d      	b.n	80017c2 <__aeabi_dadd+0x6b2>
 80015a6:	4d8d      	ldr	r5, [pc, #564]	; (80017dc <__aeabi_dadd+0x6cc>)
 80015a8:	42aa      	cmp	r2, r5
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x49e>
 80015ac:	e0a5      	b.n	80016fa <__aeabi_dadd+0x5ea>
 80015ae:	0002      	movs	r2, r0
 80015b0:	e710      	b.n	80013d4 <__aeabi_dadd+0x2c4>
 80015b2:	0032      	movs	r2, r6
 80015b4:	2300      	movs	r3, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	e644      	b.n	8001244 <__aeabi_dadd+0x134>
 80015ba:	2120      	movs	r1, #32
 80015bc:	0038      	movs	r0, r7
 80015be:	1a89      	subs	r1, r1, r2
 80015c0:	4665      	mov	r5, ip
 80015c2:	408f      	lsls	r7, r1
 80015c4:	408d      	lsls	r5, r1
 80015c6:	40d0      	lsrs	r0, r2
 80015c8:	1e79      	subs	r1, r7, #1
 80015ca:	418f      	sbcs	r7, r1
 80015cc:	4305      	orrs	r5, r0
 80015ce:	433d      	orrs	r5, r7
 80015d0:	4667      	mov	r7, ip
 80015d2:	40d7      	lsrs	r7, r2
 80015d4:	19db      	adds	r3, r3, r7
 80015d6:	e794      	b.n	8001502 <__aeabi_dadd+0x3f2>
 80015d8:	4a80      	ldr	r2, [pc, #512]	; (80017dc <__aeabi_dadd+0x6cc>)
 80015da:	4290      	cmp	r0, r2
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dadd+0x4d0>
 80015de:	e0ec      	b.n	80017ba <__aeabi_dadd+0x6aa>
 80015e0:	0039      	movs	r1, r7
 80015e2:	4449      	add	r1, r9
 80015e4:	4549      	cmp	r1, r9
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	4463      	add	r3, ip
 80015ea:	4252      	negs	r2, r2
 80015ec:	189b      	adds	r3, r3, r2
 80015ee:	07dd      	lsls	r5, r3, #31
 80015f0:	0849      	lsrs	r1, r1, #1
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	4698      	mov	r8, r3
 80015f6:	0006      	movs	r6, r0
 80015f8:	430d      	orrs	r5, r1
 80015fa:	e6a5      	b.n	8001348 <__aeabi_dadd+0x238>
 80015fc:	464a      	mov	r2, r9
 80015fe:	1abd      	subs	r5, r7, r2
 8001600:	42af      	cmp	r7, r5
 8001602:	4189      	sbcs	r1, r1
 8001604:	4662      	mov	r2, ip
 8001606:	4249      	negs	r1, r1
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	1a5b      	subs	r3, r3, r1
 800160c:	4698      	mov	r8, r3
 800160e:	4654      	mov	r4, sl
 8001610:	e5d1      	b.n	80011b6 <__aeabi_dadd+0xa6>
 8001612:	076c      	lsls	r4, r5, #29
 8001614:	08f9      	lsrs	r1, r7, #3
 8001616:	4321      	orrs	r1, r4
 8001618:	08eb      	lsrs	r3, r5, #3
 800161a:	0004      	movs	r4, r0
 800161c:	e69d      	b.n	800135a <__aeabi_dadd+0x24a>
 800161e:	464a      	mov	r2, r9
 8001620:	431a      	orrs	r2, r3
 8001622:	d175      	bne.n	8001710 <__aeabi_dadd+0x600>
 8001624:	4661      	mov	r1, ip
 8001626:	4339      	orrs	r1, r7
 8001628:	d114      	bne.n	8001654 <__aeabi_dadd+0x544>
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	2400      	movs	r4, #0
 800162e:	031b      	lsls	r3, r3, #12
 8001630:	e6bc      	b.n	80013ac <__aeabi_dadd+0x29c>
 8001632:	464a      	mov	r2, r9
 8001634:	1bd5      	subs	r5, r2, r7
 8001636:	45a9      	cmp	r9, r5
 8001638:	4189      	sbcs	r1, r1
 800163a:	4662      	mov	r2, ip
 800163c:	4249      	negs	r1, r1
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	1a5b      	subs	r3, r3, r1
 8001642:	4698      	mov	r8, r3
 8001644:	2601      	movs	r6, #1
 8001646:	e5ae      	b.n	80011a6 <__aeabi_dadd+0x96>
 8001648:	464a      	mov	r2, r9
 800164a:	08d1      	lsrs	r1, r2, #3
 800164c:	075a      	lsls	r2, r3, #29
 800164e:	4311      	orrs	r1, r2
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	e6a7      	b.n	80013a4 <__aeabi_dadd+0x294>
 8001654:	4663      	mov	r3, ip
 8001656:	08f9      	lsrs	r1, r7, #3
 8001658:	075a      	lsls	r2, r3, #29
 800165a:	4654      	mov	r4, sl
 800165c:	4311      	orrs	r1, r2
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	e6a0      	b.n	80013a4 <__aeabi_dadd+0x294>
 8001662:	464a      	mov	r2, r9
 8001664:	4313      	orrs	r3, r2
 8001666:	001d      	movs	r5, r3
 8001668:	1e6b      	subs	r3, r5, #1
 800166a:	419d      	sbcs	r5, r3
 800166c:	e6c7      	b.n	80013fe <__aeabi_dadd+0x2ee>
 800166e:	0014      	movs	r4, r2
 8001670:	001e      	movs	r6, r3
 8001672:	3c20      	subs	r4, #32
 8001674:	40e6      	lsrs	r6, r4
 8001676:	2a20      	cmp	r2, #32
 8001678:	d005      	beq.n	8001686 <__aeabi_dadd+0x576>
 800167a:	2440      	movs	r4, #64	; 0x40
 800167c:	1aa2      	subs	r2, r4, r2
 800167e:	4093      	lsls	r3, r2
 8001680:	464a      	mov	r2, r9
 8001682:	431a      	orrs	r2, r3
 8001684:	4691      	mov	r9, r2
 8001686:	464d      	mov	r5, r9
 8001688:	1e6b      	subs	r3, r5, #1
 800168a:	419d      	sbcs	r5, r3
 800168c:	4335      	orrs	r5, r6
 800168e:	e778      	b.n	8001582 <__aeabi_dadd+0x472>
 8001690:	464a      	mov	r2, r9
 8001692:	431a      	orrs	r2, r3
 8001694:	d000      	beq.n	8001698 <__aeabi_dadd+0x588>
 8001696:	e66b      	b.n	8001370 <__aeabi_dadd+0x260>
 8001698:	076b      	lsls	r3, r5, #29
 800169a:	08f9      	lsrs	r1, r7, #3
 800169c:	4319      	orrs	r1, r3
 800169e:	08eb      	lsrs	r3, r5, #3
 80016a0:	e680      	b.n	80013a4 <__aeabi_dadd+0x294>
 80016a2:	4661      	mov	r1, ip
 80016a4:	4339      	orrs	r1, r7
 80016a6:	d054      	beq.n	8001752 <__aeabi_dadd+0x642>
 80016a8:	4663      	mov	r3, ip
 80016aa:	08f9      	lsrs	r1, r7, #3
 80016ac:	075c      	lsls	r4, r3, #29
 80016ae:	4321      	orrs	r1, r4
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	0004      	movs	r4, r0
 80016b4:	e654      	b.n	8001360 <__aeabi_dadd+0x250>
 80016b6:	464a      	mov	r2, r9
 80016b8:	1abd      	subs	r5, r7, r2
 80016ba:	42af      	cmp	r7, r5
 80016bc:	4189      	sbcs	r1, r1
 80016be:	4662      	mov	r2, ip
 80016c0:	4249      	negs	r1, r1
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	1a5b      	subs	r3, r3, r1
 80016c6:	4698      	mov	r8, r3
 80016c8:	0004      	movs	r4, r0
 80016ca:	2601      	movs	r6, #1
 80016cc:	e56b      	b.n	80011a6 <__aeabi_dadd+0x96>
 80016ce:	464a      	mov	r2, r9
 80016d0:	1bd5      	subs	r5, r2, r7
 80016d2:	45a9      	cmp	r9, r5
 80016d4:	4189      	sbcs	r1, r1
 80016d6:	4662      	mov	r2, ip
 80016d8:	4249      	negs	r1, r1
 80016da:	1a9a      	subs	r2, r3, r2
 80016dc:	1a52      	subs	r2, r2, r1
 80016de:	4690      	mov	r8, r2
 80016e0:	0212      	lsls	r2, r2, #8
 80016e2:	d532      	bpl.n	800174a <__aeabi_dadd+0x63a>
 80016e4:	464a      	mov	r2, r9
 80016e6:	1abd      	subs	r5, r7, r2
 80016e8:	42af      	cmp	r7, r5
 80016ea:	4189      	sbcs	r1, r1
 80016ec:	4662      	mov	r2, ip
 80016ee:	4249      	negs	r1, r1
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	1a5b      	subs	r3, r3, r1
 80016f4:	4698      	mov	r8, r3
 80016f6:	0004      	movs	r4, r0
 80016f8:	e584      	b.n	8001204 <__aeabi_dadd+0xf4>
 80016fa:	4663      	mov	r3, ip
 80016fc:	08f9      	lsrs	r1, r7, #3
 80016fe:	075a      	lsls	r2, r3, #29
 8001700:	4311      	orrs	r1, r2
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	e64e      	b.n	80013a4 <__aeabi_dadd+0x294>
 8001706:	08f9      	lsrs	r1, r7, #3
 8001708:	0768      	lsls	r0, r5, #29
 800170a:	4301      	orrs	r1, r0
 800170c:	08eb      	lsrs	r3, r5, #3
 800170e:	e624      	b.n	800135a <__aeabi_dadd+0x24a>
 8001710:	4662      	mov	r2, ip
 8001712:	433a      	orrs	r2, r7
 8001714:	d100      	bne.n	8001718 <__aeabi_dadd+0x608>
 8001716:	e698      	b.n	800144a <__aeabi_dadd+0x33a>
 8001718:	464a      	mov	r2, r9
 800171a:	08d1      	lsrs	r1, r2, #3
 800171c:	075a      	lsls	r2, r3, #29
 800171e:	4311      	orrs	r1, r2
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	031b      	lsls	r3, r3, #12
 8001726:	421a      	tst	r2, r3
 8001728:	d008      	beq.n	800173c <__aeabi_dadd+0x62c>
 800172a:	4660      	mov	r0, ip
 800172c:	08c5      	lsrs	r5, r0, #3
 800172e:	421d      	tst	r5, r3
 8001730:	d104      	bne.n	800173c <__aeabi_dadd+0x62c>
 8001732:	4654      	mov	r4, sl
 8001734:	002a      	movs	r2, r5
 8001736:	08f9      	lsrs	r1, r7, #3
 8001738:	0743      	lsls	r3, r0, #29
 800173a:	4319      	orrs	r1, r3
 800173c:	0f4b      	lsrs	r3, r1, #29
 800173e:	00c9      	lsls	r1, r1, #3
 8001740:	075b      	lsls	r3, r3, #29
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	4319      	orrs	r1, r3
 8001746:	0013      	movs	r3, r2
 8001748:	e62c      	b.n	80013a4 <__aeabi_dadd+0x294>
 800174a:	4641      	mov	r1, r8
 800174c:	4329      	orrs	r1, r5
 800174e:	d000      	beq.n	8001752 <__aeabi_dadd+0x642>
 8001750:	e5fa      	b.n	8001348 <__aeabi_dadd+0x238>
 8001752:	2300      	movs	r3, #0
 8001754:	000a      	movs	r2, r1
 8001756:	2400      	movs	r4, #0
 8001758:	e602      	b.n	8001360 <__aeabi_dadd+0x250>
 800175a:	076b      	lsls	r3, r5, #29
 800175c:	08f9      	lsrs	r1, r7, #3
 800175e:	4319      	orrs	r1, r3
 8001760:	08eb      	lsrs	r3, r5, #3
 8001762:	e5fd      	b.n	8001360 <__aeabi_dadd+0x250>
 8001764:	4663      	mov	r3, ip
 8001766:	08f9      	lsrs	r1, r7, #3
 8001768:	075b      	lsls	r3, r3, #29
 800176a:	4319      	orrs	r1, r3
 800176c:	4663      	mov	r3, ip
 800176e:	0004      	movs	r4, r0
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	e617      	b.n	80013a4 <__aeabi_dadd+0x294>
 8001774:	003d      	movs	r5, r7
 8001776:	444d      	add	r5, r9
 8001778:	4463      	add	r3, ip
 800177a:	454d      	cmp	r5, r9
 800177c:	4189      	sbcs	r1, r1
 800177e:	4698      	mov	r8, r3
 8001780:	4249      	negs	r1, r1
 8001782:	4488      	add	r8, r1
 8001784:	4643      	mov	r3, r8
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	d400      	bmi.n	800178c <__aeabi_dadd+0x67c>
 800178a:	e5dd      	b.n	8001348 <__aeabi_dadd+0x238>
 800178c:	4642      	mov	r2, r8
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <__aeabi_dadd+0x6d0>)
 8001790:	2601      	movs	r6, #1
 8001792:	401a      	ands	r2, r3
 8001794:	4690      	mov	r8, r2
 8001796:	e5d7      	b.n	8001348 <__aeabi_dadd+0x238>
 8001798:	0010      	movs	r0, r2
 800179a:	001e      	movs	r6, r3
 800179c:	3820      	subs	r0, #32
 800179e:	40c6      	lsrs	r6, r0
 80017a0:	2a20      	cmp	r2, #32
 80017a2:	d005      	beq.n	80017b0 <__aeabi_dadd+0x6a0>
 80017a4:	2040      	movs	r0, #64	; 0x40
 80017a6:	1a82      	subs	r2, r0, r2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	464a      	mov	r2, r9
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4691      	mov	r9, r2
 80017b0:	464d      	mov	r5, r9
 80017b2:	1e6b      	subs	r3, r5, #1
 80017b4:	419d      	sbcs	r5, r3
 80017b6:	4335      	orrs	r5, r6
 80017b8:	e621      	b.n	80013fe <__aeabi_dadd+0x2ee>
 80017ba:	0002      	movs	r2, r0
 80017bc:	2300      	movs	r3, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	e540      	b.n	8001244 <__aeabi_dadd+0x134>
 80017c2:	464a      	mov	r2, r9
 80017c4:	19d5      	adds	r5, r2, r7
 80017c6:	42bd      	cmp	r5, r7
 80017c8:	4189      	sbcs	r1, r1
 80017ca:	4463      	add	r3, ip
 80017cc:	4698      	mov	r8, r3
 80017ce:	4249      	negs	r1, r1
 80017d0:	4488      	add	r8, r1
 80017d2:	e5b3      	b.n	800133c <__aeabi_dadd+0x22c>
 80017d4:	2100      	movs	r1, #0
 80017d6:	4a01      	ldr	r2, [pc, #4]	; (80017dc <__aeabi_dadd+0x6cc>)
 80017d8:	000b      	movs	r3, r1
 80017da:	e533      	b.n	8001244 <__aeabi_dadd+0x134>
 80017dc:	000007ff 	.word	0x000007ff
 80017e0:	ff7fffff 	.word	0xff7fffff

080017e4 <__aeabi_ddiv>:
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	4657      	mov	r7, sl
 80017e8:	464e      	mov	r6, r9
 80017ea:	4645      	mov	r5, r8
 80017ec:	46de      	mov	lr, fp
 80017ee:	b5e0      	push	{r5, r6, r7, lr}
 80017f0:	4681      	mov	r9, r0
 80017f2:	0005      	movs	r5, r0
 80017f4:	030c      	lsls	r4, r1, #12
 80017f6:	0048      	lsls	r0, r1, #1
 80017f8:	4692      	mov	sl, r2
 80017fa:	001f      	movs	r7, r3
 80017fc:	b085      	sub	sp, #20
 80017fe:	0b24      	lsrs	r4, r4, #12
 8001800:	0d40      	lsrs	r0, r0, #21
 8001802:	0fce      	lsrs	r6, r1, #31
 8001804:	2800      	cmp	r0, #0
 8001806:	d059      	beq.n	80018bc <__aeabi_ddiv+0xd8>
 8001808:	4b87      	ldr	r3, [pc, #540]	; (8001a28 <__aeabi_ddiv+0x244>)
 800180a:	4298      	cmp	r0, r3
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x2c>
 800180e:	e098      	b.n	8001942 <__aeabi_ddiv+0x15e>
 8001810:	0f6b      	lsrs	r3, r5, #29
 8001812:	00e4      	lsls	r4, r4, #3
 8001814:	431c      	orrs	r4, r3
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	4323      	orrs	r3, r4
 800181c:	4698      	mov	r8, r3
 800181e:	4b83      	ldr	r3, [pc, #524]	; (8001a2c <__aeabi_ddiv+0x248>)
 8001820:	00ed      	lsls	r5, r5, #3
 8001822:	469b      	mov	fp, r3
 8001824:	2300      	movs	r3, #0
 8001826:	4699      	mov	r9, r3
 8001828:	4483      	add	fp, r0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	033c      	lsls	r4, r7, #12
 800182e:	007b      	lsls	r3, r7, #1
 8001830:	4650      	mov	r0, sl
 8001832:	0b24      	lsrs	r4, r4, #12
 8001834:	0d5b      	lsrs	r3, r3, #21
 8001836:	0fff      	lsrs	r7, r7, #31
 8001838:	2b00      	cmp	r3, #0
 800183a:	d067      	beq.n	800190c <__aeabi_ddiv+0x128>
 800183c:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <__aeabi_ddiv+0x244>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d018      	beq.n	8001874 <__aeabi_ddiv+0x90>
 8001842:	497a      	ldr	r1, [pc, #488]	; (8001a2c <__aeabi_ddiv+0x248>)
 8001844:	0f42      	lsrs	r2, r0, #29
 8001846:	468c      	mov	ip, r1
 8001848:	00e4      	lsls	r4, r4, #3
 800184a:	4659      	mov	r1, fp
 800184c:	4314      	orrs	r4, r2
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	4463      	add	r3, ip
 8001852:	0412      	lsls	r2, r2, #16
 8001854:	1acb      	subs	r3, r1, r3
 8001856:	4314      	orrs	r4, r2
 8001858:	469b      	mov	fp, r3
 800185a:	00c2      	lsls	r2, r0, #3
 800185c:	2000      	movs	r0, #0
 800185e:	0033      	movs	r3, r6
 8001860:	407b      	eors	r3, r7
 8001862:	469a      	mov	sl, r3
 8001864:	464b      	mov	r3, r9
 8001866:	2b0f      	cmp	r3, #15
 8001868:	d900      	bls.n	800186c <__aeabi_ddiv+0x88>
 800186a:	e0ef      	b.n	8001a4c <__aeabi_ddiv+0x268>
 800186c:	4970      	ldr	r1, [pc, #448]	; (8001a30 <__aeabi_ddiv+0x24c>)
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	58cb      	ldr	r3, [r1, r3]
 8001872:	469f      	mov	pc, r3
 8001874:	4b6f      	ldr	r3, [pc, #444]	; (8001a34 <__aeabi_ddiv+0x250>)
 8001876:	4652      	mov	r2, sl
 8001878:	469c      	mov	ip, r3
 800187a:	4322      	orrs	r2, r4
 800187c:	44e3      	add	fp, ip
 800187e:	2a00      	cmp	r2, #0
 8001880:	d000      	beq.n	8001884 <__aeabi_ddiv+0xa0>
 8001882:	e095      	b.n	80019b0 <__aeabi_ddiv+0x1cc>
 8001884:	4649      	mov	r1, r9
 8001886:	2302      	movs	r3, #2
 8001888:	4319      	orrs	r1, r3
 800188a:	4689      	mov	r9, r1
 800188c:	2400      	movs	r4, #0
 800188e:	2002      	movs	r0, #2
 8001890:	e7e5      	b.n	800185e <__aeabi_ddiv+0x7a>
 8001892:	2300      	movs	r3, #0
 8001894:	2400      	movs	r4, #0
 8001896:	2500      	movs	r5, #0
 8001898:	4652      	mov	r2, sl
 800189a:	051b      	lsls	r3, r3, #20
 800189c:	4323      	orrs	r3, r4
 800189e:	07d2      	lsls	r2, r2, #31
 80018a0:	4313      	orrs	r3, r2
 80018a2:	0028      	movs	r0, r5
 80018a4:	0019      	movs	r1, r3
 80018a6:	b005      	add	sp, #20
 80018a8:	bcf0      	pop	{r4, r5, r6, r7}
 80018aa:	46bb      	mov	fp, r7
 80018ac:	46b2      	mov	sl, r6
 80018ae:	46a9      	mov	r9, r5
 80018b0:	46a0      	mov	r8, r4
 80018b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b4:	2400      	movs	r4, #0
 80018b6:	2500      	movs	r5, #0
 80018b8:	4b5b      	ldr	r3, [pc, #364]	; (8001a28 <__aeabi_ddiv+0x244>)
 80018ba:	e7ed      	b.n	8001898 <__aeabi_ddiv+0xb4>
 80018bc:	464b      	mov	r3, r9
 80018be:	4323      	orrs	r3, r4
 80018c0:	4698      	mov	r8, r3
 80018c2:	d100      	bne.n	80018c6 <__aeabi_ddiv+0xe2>
 80018c4:	e089      	b.n	80019da <__aeabi_ddiv+0x1f6>
 80018c6:	2c00      	cmp	r4, #0
 80018c8:	d100      	bne.n	80018cc <__aeabi_ddiv+0xe8>
 80018ca:	e1e0      	b.n	8001c8e <__aeabi_ddiv+0x4aa>
 80018cc:	0020      	movs	r0, r4
 80018ce:	f001 fa4b 	bl	8002d68 <__clzsi2>
 80018d2:	0001      	movs	r1, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	390b      	subs	r1, #11
 80018d8:	231d      	movs	r3, #29
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	4649      	mov	r1, r9
 80018de:	0010      	movs	r0, r2
 80018e0:	40d9      	lsrs	r1, r3
 80018e2:	3808      	subs	r0, #8
 80018e4:	4084      	lsls	r4, r0
 80018e6:	000b      	movs	r3, r1
 80018e8:	464d      	mov	r5, r9
 80018ea:	4323      	orrs	r3, r4
 80018ec:	4698      	mov	r8, r3
 80018ee:	4085      	lsls	r5, r0
 80018f0:	4851      	ldr	r0, [pc, #324]	; (8001a38 <__aeabi_ddiv+0x254>)
 80018f2:	033c      	lsls	r4, r7, #12
 80018f4:	1a83      	subs	r3, r0, r2
 80018f6:	469b      	mov	fp, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	4699      	mov	r9, r3
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	007b      	lsls	r3, r7, #1
 8001900:	4650      	mov	r0, sl
 8001902:	0b24      	lsrs	r4, r4, #12
 8001904:	0d5b      	lsrs	r3, r3, #21
 8001906:	0fff      	lsrs	r7, r7, #31
 8001908:	2b00      	cmp	r3, #0
 800190a:	d197      	bne.n	800183c <__aeabi_ddiv+0x58>
 800190c:	4652      	mov	r2, sl
 800190e:	4322      	orrs	r2, r4
 8001910:	d055      	beq.n	80019be <__aeabi_ddiv+0x1da>
 8001912:	2c00      	cmp	r4, #0
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x134>
 8001916:	e1ca      	b.n	8001cae <__aeabi_ddiv+0x4ca>
 8001918:	0020      	movs	r0, r4
 800191a:	f001 fa25 	bl	8002d68 <__clzsi2>
 800191e:	0002      	movs	r2, r0
 8001920:	3a0b      	subs	r2, #11
 8001922:	231d      	movs	r3, #29
 8001924:	0001      	movs	r1, r0
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	4652      	mov	r2, sl
 800192a:	3908      	subs	r1, #8
 800192c:	40da      	lsrs	r2, r3
 800192e:	408c      	lsls	r4, r1
 8001930:	4314      	orrs	r4, r2
 8001932:	4652      	mov	r2, sl
 8001934:	408a      	lsls	r2, r1
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <__aeabi_ddiv+0x258>)
 8001938:	4458      	add	r0, fp
 800193a:	469b      	mov	fp, r3
 800193c:	4483      	add	fp, r0
 800193e:	2000      	movs	r0, #0
 8001940:	e78d      	b.n	800185e <__aeabi_ddiv+0x7a>
 8001942:	464b      	mov	r3, r9
 8001944:	4323      	orrs	r3, r4
 8001946:	4698      	mov	r8, r3
 8001948:	d140      	bne.n	80019cc <__aeabi_ddiv+0x1e8>
 800194a:	2308      	movs	r3, #8
 800194c:	4699      	mov	r9, r3
 800194e:	3b06      	subs	r3, #6
 8001950:	2500      	movs	r5, #0
 8001952:	4683      	mov	fp, r0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	e769      	b.n	800182c <__aeabi_ddiv+0x48>
 8001958:	46b2      	mov	sl, r6
 800195a:	9b00      	ldr	r3, [sp, #0]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d0a9      	beq.n	80018b4 <__aeabi_ddiv+0xd0>
 8001960:	2b03      	cmp	r3, #3
 8001962:	d100      	bne.n	8001966 <__aeabi_ddiv+0x182>
 8001964:	e211      	b.n	8001d8a <__aeabi_ddiv+0x5a6>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d093      	beq.n	8001892 <__aeabi_ddiv+0xae>
 800196a:	4a35      	ldr	r2, [pc, #212]	; (8001a40 <__aeabi_ddiv+0x25c>)
 800196c:	445a      	add	r2, fp
 800196e:	2a00      	cmp	r2, #0
 8001970:	dc00      	bgt.n	8001974 <__aeabi_ddiv+0x190>
 8001972:	e13c      	b.n	8001bee <__aeabi_ddiv+0x40a>
 8001974:	076b      	lsls	r3, r5, #29
 8001976:	d000      	beq.n	800197a <__aeabi_ddiv+0x196>
 8001978:	e1a7      	b.n	8001cca <__aeabi_ddiv+0x4e6>
 800197a:	08ed      	lsrs	r5, r5, #3
 800197c:	4643      	mov	r3, r8
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	d506      	bpl.n	8001990 <__aeabi_ddiv+0x1ac>
 8001982:	4642      	mov	r2, r8
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <__aeabi_ddiv+0x260>)
 8001986:	401a      	ands	r2, r3
 8001988:	4690      	mov	r8, r2
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	445a      	add	r2, fp
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <__aeabi_ddiv+0x264>)
 8001992:	429a      	cmp	r2, r3
 8001994:	dc8e      	bgt.n	80018b4 <__aeabi_ddiv+0xd0>
 8001996:	4643      	mov	r3, r8
 8001998:	0552      	lsls	r2, r2, #21
 800199a:	0758      	lsls	r0, r3, #29
 800199c:	025c      	lsls	r4, r3, #9
 800199e:	4305      	orrs	r5, r0
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	0d53      	lsrs	r3, r2, #21
 80019a4:	e778      	b.n	8001898 <__aeabi_ddiv+0xb4>
 80019a6:	46ba      	mov	sl, r7
 80019a8:	46a0      	mov	r8, r4
 80019aa:	0015      	movs	r5, r2
 80019ac:	9000      	str	r0, [sp, #0]
 80019ae:	e7d4      	b.n	800195a <__aeabi_ddiv+0x176>
 80019b0:	464a      	mov	r2, r9
 80019b2:	2303      	movs	r3, #3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	4691      	mov	r9, r2
 80019b8:	2003      	movs	r0, #3
 80019ba:	4652      	mov	r2, sl
 80019bc:	e74f      	b.n	800185e <__aeabi_ddiv+0x7a>
 80019be:	4649      	mov	r1, r9
 80019c0:	2301      	movs	r3, #1
 80019c2:	4319      	orrs	r1, r3
 80019c4:	4689      	mov	r9, r1
 80019c6:	2400      	movs	r4, #0
 80019c8:	2001      	movs	r0, #1
 80019ca:	e748      	b.n	800185e <__aeabi_ddiv+0x7a>
 80019cc:	230c      	movs	r3, #12
 80019ce:	4699      	mov	r9, r3
 80019d0:	3b09      	subs	r3, #9
 80019d2:	46a0      	mov	r8, r4
 80019d4:	4683      	mov	fp, r0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	e728      	b.n	800182c <__aeabi_ddiv+0x48>
 80019da:	2304      	movs	r3, #4
 80019dc:	4699      	mov	r9, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	469b      	mov	fp, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	2500      	movs	r5, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	e720      	b.n	800182c <__aeabi_ddiv+0x48>
 80019ea:	2300      	movs	r3, #0
 80019ec:	2480      	movs	r4, #128	; 0x80
 80019ee:	469a      	mov	sl, r3
 80019f0:	2500      	movs	r5, #0
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <__aeabi_ddiv+0x244>)
 80019f4:	0324      	lsls	r4, r4, #12
 80019f6:	e74f      	b.n	8001898 <__aeabi_ddiv+0xb4>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	4641      	mov	r1, r8
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	4219      	tst	r1, r3
 8001a00:	d008      	beq.n	8001a14 <__aeabi_ddiv+0x230>
 8001a02:	421c      	tst	r4, r3
 8001a04:	d106      	bne.n	8001a14 <__aeabi_ddiv+0x230>
 8001a06:	431c      	orrs	r4, r3
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	46ba      	mov	sl, r7
 8001a0c:	0015      	movs	r5, r2
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <__aeabi_ddiv+0x244>)
 8001a10:	0b24      	lsrs	r4, r4, #12
 8001a12:	e741      	b.n	8001898 <__aeabi_ddiv+0xb4>
 8001a14:	2480      	movs	r4, #128	; 0x80
 8001a16:	4643      	mov	r3, r8
 8001a18:	0324      	lsls	r4, r4, #12
 8001a1a:	431c      	orrs	r4, r3
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	4b01      	ldr	r3, [pc, #4]	; (8001a28 <__aeabi_ddiv+0x244>)
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	e738      	b.n	8001898 <__aeabi_ddiv+0xb4>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	fffffc01 	.word	0xfffffc01
 8001a30:	0800aefc 	.word	0x0800aefc
 8001a34:	fffff801 	.word	0xfffff801
 8001a38:	fffffc0d 	.word	0xfffffc0d
 8001a3c:	000003f3 	.word	0x000003f3
 8001a40:	000003ff 	.word	0x000003ff
 8001a44:	feffffff 	.word	0xfeffffff
 8001a48:	000007fe 	.word	0x000007fe
 8001a4c:	4544      	cmp	r4, r8
 8001a4e:	d200      	bcs.n	8001a52 <__aeabi_ddiv+0x26e>
 8001a50:	e116      	b.n	8001c80 <__aeabi_ddiv+0x49c>
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x272>
 8001a54:	e111      	b.n	8001c7a <__aeabi_ddiv+0x496>
 8001a56:	2301      	movs	r3, #1
 8001a58:	425b      	negs	r3, r3
 8001a5a:	469c      	mov	ip, r3
 8001a5c:	002e      	movs	r6, r5
 8001a5e:	4640      	mov	r0, r8
 8001a60:	2500      	movs	r5, #0
 8001a62:	44e3      	add	fp, ip
 8001a64:	0223      	lsls	r3, r4, #8
 8001a66:	0e14      	lsrs	r4, r2, #24
 8001a68:	431c      	orrs	r4, r3
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	0423      	lsls	r3, r4, #16
 8001a70:	0c1f      	lsrs	r7, r3, #16
 8001a72:	0212      	lsls	r2, r2, #8
 8001a74:	4649      	mov	r1, r9
 8001a76:	9200      	str	r2, [sp, #0]
 8001a78:	9701      	str	r7, [sp, #4]
 8001a7a:	f7fe fbd5 	bl	8000228 <__aeabi_uidivmod>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	437a      	muls	r2, r7
 8001a82:	040b      	lsls	r3, r1, #16
 8001a84:	0c31      	lsrs	r1, r6, #16
 8001a86:	4680      	mov	r8, r0
 8001a88:	4319      	orrs	r1, r3
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d90b      	bls.n	8001aa6 <__aeabi_ddiv+0x2c2>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	425b      	negs	r3, r3
 8001a92:	469c      	mov	ip, r3
 8001a94:	1909      	adds	r1, r1, r4
 8001a96:	44e0      	add	r8, ip
 8001a98:	428c      	cmp	r4, r1
 8001a9a:	d804      	bhi.n	8001aa6 <__aeabi_ddiv+0x2c2>
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	d902      	bls.n	8001aa6 <__aeabi_ddiv+0x2c2>
 8001aa0:	1e83      	subs	r3, r0, #2
 8001aa2:	4698      	mov	r8, r3
 8001aa4:	1909      	adds	r1, r1, r4
 8001aa6:	1a88      	subs	r0, r1, r2
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	f7fe fbbd 	bl	8000228 <__aeabi_uidivmod>
 8001aae:	0409      	lsls	r1, r1, #16
 8001ab0:	468c      	mov	ip, r1
 8001ab2:	0431      	lsls	r1, r6, #16
 8001ab4:	4666      	mov	r6, ip
 8001ab6:	9a01      	ldr	r2, [sp, #4]
 8001ab8:	0c09      	lsrs	r1, r1, #16
 8001aba:	4342      	muls	r2, r0
 8001abc:	0003      	movs	r3, r0
 8001abe:	4331      	orrs	r1, r6
 8001ac0:	428a      	cmp	r2, r1
 8001ac2:	d904      	bls.n	8001ace <__aeabi_ddiv+0x2ea>
 8001ac4:	1909      	adds	r1, r1, r4
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	428c      	cmp	r4, r1
 8001aca:	d800      	bhi.n	8001ace <__aeabi_ddiv+0x2ea>
 8001acc:	e111      	b.n	8001cf2 <__aeabi_ddiv+0x50e>
 8001ace:	1a89      	subs	r1, r1, r2
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	9e00      	ldr	r6, [sp, #0]
 8001ad4:	0412      	lsls	r2, r2, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	0c33      	lsrs	r3, r6, #16
 8001ada:	001f      	movs	r7, r3
 8001adc:	0c10      	lsrs	r0, r2, #16
 8001ade:	4690      	mov	r8, r2
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	0413      	lsls	r3, r2, #16
 8001ae4:	0432      	lsls	r2, r6, #16
 8001ae6:	0c16      	lsrs	r6, r2, #16
 8001ae8:	0032      	movs	r2, r6
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	435a      	muls	r2, r3
 8001aee:	9603      	str	r6, [sp, #12]
 8001af0:	437b      	muls	r3, r7
 8001af2:	4346      	muls	r6, r0
 8001af4:	4378      	muls	r0, r7
 8001af6:	0c17      	lsrs	r7, r2, #16
 8001af8:	46bc      	mov	ip, r7
 8001afa:	199b      	adds	r3, r3, r6
 8001afc:	4463      	add	r3, ip
 8001afe:	429e      	cmp	r6, r3
 8001b00:	d903      	bls.n	8001b0a <__aeabi_ddiv+0x326>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	0276      	lsls	r6, r6, #9
 8001b06:	46b4      	mov	ip, r6
 8001b08:	4460      	add	r0, ip
 8001b0a:	0c1e      	lsrs	r6, r3, #16
 8001b0c:	1830      	adds	r0, r6, r0
 8001b0e:	0416      	lsls	r6, r2, #16
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	0c36      	lsrs	r6, r6, #16
 8001b14:	199e      	adds	r6, r3, r6
 8001b16:	4281      	cmp	r1, r0
 8001b18:	d200      	bcs.n	8001b1c <__aeabi_ddiv+0x338>
 8001b1a:	e09c      	b.n	8001c56 <__aeabi_ddiv+0x472>
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_ddiv+0x33c>
 8001b1e:	e097      	b.n	8001c50 <__aeabi_ddiv+0x46c>
 8001b20:	1bae      	subs	r6, r5, r6
 8001b22:	1a09      	subs	r1, r1, r0
 8001b24:	42b5      	cmp	r5, r6
 8001b26:	4180      	sbcs	r0, r0
 8001b28:	4240      	negs	r0, r0
 8001b2a:	1a08      	subs	r0, r1, r0
 8001b2c:	4284      	cmp	r4, r0
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_ddiv+0x34e>
 8001b30:	e111      	b.n	8001d56 <__aeabi_ddiv+0x572>
 8001b32:	4649      	mov	r1, r9
 8001b34:	f7fe fb78 	bl	8000228 <__aeabi_uidivmod>
 8001b38:	9a01      	ldr	r2, [sp, #4]
 8001b3a:	040b      	lsls	r3, r1, #16
 8001b3c:	4342      	muls	r2, r0
 8001b3e:	0c31      	lsrs	r1, r6, #16
 8001b40:	0005      	movs	r5, r0
 8001b42:	4319      	orrs	r1, r3
 8001b44:	428a      	cmp	r2, r1
 8001b46:	d907      	bls.n	8001b58 <__aeabi_ddiv+0x374>
 8001b48:	1909      	adds	r1, r1, r4
 8001b4a:	3d01      	subs	r5, #1
 8001b4c:	428c      	cmp	r4, r1
 8001b4e:	d803      	bhi.n	8001b58 <__aeabi_ddiv+0x374>
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d901      	bls.n	8001b58 <__aeabi_ddiv+0x374>
 8001b54:	1e85      	subs	r5, r0, #2
 8001b56:	1909      	adds	r1, r1, r4
 8001b58:	1a88      	subs	r0, r1, r2
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	f7fe fb64 	bl	8000228 <__aeabi_uidivmod>
 8001b60:	0409      	lsls	r1, r1, #16
 8001b62:	468c      	mov	ip, r1
 8001b64:	0431      	lsls	r1, r6, #16
 8001b66:	4666      	mov	r6, ip
 8001b68:	9a01      	ldr	r2, [sp, #4]
 8001b6a:	0c09      	lsrs	r1, r1, #16
 8001b6c:	4342      	muls	r2, r0
 8001b6e:	0003      	movs	r3, r0
 8001b70:	4331      	orrs	r1, r6
 8001b72:	428a      	cmp	r2, r1
 8001b74:	d907      	bls.n	8001b86 <__aeabi_ddiv+0x3a2>
 8001b76:	1909      	adds	r1, r1, r4
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	428c      	cmp	r4, r1
 8001b7c:	d803      	bhi.n	8001b86 <__aeabi_ddiv+0x3a2>
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	d901      	bls.n	8001b86 <__aeabi_ddiv+0x3a2>
 8001b82:	1e83      	subs	r3, r0, #2
 8001b84:	1909      	adds	r1, r1, r4
 8001b86:	9e03      	ldr	r6, [sp, #12]
 8001b88:	1a89      	subs	r1, r1, r2
 8001b8a:	0032      	movs	r2, r6
 8001b8c:	042d      	lsls	r5, r5, #16
 8001b8e:	431d      	orrs	r5, r3
 8001b90:	9f02      	ldr	r7, [sp, #8]
 8001b92:	042b      	lsls	r3, r5, #16
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	435a      	muls	r2, r3
 8001b98:	437b      	muls	r3, r7
 8001b9a:	469c      	mov	ip, r3
 8001b9c:	0c28      	lsrs	r0, r5, #16
 8001b9e:	4346      	muls	r6, r0
 8001ba0:	0c13      	lsrs	r3, r2, #16
 8001ba2:	44b4      	add	ip, r6
 8001ba4:	4463      	add	r3, ip
 8001ba6:	4378      	muls	r0, r7
 8001ba8:	429e      	cmp	r6, r3
 8001baa:	d903      	bls.n	8001bb4 <__aeabi_ddiv+0x3d0>
 8001bac:	2680      	movs	r6, #128	; 0x80
 8001bae:	0276      	lsls	r6, r6, #9
 8001bb0:	46b4      	mov	ip, r6
 8001bb2:	4460      	add	r0, ip
 8001bb4:	0c1e      	lsrs	r6, r3, #16
 8001bb6:	0412      	lsls	r2, r2, #16
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	0c12      	lsrs	r2, r2, #16
 8001bbc:	1830      	adds	r0, r6, r0
 8001bbe:	189b      	adds	r3, r3, r2
 8001bc0:	4281      	cmp	r1, r0
 8001bc2:	d306      	bcc.n	8001bd2 <__aeabi_ddiv+0x3ee>
 8001bc4:	d002      	beq.n	8001bcc <__aeabi_ddiv+0x3e8>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	431d      	orrs	r5, r3
 8001bca:	e6ce      	b.n	800196a <__aeabi_ddiv+0x186>
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x3ee>
 8001bd0:	e6cb      	b.n	800196a <__aeabi_ddiv+0x186>
 8001bd2:	1861      	adds	r1, r4, r1
 8001bd4:	1e6e      	subs	r6, r5, #1
 8001bd6:	42a1      	cmp	r1, r4
 8001bd8:	d200      	bcs.n	8001bdc <__aeabi_ddiv+0x3f8>
 8001bda:	e0a4      	b.n	8001d26 <__aeabi_ddiv+0x542>
 8001bdc:	4281      	cmp	r1, r0
 8001bde:	d200      	bcs.n	8001be2 <__aeabi_ddiv+0x3fe>
 8001be0:	e0c9      	b.n	8001d76 <__aeabi_ddiv+0x592>
 8001be2:	d100      	bne.n	8001be6 <__aeabi_ddiv+0x402>
 8001be4:	e0d9      	b.n	8001d9a <__aeabi_ddiv+0x5b6>
 8001be6:	0035      	movs	r5, r6
 8001be8:	e7ed      	b.n	8001bc6 <__aeabi_ddiv+0x3e2>
 8001bea:	2501      	movs	r5, #1
 8001bec:	426d      	negs	r5, r5
 8001bee:	2101      	movs	r1, #1
 8001bf0:	1a89      	subs	r1, r1, r2
 8001bf2:	2938      	cmp	r1, #56	; 0x38
 8001bf4:	dd00      	ble.n	8001bf8 <__aeabi_ddiv+0x414>
 8001bf6:	e64c      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001bf8:	291f      	cmp	r1, #31
 8001bfa:	dc00      	bgt.n	8001bfe <__aeabi_ddiv+0x41a>
 8001bfc:	e07f      	b.n	8001cfe <__aeabi_ddiv+0x51a>
 8001bfe:	231f      	movs	r3, #31
 8001c00:	425b      	negs	r3, r3
 8001c02:	1a9a      	subs	r2, r3, r2
 8001c04:	4643      	mov	r3, r8
 8001c06:	40d3      	lsrs	r3, r2
 8001c08:	2920      	cmp	r1, #32
 8001c0a:	d004      	beq.n	8001c16 <__aeabi_ddiv+0x432>
 8001c0c:	4644      	mov	r4, r8
 8001c0e:	4a65      	ldr	r2, [pc, #404]	; (8001da4 <__aeabi_ddiv+0x5c0>)
 8001c10:	445a      	add	r2, fp
 8001c12:	4094      	lsls	r4, r2
 8001c14:	4325      	orrs	r5, r4
 8001c16:	1e6a      	subs	r2, r5, #1
 8001c18:	4195      	sbcs	r5, r2
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	432b      	orrs	r3, r5
 8001c1e:	0015      	movs	r5, r2
 8001c20:	2400      	movs	r4, #0
 8001c22:	401d      	ands	r5, r3
 8001c24:	421a      	tst	r2, r3
 8001c26:	d100      	bne.n	8001c2a <__aeabi_ddiv+0x446>
 8001c28:	e0a1      	b.n	8001d6e <__aeabi_ddiv+0x58a>
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	401a      	ands	r2, r3
 8001c30:	2a04      	cmp	r2, #4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x452>
 8001c34:	e098      	b.n	8001d68 <__aeabi_ddiv+0x584>
 8001c36:	1d1a      	adds	r2, r3, #4
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	419b      	sbcs	r3, r3
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	18e4      	adds	r4, r4, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	0222      	lsls	r2, r4, #8
 8001c44:	d400      	bmi.n	8001c48 <__aeabi_ddiv+0x464>
 8001c46:	e08f      	b.n	8001d68 <__aeabi_ddiv+0x584>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	2400      	movs	r4, #0
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	e623      	b.n	8001898 <__aeabi_ddiv+0xb4>
 8001c50:	42b5      	cmp	r5, r6
 8001c52:	d300      	bcc.n	8001c56 <__aeabi_ddiv+0x472>
 8001c54:	e764      	b.n	8001b20 <__aeabi_ddiv+0x33c>
 8001c56:	4643      	mov	r3, r8
 8001c58:	1e5a      	subs	r2, r3, #1
 8001c5a:	9b00      	ldr	r3, [sp, #0]
 8001c5c:	469c      	mov	ip, r3
 8001c5e:	4465      	add	r5, ip
 8001c60:	001f      	movs	r7, r3
 8001c62:	429d      	cmp	r5, r3
 8001c64:	419b      	sbcs	r3, r3
 8001c66:	425b      	negs	r3, r3
 8001c68:	191b      	adds	r3, r3, r4
 8001c6a:	18c9      	adds	r1, r1, r3
 8001c6c:	428c      	cmp	r4, r1
 8001c6e:	d23a      	bcs.n	8001ce6 <__aeabi_ddiv+0x502>
 8001c70:	4288      	cmp	r0, r1
 8001c72:	d863      	bhi.n	8001d3c <__aeabi_ddiv+0x558>
 8001c74:	d060      	beq.n	8001d38 <__aeabi_ddiv+0x554>
 8001c76:	4690      	mov	r8, r2
 8001c78:	e752      	b.n	8001b20 <__aeabi_ddiv+0x33c>
 8001c7a:	42aa      	cmp	r2, r5
 8001c7c:	d900      	bls.n	8001c80 <__aeabi_ddiv+0x49c>
 8001c7e:	e6ea      	b.n	8001a56 <__aeabi_ddiv+0x272>
 8001c80:	4643      	mov	r3, r8
 8001c82:	07de      	lsls	r6, r3, #31
 8001c84:	0858      	lsrs	r0, r3, #1
 8001c86:	086b      	lsrs	r3, r5, #1
 8001c88:	431e      	orrs	r6, r3
 8001c8a:	07ed      	lsls	r5, r5, #31
 8001c8c:	e6ea      	b.n	8001a64 <__aeabi_ddiv+0x280>
 8001c8e:	4648      	mov	r0, r9
 8001c90:	f001 f86a 	bl	8002d68 <__clzsi2>
 8001c94:	0001      	movs	r1, r0
 8001c96:	0002      	movs	r2, r0
 8001c98:	3115      	adds	r1, #21
 8001c9a:	3220      	adds	r2, #32
 8001c9c:	291c      	cmp	r1, #28
 8001c9e:	dc00      	bgt.n	8001ca2 <__aeabi_ddiv+0x4be>
 8001ca0:	e61a      	b.n	80018d8 <__aeabi_ddiv+0xf4>
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	3808      	subs	r0, #8
 8001ca6:	4083      	lsls	r3, r0
 8001ca8:	2500      	movs	r5, #0
 8001caa:	4698      	mov	r8, r3
 8001cac:	e620      	b.n	80018f0 <__aeabi_ddiv+0x10c>
 8001cae:	f001 f85b 	bl	8002d68 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	3215      	adds	r2, #21
 8001cb8:	3020      	adds	r0, #32
 8001cba:	2a1c      	cmp	r2, #28
 8001cbc:	dc00      	bgt.n	8001cc0 <__aeabi_ddiv+0x4dc>
 8001cbe:	e630      	b.n	8001922 <__aeabi_ddiv+0x13e>
 8001cc0:	4654      	mov	r4, sl
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	409c      	lsls	r4, r3
 8001cc8:	e635      	b.n	8001936 <__aeabi_ddiv+0x152>
 8001cca:	230f      	movs	r3, #15
 8001ccc:	402b      	ands	r3, r5
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_ddiv+0x4f0>
 8001cd2:	e652      	b.n	800197a <__aeabi_ddiv+0x196>
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	42ab      	cmp	r3, r5
 8001cda:	419b      	sbcs	r3, r3
 8001cdc:	3504      	adds	r5, #4
 8001cde:	425b      	negs	r3, r3
 8001ce0:	08ed      	lsrs	r5, r5, #3
 8001ce2:	4498      	add	r8, r3
 8001ce4:	e64a      	b.n	800197c <__aeabi_ddiv+0x198>
 8001ce6:	428c      	cmp	r4, r1
 8001ce8:	d1c5      	bne.n	8001c76 <__aeabi_ddiv+0x492>
 8001cea:	42af      	cmp	r7, r5
 8001cec:	d9c0      	bls.n	8001c70 <__aeabi_ddiv+0x48c>
 8001cee:	4690      	mov	r8, r2
 8001cf0:	e716      	b.n	8001b20 <__aeabi_ddiv+0x33c>
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d800      	bhi.n	8001cf8 <__aeabi_ddiv+0x514>
 8001cf6:	e6ea      	b.n	8001ace <__aeabi_ddiv+0x2ea>
 8001cf8:	1e83      	subs	r3, r0, #2
 8001cfa:	1909      	adds	r1, r1, r4
 8001cfc:	e6e7      	b.n	8001ace <__aeabi_ddiv+0x2ea>
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <__aeabi_ddiv+0x5c4>)
 8001d00:	0028      	movs	r0, r5
 8001d02:	445a      	add	r2, fp
 8001d04:	4643      	mov	r3, r8
 8001d06:	4095      	lsls	r5, r2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	40c8      	lsrs	r0, r1
 8001d0c:	1e6a      	subs	r2, r5, #1
 8001d0e:	4195      	sbcs	r5, r2
 8001d10:	4644      	mov	r4, r8
 8001d12:	4303      	orrs	r3, r0
 8001d14:	432b      	orrs	r3, r5
 8001d16:	40cc      	lsrs	r4, r1
 8001d18:	075a      	lsls	r2, r3, #29
 8001d1a:	d092      	beq.n	8001c42 <__aeabi_ddiv+0x45e>
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	401a      	ands	r2, r3
 8001d20:	2a04      	cmp	r2, #4
 8001d22:	d188      	bne.n	8001c36 <__aeabi_ddiv+0x452>
 8001d24:	e78d      	b.n	8001c42 <__aeabi_ddiv+0x45e>
 8001d26:	0035      	movs	r5, r6
 8001d28:	4281      	cmp	r1, r0
 8001d2a:	d000      	beq.n	8001d2e <__aeabi_ddiv+0x54a>
 8001d2c:	e74b      	b.n	8001bc6 <__aeabi_ddiv+0x3e2>
 8001d2e:	9a00      	ldr	r2, [sp, #0]
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d000      	beq.n	8001d36 <__aeabi_ddiv+0x552>
 8001d34:	e747      	b.n	8001bc6 <__aeabi_ddiv+0x3e2>
 8001d36:	e618      	b.n	800196a <__aeabi_ddiv+0x186>
 8001d38:	42ae      	cmp	r6, r5
 8001d3a:	d99c      	bls.n	8001c76 <__aeabi_ddiv+0x492>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	425b      	negs	r3, r3
 8001d40:	469c      	mov	ip, r3
 8001d42:	9b00      	ldr	r3, [sp, #0]
 8001d44:	44e0      	add	r8, ip
 8001d46:	469c      	mov	ip, r3
 8001d48:	4465      	add	r5, ip
 8001d4a:	429d      	cmp	r5, r3
 8001d4c:	419b      	sbcs	r3, r3
 8001d4e:	425b      	negs	r3, r3
 8001d50:	191b      	adds	r3, r3, r4
 8001d52:	18c9      	adds	r1, r1, r3
 8001d54:	e6e4      	b.n	8001b20 <__aeabi_ddiv+0x33c>
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <__aeabi_ddiv+0x5c8>)
 8001d58:	445a      	add	r2, fp
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	dc00      	bgt.n	8001d60 <__aeabi_ddiv+0x57c>
 8001d5e:	e744      	b.n	8001bea <__aeabi_ddiv+0x406>
 8001d60:	2301      	movs	r3, #1
 8001d62:	2500      	movs	r5, #0
 8001d64:	4498      	add	r8, r3
 8001d66:	e609      	b.n	800197c <__aeabi_ddiv+0x198>
 8001d68:	0765      	lsls	r5, r4, #29
 8001d6a:	0264      	lsls	r4, r4, #9
 8001d6c:	0b24      	lsrs	r4, r4, #12
 8001d6e:	08db      	lsrs	r3, r3, #3
 8001d70:	431d      	orrs	r5, r3
 8001d72:	2300      	movs	r3, #0
 8001d74:	e590      	b.n	8001898 <__aeabi_ddiv+0xb4>
 8001d76:	9e00      	ldr	r6, [sp, #0]
 8001d78:	3d02      	subs	r5, #2
 8001d7a:	0072      	lsls	r2, r6, #1
 8001d7c:	42b2      	cmp	r2, r6
 8001d7e:	41bf      	sbcs	r7, r7
 8001d80:	427f      	negs	r7, r7
 8001d82:	193c      	adds	r4, r7, r4
 8001d84:	1909      	adds	r1, r1, r4
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	e7ce      	b.n	8001d28 <__aeabi_ddiv+0x544>
 8001d8a:	2480      	movs	r4, #128	; 0x80
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	0324      	lsls	r4, r4, #12
 8001d90:	431c      	orrs	r4, r3
 8001d92:	0324      	lsls	r4, r4, #12
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <__aeabi_ddiv+0x5cc>)
 8001d96:	0b24      	lsrs	r4, r4, #12
 8001d98:	e57e      	b.n	8001898 <__aeabi_ddiv+0xb4>
 8001d9a:	9a00      	ldr	r2, [sp, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3ea      	bcc.n	8001d76 <__aeabi_ddiv+0x592>
 8001da0:	0035      	movs	r5, r6
 8001da2:	e7c4      	b.n	8001d2e <__aeabi_ddiv+0x54a>
 8001da4:	0000043e 	.word	0x0000043e
 8001da8:	0000041e 	.word	0x0000041e
 8001dac:	000003ff 	.word	0x000003ff
 8001db0:	000007ff 	.word	0x000007ff

08001db4 <__eqdf2>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	464f      	mov	r7, r9
 8001db8:	4646      	mov	r6, r8
 8001dba:	46d6      	mov	lr, sl
 8001dbc:	4694      	mov	ip, r2
 8001dbe:	4691      	mov	r9, r2
 8001dc0:	031a      	lsls	r2, r3, #12
 8001dc2:	0b12      	lsrs	r2, r2, #12
 8001dc4:	4d18      	ldr	r5, [pc, #96]	; (8001e28 <__eqdf2+0x74>)
 8001dc6:	b5c0      	push	{r6, r7, lr}
 8001dc8:	004c      	lsls	r4, r1, #1
 8001dca:	030f      	lsls	r7, r1, #12
 8001dcc:	4692      	mov	sl, r2
 8001dce:	005a      	lsls	r2, r3, #1
 8001dd0:	0006      	movs	r6, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0b3f      	lsrs	r7, r7, #12
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	0d64      	lsrs	r4, r4, #21
 8001dda:	0fc9      	lsrs	r1, r1, #31
 8001ddc:	0d52      	lsrs	r2, r2, #21
 8001dde:	0fdb      	lsrs	r3, r3, #31
 8001de0:	42ac      	cmp	r4, r5
 8001de2:	d00a      	beq.n	8001dfa <__eqdf2+0x46>
 8001de4:	42aa      	cmp	r2, r5
 8001de6:	d003      	beq.n	8001df0 <__eqdf2+0x3c>
 8001de8:	4294      	cmp	r4, r2
 8001dea:	d101      	bne.n	8001df0 <__eqdf2+0x3c>
 8001dec:	4557      	cmp	r7, sl
 8001dee:	d00d      	beq.n	8001e0c <__eqdf2+0x58>
 8001df0:	bce0      	pop	{r5, r6, r7}
 8001df2:	46ba      	mov	sl, r7
 8001df4:	46b1      	mov	r9, r6
 8001df6:	46a8      	mov	r8, r5
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	003d      	movs	r5, r7
 8001dfc:	4335      	orrs	r5, r6
 8001dfe:	d1f7      	bne.n	8001df0 <__eqdf2+0x3c>
 8001e00:	42a2      	cmp	r2, r4
 8001e02:	d1f5      	bne.n	8001df0 <__eqdf2+0x3c>
 8001e04:	4652      	mov	r2, sl
 8001e06:	4665      	mov	r5, ip
 8001e08:	432a      	orrs	r2, r5
 8001e0a:	d1f1      	bne.n	8001df0 <__eqdf2+0x3c>
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	45c8      	cmp	r8, r9
 8001e10:	d1ee      	bne.n	8001df0 <__eqdf2+0x3c>
 8001e12:	4299      	cmp	r1, r3
 8001e14:	d006      	beq.n	8001e24 <__eqdf2+0x70>
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d1ea      	bne.n	8001df0 <__eqdf2+0x3c>
 8001e1a:	433e      	orrs	r6, r7
 8001e1c:	0030      	movs	r0, r6
 8001e1e:	1e46      	subs	r6, r0, #1
 8001e20:	41b0      	sbcs	r0, r6
 8001e22:	e7e5      	b.n	8001df0 <__eqdf2+0x3c>
 8001e24:	2000      	movs	r0, #0
 8001e26:	e7e3      	b.n	8001df0 <__eqdf2+0x3c>
 8001e28:	000007ff 	.word	0x000007ff

08001e2c <__gedf2>:
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	464e      	mov	r6, r9
 8001e30:	4645      	mov	r5, r8
 8001e32:	4657      	mov	r7, sl
 8001e34:	46de      	mov	lr, fp
 8001e36:	0004      	movs	r4, r0
 8001e38:	0018      	movs	r0, r3
 8001e3a:	b5e0      	push	{r5, r6, r7, lr}
 8001e3c:	0016      	movs	r6, r2
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	0b1b      	lsrs	r3, r3, #12
 8001e42:	4d32      	ldr	r5, [pc, #200]	; (8001f0c <__gedf2+0xe0>)
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	004a      	lsls	r2, r1, #1
 8001e48:	4699      	mov	r9, r3
 8001e4a:	0043      	lsls	r3, r0, #1
 8001e4c:	46a4      	mov	ip, r4
 8001e4e:	46b0      	mov	r8, r6
 8001e50:	0b3f      	lsrs	r7, r7, #12
 8001e52:	0d52      	lsrs	r2, r2, #21
 8001e54:	0fc9      	lsrs	r1, r1, #31
 8001e56:	0d5b      	lsrs	r3, r3, #21
 8001e58:	0fc0      	lsrs	r0, r0, #31
 8001e5a:	42aa      	cmp	r2, r5
 8001e5c:	d029      	beq.n	8001eb2 <__gedf2+0x86>
 8001e5e:	42ab      	cmp	r3, r5
 8001e60:	d018      	beq.n	8001e94 <__gedf2+0x68>
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d12a      	bne.n	8001ebc <__gedf2+0x90>
 8001e66:	433c      	orrs	r4, r7
 8001e68:	46a3      	mov	fp, r4
 8001e6a:	4265      	negs	r5, r4
 8001e6c:	4165      	adcs	r5, r4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <__gedf2+0x4c>
 8001e72:	464c      	mov	r4, r9
 8001e74:	4326      	orrs	r6, r4
 8001e76:	d027      	beq.n	8001ec8 <__gedf2+0x9c>
 8001e78:	2d00      	cmp	r5, #0
 8001e7a:	d115      	bne.n	8001ea8 <__gedf2+0x7c>
 8001e7c:	4281      	cmp	r1, r0
 8001e7e:	d028      	beq.n	8001ed2 <__gedf2+0xa6>
 8001e80:	2002      	movs	r0, #2
 8001e82:	3901      	subs	r1, #1
 8001e84:	4008      	ands	r0, r1
 8001e86:	3801      	subs	r0, #1
 8001e88:	bcf0      	pop	{r4, r5, r6, r7}
 8001e8a:	46bb      	mov	fp, r7
 8001e8c:	46b2      	mov	sl, r6
 8001e8e:	46a9      	mov	r9, r5
 8001e90:	46a0      	mov	r8, r4
 8001e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e94:	464d      	mov	r5, r9
 8001e96:	432e      	orrs	r6, r5
 8001e98:	d12f      	bne.n	8001efa <__gedf2+0xce>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d1ee      	bne.n	8001e7c <__gedf2+0x50>
 8001e9e:	433c      	orrs	r4, r7
 8001ea0:	4265      	negs	r5, r4
 8001ea2:	4165      	adcs	r5, r4
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	d0e9      	beq.n	8001e7c <__gedf2+0x50>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d1ed      	bne.n	8001e88 <__gedf2+0x5c>
 8001eac:	2001      	movs	r0, #1
 8001eae:	4240      	negs	r0, r0
 8001eb0:	e7ea      	b.n	8001e88 <__gedf2+0x5c>
 8001eb2:	003d      	movs	r5, r7
 8001eb4:	4325      	orrs	r5, r4
 8001eb6:	d120      	bne.n	8001efa <__gedf2+0xce>
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d0eb      	beq.n	8001e94 <__gedf2+0x68>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1dd      	bne.n	8001e7c <__gedf2+0x50>
 8001ec0:	464c      	mov	r4, r9
 8001ec2:	4326      	orrs	r6, r4
 8001ec4:	d1da      	bne.n	8001e7c <__gedf2+0x50>
 8001ec6:	e7db      	b.n	8001e80 <__gedf2+0x54>
 8001ec8:	465b      	mov	r3, fp
 8001eca:	2000      	movs	r0, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0db      	beq.n	8001e88 <__gedf2+0x5c>
 8001ed0:	e7d6      	b.n	8001e80 <__gedf2+0x54>
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dc0a      	bgt.n	8001eec <__gedf2+0xc0>
 8001ed6:	dbe7      	blt.n	8001ea8 <__gedf2+0x7c>
 8001ed8:	454f      	cmp	r7, r9
 8001eda:	d8d1      	bhi.n	8001e80 <__gedf2+0x54>
 8001edc:	d010      	beq.n	8001f00 <__gedf2+0xd4>
 8001ede:	2000      	movs	r0, #0
 8001ee0:	454f      	cmp	r7, r9
 8001ee2:	d2d1      	bcs.n	8001e88 <__gedf2+0x5c>
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d0e1      	beq.n	8001eac <__gedf2+0x80>
 8001ee8:	0008      	movs	r0, r1
 8001eea:	e7cd      	b.n	8001e88 <__gedf2+0x5c>
 8001eec:	4243      	negs	r3, r0
 8001eee:	4158      	adcs	r0, r3
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	4240      	negs	r0, r0
 8001ef4:	4018      	ands	r0, r3
 8001ef6:	3801      	subs	r0, #1
 8001ef8:	e7c6      	b.n	8001e88 <__gedf2+0x5c>
 8001efa:	2002      	movs	r0, #2
 8001efc:	4240      	negs	r0, r0
 8001efe:	e7c3      	b.n	8001e88 <__gedf2+0x5c>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8bd      	bhi.n	8001e80 <__gedf2+0x54>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2be      	bcs.n	8001e88 <__gedf2+0x5c>
 8001f0a:	e7eb      	b.n	8001ee4 <__gedf2+0xb8>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__ledf2>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	464e      	mov	r6, r9
 8001f14:	4645      	mov	r5, r8
 8001f16:	4657      	mov	r7, sl
 8001f18:	46de      	mov	lr, fp
 8001f1a:	0004      	movs	r4, r0
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	0016      	movs	r6, r2
 8001f22:	031b      	lsls	r3, r3, #12
 8001f24:	0b1b      	lsrs	r3, r3, #12
 8001f26:	4d31      	ldr	r5, [pc, #196]	; (8001fec <__ledf2+0xdc>)
 8001f28:	030f      	lsls	r7, r1, #12
 8001f2a:	004a      	lsls	r2, r1, #1
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	0043      	lsls	r3, r0, #1
 8001f30:	46a4      	mov	ip, r4
 8001f32:	46b0      	mov	r8, r6
 8001f34:	0b3f      	lsrs	r7, r7, #12
 8001f36:	0d52      	lsrs	r2, r2, #21
 8001f38:	0fc9      	lsrs	r1, r1, #31
 8001f3a:	0d5b      	lsrs	r3, r3, #21
 8001f3c:	0fc0      	lsrs	r0, r0, #31
 8001f3e:	42aa      	cmp	r2, r5
 8001f40:	d011      	beq.n	8001f66 <__ledf2+0x56>
 8001f42:	42ab      	cmp	r3, r5
 8001f44:	d014      	beq.n	8001f70 <__ledf2+0x60>
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d12f      	bne.n	8001faa <__ledf2+0x9a>
 8001f4a:	433c      	orrs	r4, r7
 8001f4c:	46a3      	mov	fp, r4
 8001f4e:	4265      	negs	r5, r4
 8001f50:	4165      	adcs	r5, r4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d114      	bne.n	8001f80 <__ledf2+0x70>
 8001f56:	464c      	mov	r4, r9
 8001f58:	4326      	orrs	r6, r4
 8001f5a:	d111      	bne.n	8001f80 <__ledf2+0x70>
 8001f5c:	465b      	mov	r3, fp
 8001f5e:	2000      	movs	r0, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d017      	beq.n	8001f94 <__ledf2+0x84>
 8001f64:	e010      	b.n	8001f88 <__ledf2+0x78>
 8001f66:	003d      	movs	r5, r7
 8001f68:	4325      	orrs	r5, r4
 8001f6a:	d112      	bne.n	8001f92 <__ledf2+0x82>
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d11c      	bne.n	8001faa <__ledf2+0x9a>
 8001f70:	464d      	mov	r5, r9
 8001f72:	432e      	orrs	r6, r5
 8001f74:	d10d      	bne.n	8001f92 <__ledf2+0x82>
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d104      	bne.n	8001f84 <__ledf2+0x74>
 8001f7a:	433c      	orrs	r4, r7
 8001f7c:	4265      	negs	r5, r4
 8001f7e:	4165      	adcs	r5, r4
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	d10d      	bne.n	8001fa0 <__ledf2+0x90>
 8001f84:	4281      	cmp	r1, r0
 8001f86:	d016      	beq.n	8001fb6 <__ledf2+0xa6>
 8001f88:	2002      	movs	r0, #2
 8001f8a:	3901      	subs	r1, #1
 8001f8c:	4008      	ands	r0, r1
 8001f8e:	3801      	subs	r0, #1
 8001f90:	e000      	b.n	8001f94 <__ledf2+0x84>
 8001f92:	2002      	movs	r0, #2
 8001f94:	bcf0      	pop	{r4, r5, r6, r7}
 8001f96:	46bb      	mov	fp, r7
 8001f98:	46b2      	mov	sl, r6
 8001f9a:	46a9      	mov	r9, r5
 8001f9c:	46a0      	mov	r8, r4
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d1f7      	bne.n	8001f94 <__ledf2+0x84>
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	4240      	negs	r0, r0
 8001fa8:	e7f4      	b.n	8001f94 <__ledf2+0x84>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ea      	bne.n	8001f84 <__ledf2+0x74>
 8001fae:	464c      	mov	r4, r9
 8001fb0:	4326      	orrs	r6, r4
 8001fb2:	d1e7      	bne.n	8001f84 <__ledf2+0x74>
 8001fb4:	e7e8      	b.n	8001f88 <__ledf2+0x78>
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dd06      	ble.n	8001fc8 <__ledf2+0xb8>
 8001fba:	4243      	negs	r3, r0
 8001fbc:	4158      	adcs	r0, r3
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4240      	negs	r0, r0
 8001fc2:	4018      	ands	r0, r3
 8001fc4:	3801      	subs	r0, #1
 8001fc6:	e7e5      	b.n	8001f94 <__ledf2+0x84>
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbe9      	blt.n	8001fa0 <__ledf2+0x90>
 8001fcc:	454f      	cmp	r7, r9
 8001fce:	d8db      	bhi.n	8001f88 <__ledf2+0x78>
 8001fd0:	d006      	beq.n	8001fe0 <__ledf2+0xd0>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	454f      	cmp	r7, r9
 8001fd6:	d2dd      	bcs.n	8001f94 <__ledf2+0x84>
 8001fd8:	2900      	cmp	r1, #0
 8001fda:	d0e3      	beq.n	8001fa4 <__ledf2+0x94>
 8001fdc:	0008      	movs	r0, r1
 8001fde:	e7d9      	b.n	8001f94 <__ledf2+0x84>
 8001fe0:	45c4      	cmp	ip, r8
 8001fe2:	d8d1      	bhi.n	8001f88 <__ledf2+0x78>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	45c4      	cmp	ip, r8
 8001fe8:	d2d4      	bcs.n	8001f94 <__ledf2+0x84>
 8001fea:	e7f5      	b.n	8001fd8 <__ledf2+0xc8>
 8001fec:	000007ff 	.word	0x000007ff

08001ff0 <__aeabi_dmul>:
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	4657      	mov	r7, sl
 8001ff4:	464e      	mov	r6, r9
 8001ff6:	4645      	mov	r5, r8
 8001ff8:	46de      	mov	lr, fp
 8001ffa:	b5e0      	push	{r5, r6, r7, lr}
 8001ffc:	4698      	mov	r8, r3
 8001ffe:	030c      	lsls	r4, r1, #12
 8002000:	004b      	lsls	r3, r1, #1
 8002002:	0006      	movs	r6, r0
 8002004:	4692      	mov	sl, r2
 8002006:	b087      	sub	sp, #28
 8002008:	0b24      	lsrs	r4, r4, #12
 800200a:	0d5b      	lsrs	r3, r3, #21
 800200c:	0fcf      	lsrs	r7, r1, #31
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06c      	beq.n	80020ec <__aeabi_dmul+0xfc>
 8002012:	4add      	ldr	r2, [pc, #884]	; (8002388 <__aeabi_dmul+0x398>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d100      	bne.n	800201a <__aeabi_dmul+0x2a>
 8002018:	e086      	b.n	8002128 <__aeabi_dmul+0x138>
 800201a:	0f42      	lsrs	r2, r0, #29
 800201c:	00e4      	lsls	r4, r4, #3
 800201e:	4314      	orrs	r4, r2
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	0412      	lsls	r2, r2, #16
 8002024:	4314      	orrs	r4, r2
 8002026:	4ad9      	ldr	r2, [pc, #868]	; (800238c <__aeabi_dmul+0x39c>)
 8002028:	00c5      	lsls	r5, r0, #3
 800202a:	4694      	mov	ip, r2
 800202c:	4463      	add	r3, ip
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2300      	movs	r3, #0
 8002032:	4699      	mov	r9, r3
 8002034:	469b      	mov	fp, r3
 8002036:	4643      	mov	r3, r8
 8002038:	4642      	mov	r2, r8
 800203a:	031e      	lsls	r6, r3, #12
 800203c:	0fd2      	lsrs	r2, r2, #31
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4650      	mov	r0, sl
 8002042:	4690      	mov	r8, r2
 8002044:	0b36      	lsrs	r6, r6, #12
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	d100      	bne.n	800204c <__aeabi_dmul+0x5c>
 800204a:	e078      	b.n	800213e <__aeabi_dmul+0x14e>
 800204c:	4ace      	ldr	r2, [pc, #824]	; (8002388 <__aeabi_dmul+0x398>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01d      	beq.n	800208e <__aeabi_dmul+0x9e>
 8002052:	49ce      	ldr	r1, [pc, #824]	; (800238c <__aeabi_dmul+0x39c>)
 8002054:	0f42      	lsrs	r2, r0, #29
 8002056:	468c      	mov	ip, r1
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	4463      	add	r3, ip
 800205c:	00f6      	lsls	r6, r6, #3
 800205e:	468c      	mov	ip, r1
 8002060:	4316      	orrs	r6, r2
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	449c      	add	ip, r3
 8002066:	0412      	lsls	r2, r2, #16
 8002068:	4663      	mov	r3, ip
 800206a:	4316      	orrs	r6, r2
 800206c:	00c2      	lsls	r2, r0, #3
 800206e:	2000      	movs	r0, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	9900      	ldr	r1, [sp, #0]
 8002074:	4643      	mov	r3, r8
 8002076:	3101      	adds	r1, #1
 8002078:	468c      	mov	ip, r1
 800207a:	4649      	mov	r1, r9
 800207c:	407b      	eors	r3, r7
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	290f      	cmp	r1, #15
 8002082:	d900      	bls.n	8002086 <__aeabi_dmul+0x96>
 8002084:	e07e      	b.n	8002184 <__aeabi_dmul+0x194>
 8002086:	4bc2      	ldr	r3, [pc, #776]	; (8002390 <__aeabi_dmul+0x3a0>)
 8002088:	0089      	lsls	r1, r1, #2
 800208a:	5859      	ldr	r1, [r3, r1]
 800208c:	468f      	mov	pc, r1
 800208e:	4652      	mov	r2, sl
 8002090:	9b00      	ldr	r3, [sp, #0]
 8002092:	4332      	orrs	r2, r6
 8002094:	d000      	beq.n	8002098 <__aeabi_dmul+0xa8>
 8002096:	e156      	b.n	8002346 <__aeabi_dmul+0x356>
 8002098:	49bb      	ldr	r1, [pc, #748]	; (8002388 <__aeabi_dmul+0x398>)
 800209a:	2600      	movs	r6, #0
 800209c:	468c      	mov	ip, r1
 800209e:	4463      	add	r3, ip
 80020a0:	4649      	mov	r1, r9
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2302      	movs	r3, #2
 80020a6:	4319      	orrs	r1, r3
 80020a8:	4689      	mov	r9, r1
 80020aa:	2002      	movs	r0, #2
 80020ac:	e7e1      	b.n	8002072 <__aeabi_dmul+0x82>
 80020ae:	4643      	mov	r3, r8
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	0034      	movs	r4, r6
 80020b4:	0015      	movs	r5, r2
 80020b6:	4683      	mov	fp, r0
 80020b8:	465b      	mov	r3, fp
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d05e      	beq.n	800217c <__aeabi_dmul+0x18c>
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0xd4>
 80020c2:	e1f3      	b.n	80024ac <__aeabi_dmul+0x4bc>
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d000      	beq.n	80020ca <__aeabi_dmul+0xda>
 80020c8:	e118      	b.n	80022fc <__aeabi_dmul+0x30c>
 80020ca:	2200      	movs	r2, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	2500      	movs	r5, #0
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	0512      	lsls	r2, r2, #20
 80020d4:	4322      	orrs	r2, r4
 80020d6:	07db      	lsls	r3, r3, #31
 80020d8:	431a      	orrs	r2, r3
 80020da:	0028      	movs	r0, r5
 80020dc:	0011      	movs	r1, r2
 80020de:	b007      	add	sp, #28
 80020e0:	bcf0      	pop	{r4, r5, r6, r7}
 80020e2:	46bb      	mov	fp, r7
 80020e4:	46b2      	mov	sl, r6
 80020e6:	46a9      	mov	r9, r5
 80020e8:	46a0      	mov	r8, r4
 80020ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ec:	0025      	movs	r5, r4
 80020ee:	4305      	orrs	r5, r0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dmul+0x104>
 80020f2:	e141      	b.n	8002378 <__aeabi_dmul+0x388>
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d100      	bne.n	80020fa <__aeabi_dmul+0x10a>
 80020f8:	e1ad      	b.n	8002456 <__aeabi_dmul+0x466>
 80020fa:	0020      	movs	r0, r4
 80020fc:	f000 fe34 	bl	8002d68 <__clzsi2>
 8002100:	0001      	movs	r1, r0
 8002102:	0002      	movs	r2, r0
 8002104:	390b      	subs	r1, #11
 8002106:	231d      	movs	r3, #29
 8002108:	0010      	movs	r0, r2
 800210a:	1a5b      	subs	r3, r3, r1
 800210c:	0031      	movs	r1, r6
 800210e:	0035      	movs	r5, r6
 8002110:	3808      	subs	r0, #8
 8002112:	4084      	lsls	r4, r0
 8002114:	40d9      	lsrs	r1, r3
 8002116:	4085      	lsls	r5, r0
 8002118:	430c      	orrs	r4, r1
 800211a:	489e      	ldr	r0, [pc, #632]	; (8002394 <__aeabi_dmul+0x3a4>)
 800211c:	1a83      	subs	r3, r0, r2
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2300      	movs	r3, #0
 8002122:	4699      	mov	r9, r3
 8002124:	469b      	mov	fp, r3
 8002126:	e786      	b.n	8002036 <__aeabi_dmul+0x46>
 8002128:	0005      	movs	r5, r0
 800212a:	4325      	orrs	r5, r4
 800212c:	d000      	beq.n	8002130 <__aeabi_dmul+0x140>
 800212e:	e11c      	b.n	800236a <__aeabi_dmul+0x37a>
 8002130:	2208      	movs	r2, #8
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2302      	movs	r3, #2
 8002136:	2400      	movs	r4, #0
 8002138:	4691      	mov	r9, r2
 800213a:	469b      	mov	fp, r3
 800213c:	e77b      	b.n	8002036 <__aeabi_dmul+0x46>
 800213e:	4652      	mov	r2, sl
 8002140:	4332      	orrs	r2, r6
 8002142:	d100      	bne.n	8002146 <__aeabi_dmul+0x156>
 8002144:	e10a      	b.n	800235c <__aeabi_dmul+0x36c>
 8002146:	2e00      	cmp	r6, #0
 8002148:	d100      	bne.n	800214c <__aeabi_dmul+0x15c>
 800214a:	e176      	b.n	800243a <__aeabi_dmul+0x44a>
 800214c:	0030      	movs	r0, r6
 800214e:	f000 fe0b 	bl	8002d68 <__clzsi2>
 8002152:	0002      	movs	r2, r0
 8002154:	3a0b      	subs	r2, #11
 8002156:	231d      	movs	r3, #29
 8002158:	0001      	movs	r1, r0
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	4652      	mov	r2, sl
 800215e:	3908      	subs	r1, #8
 8002160:	40da      	lsrs	r2, r3
 8002162:	408e      	lsls	r6, r1
 8002164:	4316      	orrs	r6, r2
 8002166:	4652      	mov	r2, sl
 8002168:	408a      	lsls	r2, r1
 800216a:	9b00      	ldr	r3, [sp, #0]
 800216c:	4989      	ldr	r1, [pc, #548]	; (8002394 <__aeabi_dmul+0x3a4>)
 800216e:	1a18      	subs	r0, r3, r0
 8002170:	0003      	movs	r3, r0
 8002172:	468c      	mov	ip, r1
 8002174:	4463      	add	r3, ip
 8002176:	2000      	movs	r0, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	e77a      	b.n	8002072 <__aeabi_dmul+0x82>
 800217c:	2400      	movs	r4, #0
 800217e:	2500      	movs	r5, #0
 8002180:	4a81      	ldr	r2, [pc, #516]	; (8002388 <__aeabi_dmul+0x398>)
 8002182:	e7a5      	b.n	80020d0 <__aeabi_dmul+0xe0>
 8002184:	0c2f      	lsrs	r7, r5, #16
 8002186:	042d      	lsls	r5, r5, #16
 8002188:	0c2d      	lsrs	r5, r5, #16
 800218a:	002b      	movs	r3, r5
 800218c:	0c11      	lsrs	r1, r2, #16
 800218e:	0412      	lsls	r2, r2, #16
 8002190:	0c12      	lsrs	r2, r2, #16
 8002192:	4353      	muls	r3, r2
 8002194:	4698      	mov	r8, r3
 8002196:	0013      	movs	r3, r2
 8002198:	0028      	movs	r0, r5
 800219a:	437b      	muls	r3, r7
 800219c:	4699      	mov	r9, r3
 800219e:	4348      	muls	r0, r1
 80021a0:	4448      	add	r0, r9
 80021a2:	4683      	mov	fp, r0
 80021a4:	4640      	mov	r0, r8
 80021a6:	000b      	movs	r3, r1
 80021a8:	0c00      	lsrs	r0, r0, #16
 80021aa:	4682      	mov	sl, r0
 80021ac:	4658      	mov	r0, fp
 80021ae:	437b      	muls	r3, r7
 80021b0:	4450      	add	r0, sl
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	4581      	cmp	r9, r0
 80021b6:	d906      	bls.n	80021c6 <__aeabi_dmul+0x1d6>
 80021b8:	469a      	mov	sl, r3
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4699      	mov	r9, r3
 80021c0:	44ca      	add	sl, r9
 80021c2:	4653      	mov	r3, sl
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	0c03      	lsrs	r3, r0, #16
 80021c8:	469b      	mov	fp, r3
 80021ca:	4643      	mov	r3, r8
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	0400      	lsls	r0, r0, #16
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	4698      	mov	r8, r3
 80021d4:	0003      	movs	r3, r0
 80021d6:	4443      	add	r3, r8
 80021d8:	9304      	str	r3, [sp, #16]
 80021da:	0c33      	lsrs	r3, r6, #16
 80021dc:	4699      	mov	r9, r3
 80021de:	002b      	movs	r3, r5
 80021e0:	0436      	lsls	r6, r6, #16
 80021e2:	0c36      	lsrs	r6, r6, #16
 80021e4:	4373      	muls	r3, r6
 80021e6:	4698      	mov	r8, r3
 80021e8:	0033      	movs	r3, r6
 80021ea:	437b      	muls	r3, r7
 80021ec:	469a      	mov	sl, r3
 80021ee:	464b      	mov	r3, r9
 80021f0:	435d      	muls	r5, r3
 80021f2:	435f      	muls	r7, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	4455      	add	r5, sl
 80021f8:	0c18      	lsrs	r0, r3, #16
 80021fa:	1940      	adds	r0, r0, r5
 80021fc:	4582      	cmp	sl, r0
 80021fe:	d903      	bls.n	8002208 <__aeabi_dmul+0x218>
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	025b      	lsls	r3, r3, #9
 8002204:	469a      	mov	sl, r3
 8002206:	4457      	add	r7, sl
 8002208:	0c05      	lsrs	r5, r0, #16
 800220a:	19eb      	adds	r3, r5, r7
 800220c:	9305      	str	r3, [sp, #20]
 800220e:	4643      	mov	r3, r8
 8002210:	041d      	lsls	r5, r3, #16
 8002212:	0c2d      	lsrs	r5, r5, #16
 8002214:	0400      	lsls	r0, r0, #16
 8002216:	1940      	adds	r0, r0, r5
 8002218:	0c25      	lsrs	r5, r4, #16
 800221a:	0424      	lsls	r4, r4, #16
 800221c:	0c24      	lsrs	r4, r4, #16
 800221e:	0027      	movs	r7, r4
 8002220:	4357      	muls	r7, r2
 8002222:	436a      	muls	r2, r5
 8002224:	4690      	mov	r8, r2
 8002226:	002a      	movs	r2, r5
 8002228:	0c3b      	lsrs	r3, r7, #16
 800222a:	469a      	mov	sl, r3
 800222c:	434a      	muls	r2, r1
 800222e:	4361      	muls	r1, r4
 8002230:	4441      	add	r1, r8
 8002232:	4451      	add	r1, sl
 8002234:	4483      	add	fp, r0
 8002236:	4588      	cmp	r8, r1
 8002238:	d903      	bls.n	8002242 <__aeabi_dmul+0x252>
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	4698      	mov	r8, r3
 8002240:	4442      	add	r2, r8
 8002242:	043f      	lsls	r7, r7, #16
 8002244:	0c0b      	lsrs	r3, r1, #16
 8002246:	0c3f      	lsrs	r7, r7, #16
 8002248:	0409      	lsls	r1, r1, #16
 800224a:	19c9      	adds	r1, r1, r7
 800224c:	0027      	movs	r7, r4
 800224e:	4698      	mov	r8, r3
 8002250:	464b      	mov	r3, r9
 8002252:	4377      	muls	r7, r6
 8002254:	435c      	muls	r4, r3
 8002256:	436e      	muls	r6, r5
 8002258:	435d      	muls	r5, r3
 800225a:	0c3b      	lsrs	r3, r7, #16
 800225c:	4699      	mov	r9, r3
 800225e:	19a4      	adds	r4, r4, r6
 8002260:	444c      	add	r4, r9
 8002262:	4442      	add	r2, r8
 8002264:	9503      	str	r5, [sp, #12]
 8002266:	42a6      	cmp	r6, r4
 8002268:	d904      	bls.n	8002274 <__aeabi_dmul+0x284>
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	025b      	lsls	r3, r3, #9
 800226e:	4698      	mov	r8, r3
 8002270:	4445      	add	r5, r8
 8002272:	9503      	str	r5, [sp, #12]
 8002274:	9b02      	ldr	r3, [sp, #8]
 8002276:	043f      	lsls	r7, r7, #16
 8002278:	445b      	add	r3, fp
 800227a:	001e      	movs	r6, r3
 800227c:	4283      	cmp	r3, r0
 800227e:	4180      	sbcs	r0, r0
 8002280:	0423      	lsls	r3, r4, #16
 8002282:	4698      	mov	r8, r3
 8002284:	9b05      	ldr	r3, [sp, #20]
 8002286:	0c3f      	lsrs	r7, r7, #16
 8002288:	4447      	add	r7, r8
 800228a:	4698      	mov	r8, r3
 800228c:	1876      	adds	r6, r6, r1
 800228e:	428e      	cmp	r6, r1
 8002290:	4189      	sbcs	r1, r1
 8002292:	4447      	add	r7, r8
 8002294:	4240      	negs	r0, r0
 8002296:	183d      	adds	r5, r7, r0
 8002298:	46a8      	mov	r8, r5
 800229a:	4693      	mov	fp, r2
 800229c:	4249      	negs	r1, r1
 800229e:	468a      	mov	sl, r1
 80022a0:	44c3      	add	fp, r8
 80022a2:	429f      	cmp	r7, r3
 80022a4:	41bf      	sbcs	r7, r7
 80022a6:	4580      	cmp	r8, r0
 80022a8:	4180      	sbcs	r0, r0
 80022aa:	9b03      	ldr	r3, [sp, #12]
 80022ac:	44da      	add	sl, fp
 80022ae:	4698      	mov	r8, r3
 80022b0:	4653      	mov	r3, sl
 80022b2:	4240      	negs	r0, r0
 80022b4:	427f      	negs	r7, r7
 80022b6:	4307      	orrs	r7, r0
 80022b8:	0c24      	lsrs	r4, r4, #16
 80022ba:	4593      	cmp	fp, r2
 80022bc:	4192      	sbcs	r2, r2
 80022be:	458a      	cmp	sl, r1
 80022c0:	4189      	sbcs	r1, r1
 80022c2:	193f      	adds	r7, r7, r4
 80022c4:	0ddc      	lsrs	r4, r3, #23
 80022c6:	9b04      	ldr	r3, [sp, #16]
 80022c8:	0275      	lsls	r5, r6, #9
 80022ca:	431d      	orrs	r5, r3
 80022cc:	1e68      	subs	r0, r5, #1
 80022ce:	4185      	sbcs	r5, r0
 80022d0:	4653      	mov	r3, sl
 80022d2:	4252      	negs	r2, r2
 80022d4:	4249      	negs	r1, r1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	18bf      	adds	r7, r7, r2
 80022da:	4447      	add	r7, r8
 80022dc:	0df6      	lsrs	r6, r6, #23
 80022de:	027f      	lsls	r7, r7, #9
 80022e0:	4335      	orrs	r5, r6
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	433c      	orrs	r4, r7
 80022e6:	4315      	orrs	r5, r2
 80022e8:	01fb      	lsls	r3, r7, #7
 80022ea:	d400      	bmi.n	80022ee <__aeabi_dmul+0x2fe>
 80022ec:	e0c1      	b.n	8002472 <__aeabi_dmul+0x482>
 80022ee:	2101      	movs	r1, #1
 80022f0:	086a      	lsrs	r2, r5, #1
 80022f2:	400d      	ands	r5, r1
 80022f4:	4315      	orrs	r5, r2
 80022f6:	07e2      	lsls	r2, r4, #31
 80022f8:	4315      	orrs	r5, r2
 80022fa:	0864      	lsrs	r4, r4, #1
 80022fc:	4926      	ldr	r1, [pc, #152]	; (8002398 <__aeabi_dmul+0x3a8>)
 80022fe:	4461      	add	r1, ip
 8002300:	2900      	cmp	r1, #0
 8002302:	dd56      	ble.n	80023b2 <__aeabi_dmul+0x3c2>
 8002304:	076b      	lsls	r3, r5, #29
 8002306:	d009      	beq.n	800231c <__aeabi_dmul+0x32c>
 8002308:	220f      	movs	r2, #15
 800230a:	402a      	ands	r2, r5
 800230c:	2a04      	cmp	r2, #4
 800230e:	d005      	beq.n	800231c <__aeabi_dmul+0x32c>
 8002310:	1d2a      	adds	r2, r5, #4
 8002312:	42aa      	cmp	r2, r5
 8002314:	41ad      	sbcs	r5, r5
 8002316:	426d      	negs	r5, r5
 8002318:	1964      	adds	r4, r4, r5
 800231a:	0015      	movs	r5, r2
 800231c:	01e3      	lsls	r3, r4, #7
 800231e:	d504      	bpl.n	800232a <__aeabi_dmul+0x33a>
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <__aeabi_dmul+0x3ac>)
 8002324:	00c9      	lsls	r1, r1, #3
 8002326:	4014      	ands	r4, r2
 8002328:	4461      	add	r1, ip
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <__aeabi_dmul+0x3b0>)
 800232c:	4291      	cmp	r1, r2
 800232e:	dd00      	ble.n	8002332 <__aeabi_dmul+0x342>
 8002330:	e724      	b.n	800217c <__aeabi_dmul+0x18c>
 8002332:	0762      	lsls	r2, r4, #29
 8002334:	08ed      	lsrs	r5, r5, #3
 8002336:	0264      	lsls	r4, r4, #9
 8002338:	0549      	lsls	r1, r1, #21
 800233a:	4315      	orrs	r5, r2
 800233c:	0b24      	lsrs	r4, r4, #12
 800233e:	0d4a      	lsrs	r2, r1, #21
 8002340:	e6c6      	b.n	80020d0 <__aeabi_dmul+0xe0>
 8002342:	9701      	str	r7, [sp, #4]
 8002344:	e6b8      	b.n	80020b8 <__aeabi_dmul+0xc8>
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <__aeabi_dmul+0x398>)
 8002348:	2003      	movs	r0, #3
 800234a:	4694      	mov	ip, r2
 800234c:	4463      	add	r3, ip
 800234e:	464a      	mov	r2, r9
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2303      	movs	r3, #3
 8002354:	431a      	orrs	r2, r3
 8002356:	4691      	mov	r9, r2
 8002358:	4652      	mov	r2, sl
 800235a:	e68a      	b.n	8002072 <__aeabi_dmul+0x82>
 800235c:	4649      	mov	r1, r9
 800235e:	2301      	movs	r3, #1
 8002360:	4319      	orrs	r1, r3
 8002362:	4689      	mov	r9, r1
 8002364:	2600      	movs	r6, #0
 8002366:	2001      	movs	r0, #1
 8002368:	e683      	b.n	8002072 <__aeabi_dmul+0x82>
 800236a:	220c      	movs	r2, #12
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2303      	movs	r3, #3
 8002370:	0005      	movs	r5, r0
 8002372:	4691      	mov	r9, r2
 8002374:	469b      	mov	fp, r3
 8002376:	e65e      	b.n	8002036 <__aeabi_dmul+0x46>
 8002378:	2304      	movs	r3, #4
 800237a:	4699      	mov	r9, r3
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	2400      	movs	r4, #0
 8002384:	469b      	mov	fp, r3
 8002386:	e656      	b.n	8002036 <__aeabi_dmul+0x46>
 8002388:	000007ff 	.word	0x000007ff
 800238c:	fffffc01 	.word	0xfffffc01
 8002390:	0800af3c 	.word	0x0800af3c
 8002394:	fffffc0d 	.word	0xfffffc0d
 8002398:	000003ff 	.word	0x000003ff
 800239c:	feffffff 	.word	0xfeffffff
 80023a0:	000007fe 	.word	0x000007fe
 80023a4:	2300      	movs	r3, #0
 80023a6:	2480      	movs	r4, #128	; 0x80
 80023a8:	2500      	movs	r5, #0
 80023aa:	4a44      	ldr	r2, [pc, #272]	; (80024bc <__aeabi_dmul+0x4cc>)
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	0324      	lsls	r4, r4, #12
 80023b0:	e68e      	b.n	80020d0 <__aeabi_dmul+0xe0>
 80023b2:	2001      	movs	r0, #1
 80023b4:	1a40      	subs	r0, r0, r1
 80023b6:	2838      	cmp	r0, #56	; 0x38
 80023b8:	dd00      	ble.n	80023bc <__aeabi_dmul+0x3cc>
 80023ba:	e686      	b.n	80020ca <__aeabi_dmul+0xda>
 80023bc:	281f      	cmp	r0, #31
 80023be:	dd5b      	ble.n	8002478 <__aeabi_dmul+0x488>
 80023c0:	221f      	movs	r2, #31
 80023c2:	0023      	movs	r3, r4
 80023c4:	4252      	negs	r2, r2
 80023c6:	1a51      	subs	r1, r2, r1
 80023c8:	40cb      	lsrs	r3, r1
 80023ca:	0019      	movs	r1, r3
 80023cc:	2820      	cmp	r0, #32
 80023ce:	d003      	beq.n	80023d8 <__aeabi_dmul+0x3e8>
 80023d0:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <__aeabi_dmul+0x4d0>)
 80023d2:	4462      	add	r2, ip
 80023d4:	4094      	lsls	r4, r2
 80023d6:	4325      	orrs	r5, r4
 80023d8:	1e6a      	subs	r2, r5, #1
 80023da:	4195      	sbcs	r5, r2
 80023dc:	002a      	movs	r2, r5
 80023de:	430a      	orrs	r2, r1
 80023e0:	2107      	movs	r1, #7
 80023e2:	000d      	movs	r5, r1
 80023e4:	2400      	movs	r4, #0
 80023e6:	4015      	ands	r5, r2
 80023e8:	4211      	tst	r1, r2
 80023ea:	d05b      	beq.n	80024a4 <__aeabi_dmul+0x4b4>
 80023ec:	210f      	movs	r1, #15
 80023ee:	2400      	movs	r4, #0
 80023f0:	4011      	ands	r1, r2
 80023f2:	2904      	cmp	r1, #4
 80023f4:	d053      	beq.n	800249e <__aeabi_dmul+0x4ae>
 80023f6:	1d11      	adds	r1, r2, #4
 80023f8:	4291      	cmp	r1, r2
 80023fa:	4192      	sbcs	r2, r2
 80023fc:	4252      	negs	r2, r2
 80023fe:	18a4      	adds	r4, r4, r2
 8002400:	000a      	movs	r2, r1
 8002402:	0223      	lsls	r3, r4, #8
 8002404:	d54b      	bpl.n	800249e <__aeabi_dmul+0x4ae>
 8002406:	2201      	movs	r2, #1
 8002408:	2400      	movs	r4, #0
 800240a:	2500      	movs	r5, #0
 800240c:	e660      	b.n	80020d0 <__aeabi_dmul+0xe0>
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	031b      	lsls	r3, r3, #12
 8002412:	421c      	tst	r4, r3
 8002414:	d009      	beq.n	800242a <__aeabi_dmul+0x43a>
 8002416:	421e      	tst	r6, r3
 8002418:	d107      	bne.n	800242a <__aeabi_dmul+0x43a>
 800241a:	4333      	orrs	r3, r6
 800241c:	031c      	lsls	r4, r3, #12
 800241e:	4643      	mov	r3, r8
 8002420:	0015      	movs	r5, r2
 8002422:	0b24      	lsrs	r4, r4, #12
 8002424:	4a25      	ldr	r2, [pc, #148]	; (80024bc <__aeabi_dmul+0x4cc>)
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	e652      	b.n	80020d0 <__aeabi_dmul+0xe0>
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0312      	lsls	r2, r2, #12
 800242e:	4314      	orrs	r4, r2
 8002430:	0324      	lsls	r4, r4, #12
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <__aeabi_dmul+0x4cc>)
 8002434:	0b24      	lsrs	r4, r4, #12
 8002436:	9701      	str	r7, [sp, #4]
 8002438:	e64a      	b.n	80020d0 <__aeabi_dmul+0xe0>
 800243a:	f000 fc95 	bl	8002d68 <__clzsi2>
 800243e:	0003      	movs	r3, r0
 8002440:	001a      	movs	r2, r3
 8002442:	3215      	adds	r2, #21
 8002444:	3020      	adds	r0, #32
 8002446:	2a1c      	cmp	r2, #28
 8002448:	dc00      	bgt.n	800244c <__aeabi_dmul+0x45c>
 800244a:	e684      	b.n	8002156 <__aeabi_dmul+0x166>
 800244c:	4656      	mov	r6, sl
 800244e:	3b08      	subs	r3, #8
 8002450:	2200      	movs	r2, #0
 8002452:	409e      	lsls	r6, r3
 8002454:	e689      	b.n	800216a <__aeabi_dmul+0x17a>
 8002456:	f000 fc87 	bl	8002d68 <__clzsi2>
 800245a:	0001      	movs	r1, r0
 800245c:	0002      	movs	r2, r0
 800245e:	3115      	adds	r1, #21
 8002460:	3220      	adds	r2, #32
 8002462:	291c      	cmp	r1, #28
 8002464:	dc00      	bgt.n	8002468 <__aeabi_dmul+0x478>
 8002466:	e64e      	b.n	8002106 <__aeabi_dmul+0x116>
 8002468:	0034      	movs	r4, r6
 800246a:	3808      	subs	r0, #8
 800246c:	2500      	movs	r5, #0
 800246e:	4084      	lsls	r4, r0
 8002470:	e653      	b.n	800211a <__aeabi_dmul+0x12a>
 8002472:	9b00      	ldr	r3, [sp, #0]
 8002474:	469c      	mov	ip, r3
 8002476:	e741      	b.n	80022fc <__aeabi_dmul+0x30c>
 8002478:	4912      	ldr	r1, [pc, #72]	; (80024c4 <__aeabi_dmul+0x4d4>)
 800247a:	0022      	movs	r2, r4
 800247c:	4461      	add	r1, ip
 800247e:	002e      	movs	r6, r5
 8002480:	408d      	lsls	r5, r1
 8002482:	408a      	lsls	r2, r1
 8002484:	40c6      	lsrs	r6, r0
 8002486:	1e69      	subs	r1, r5, #1
 8002488:	418d      	sbcs	r5, r1
 800248a:	4332      	orrs	r2, r6
 800248c:	432a      	orrs	r2, r5
 800248e:	40c4      	lsrs	r4, r0
 8002490:	0753      	lsls	r3, r2, #29
 8002492:	d0b6      	beq.n	8002402 <__aeabi_dmul+0x412>
 8002494:	210f      	movs	r1, #15
 8002496:	4011      	ands	r1, r2
 8002498:	2904      	cmp	r1, #4
 800249a:	d1ac      	bne.n	80023f6 <__aeabi_dmul+0x406>
 800249c:	e7b1      	b.n	8002402 <__aeabi_dmul+0x412>
 800249e:	0765      	lsls	r5, r4, #29
 80024a0:	0264      	lsls	r4, r4, #9
 80024a2:	0b24      	lsrs	r4, r4, #12
 80024a4:	08d2      	lsrs	r2, r2, #3
 80024a6:	4315      	orrs	r5, r2
 80024a8:	2200      	movs	r2, #0
 80024aa:	e611      	b.n	80020d0 <__aeabi_dmul+0xe0>
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	0312      	lsls	r2, r2, #12
 80024b0:	4314      	orrs	r4, r2
 80024b2:	0324      	lsls	r4, r4, #12
 80024b4:	4a01      	ldr	r2, [pc, #4]	; (80024bc <__aeabi_dmul+0x4cc>)
 80024b6:	0b24      	lsrs	r4, r4, #12
 80024b8:	e60a      	b.n	80020d0 <__aeabi_dmul+0xe0>
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	000007ff 	.word	0x000007ff
 80024c0:	0000043e 	.word	0x0000043e
 80024c4:	0000041e 	.word	0x0000041e

080024c8 <__aeabi_dsub>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	4657      	mov	r7, sl
 80024cc:	464e      	mov	r6, r9
 80024ce:	4645      	mov	r5, r8
 80024d0:	46de      	mov	lr, fp
 80024d2:	0004      	movs	r4, r0
 80024d4:	b5e0      	push	{r5, r6, r7, lr}
 80024d6:	001f      	movs	r7, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	030b      	lsls	r3, r1, #12
 80024dc:	0f62      	lsrs	r2, r4, #29
 80024de:	004e      	lsls	r6, r1, #1
 80024e0:	0fcd      	lsrs	r5, r1, #31
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	0339      	lsls	r1, r7, #12
 80024e6:	4313      	orrs	r3, r2
 80024e8:	0a49      	lsrs	r1, r1, #9
 80024ea:	00e2      	lsls	r2, r4, #3
 80024ec:	0f44      	lsrs	r4, r0, #29
 80024ee:	4321      	orrs	r1, r4
 80024f0:	4cc2      	ldr	r4, [pc, #776]	; (80027fc <__aeabi_dsub+0x334>)
 80024f2:	4691      	mov	r9, r2
 80024f4:	4692      	mov	sl, r2
 80024f6:	00c0      	lsls	r0, r0, #3
 80024f8:	007a      	lsls	r2, r7, #1
 80024fa:	4680      	mov	r8, r0
 80024fc:	0d76      	lsrs	r6, r6, #21
 80024fe:	0d52      	lsrs	r2, r2, #21
 8002500:	0fff      	lsrs	r7, r7, #31
 8002502:	42a2      	cmp	r2, r4
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x40>
 8002506:	e0b4      	b.n	8002672 <__aeabi_dsub+0x1aa>
 8002508:	2401      	movs	r4, #1
 800250a:	4067      	eors	r7, r4
 800250c:	46bb      	mov	fp, r7
 800250e:	42bd      	cmp	r5, r7
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x4c>
 8002512:	e088      	b.n	8002626 <__aeabi_dsub+0x15e>
 8002514:	1ab4      	subs	r4, r6, r2
 8002516:	46a4      	mov	ip, r4
 8002518:	2c00      	cmp	r4, #0
 800251a:	dc00      	bgt.n	800251e <__aeabi_dsub+0x56>
 800251c:	e0b2      	b.n	8002684 <__aeabi_dsub+0x1bc>
 800251e:	2a00      	cmp	r2, #0
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x5c>
 8002522:	e0c5      	b.n	80026b0 <__aeabi_dsub+0x1e8>
 8002524:	4ab5      	ldr	r2, [pc, #724]	; (80027fc <__aeabi_dsub+0x334>)
 8002526:	4296      	cmp	r6, r2
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x64>
 800252a:	e28b      	b.n	8002a44 <__aeabi_dsub+0x57c>
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0412      	lsls	r2, r2, #16
 8002530:	4311      	orrs	r1, r2
 8002532:	4662      	mov	r2, ip
 8002534:	2a38      	cmp	r2, #56	; 0x38
 8002536:	dd00      	ble.n	800253a <__aeabi_dsub+0x72>
 8002538:	e1a1      	b.n	800287e <__aeabi_dsub+0x3b6>
 800253a:	2a1f      	cmp	r2, #31
 800253c:	dd00      	ble.n	8002540 <__aeabi_dsub+0x78>
 800253e:	e216      	b.n	800296e <__aeabi_dsub+0x4a6>
 8002540:	2720      	movs	r7, #32
 8002542:	000c      	movs	r4, r1
 8002544:	1abf      	subs	r7, r7, r2
 8002546:	40bc      	lsls	r4, r7
 8002548:	0002      	movs	r2, r0
 800254a:	46a0      	mov	r8, r4
 800254c:	4664      	mov	r4, ip
 800254e:	40b8      	lsls	r0, r7
 8002550:	40e2      	lsrs	r2, r4
 8002552:	4644      	mov	r4, r8
 8002554:	4314      	orrs	r4, r2
 8002556:	0002      	movs	r2, r0
 8002558:	1e50      	subs	r0, r2, #1
 800255a:	4182      	sbcs	r2, r0
 800255c:	4660      	mov	r0, ip
 800255e:	40c1      	lsrs	r1, r0
 8002560:	4322      	orrs	r2, r4
 8002562:	1a5b      	subs	r3, r3, r1
 8002564:	4649      	mov	r1, r9
 8002566:	1a8c      	subs	r4, r1, r2
 8002568:	45a1      	cmp	r9, r4
 800256a:	4192      	sbcs	r2, r2
 800256c:	4252      	negs	r2, r2
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	4698      	mov	r8, r3
 8002572:	4643      	mov	r3, r8
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	d400      	bmi.n	800257a <__aeabi_dsub+0xb2>
 8002578:	e117      	b.n	80027aa <__aeabi_dsub+0x2e2>
 800257a:	4643      	mov	r3, r8
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	4698      	mov	r8, r3
 8002582:	4643      	mov	r3, r8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0xc2>
 8002588:	e16c      	b.n	8002864 <__aeabi_dsub+0x39c>
 800258a:	4640      	mov	r0, r8
 800258c:	f000 fbec 	bl	8002d68 <__clzsi2>
 8002590:	0002      	movs	r2, r0
 8002592:	3a08      	subs	r2, #8
 8002594:	2120      	movs	r1, #32
 8002596:	0020      	movs	r0, r4
 8002598:	4643      	mov	r3, r8
 800259a:	1a89      	subs	r1, r1, r2
 800259c:	4093      	lsls	r3, r2
 800259e:	40c8      	lsrs	r0, r1
 80025a0:	4094      	lsls	r4, r2
 80025a2:	4303      	orrs	r3, r0
 80025a4:	4296      	cmp	r6, r2
 80025a6:	dd00      	ble.n	80025aa <__aeabi_dsub+0xe2>
 80025a8:	e157      	b.n	800285a <__aeabi_dsub+0x392>
 80025aa:	1b96      	subs	r6, r2, r6
 80025ac:	1c71      	adds	r1, r6, #1
 80025ae:	291f      	cmp	r1, #31
 80025b0:	dd00      	ble.n	80025b4 <__aeabi_dsub+0xec>
 80025b2:	e1cb      	b.n	800294c <__aeabi_dsub+0x484>
 80025b4:	2220      	movs	r2, #32
 80025b6:	0018      	movs	r0, r3
 80025b8:	0026      	movs	r6, r4
 80025ba:	1a52      	subs	r2, r2, r1
 80025bc:	4094      	lsls	r4, r2
 80025be:	4090      	lsls	r0, r2
 80025c0:	40ce      	lsrs	r6, r1
 80025c2:	40cb      	lsrs	r3, r1
 80025c4:	1e62      	subs	r2, r4, #1
 80025c6:	4194      	sbcs	r4, r2
 80025c8:	4330      	orrs	r0, r6
 80025ca:	4698      	mov	r8, r3
 80025cc:	2600      	movs	r6, #0
 80025ce:	4304      	orrs	r4, r0
 80025d0:	0763      	lsls	r3, r4, #29
 80025d2:	d009      	beq.n	80025e8 <__aeabi_dsub+0x120>
 80025d4:	230f      	movs	r3, #15
 80025d6:	4023      	ands	r3, r4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d005      	beq.n	80025e8 <__aeabi_dsub+0x120>
 80025dc:	1d23      	adds	r3, r4, #4
 80025de:	42a3      	cmp	r3, r4
 80025e0:	41a4      	sbcs	r4, r4
 80025e2:	4264      	negs	r4, r4
 80025e4:	44a0      	add	r8, r4
 80025e6:	001c      	movs	r4, r3
 80025e8:	4643      	mov	r3, r8
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	d400      	bmi.n	80025f0 <__aeabi_dsub+0x128>
 80025ee:	e0df      	b.n	80027b0 <__aeabi_dsub+0x2e8>
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <__aeabi_dsub+0x334>)
 80025f2:	3601      	adds	r6, #1
 80025f4:	429e      	cmp	r6, r3
 80025f6:	d100      	bne.n	80025fa <__aeabi_dsub+0x132>
 80025f8:	e0fb      	b.n	80027f2 <__aeabi_dsub+0x32a>
 80025fa:	4642      	mov	r2, r8
 80025fc:	4b80      	ldr	r3, [pc, #512]	; (8002800 <__aeabi_dsub+0x338>)
 80025fe:	08e4      	lsrs	r4, r4, #3
 8002600:	401a      	ands	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	0571      	lsls	r1, r6, #21
 8002606:	0752      	lsls	r2, r2, #29
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4322      	orrs	r2, r4
 800260c:	0b1b      	lsrs	r3, r3, #12
 800260e:	0d49      	lsrs	r1, r1, #21
 8002610:	0509      	lsls	r1, r1, #20
 8002612:	07ed      	lsls	r5, r5, #31
 8002614:	4319      	orrs	r1, r3
 8002616:	4329      	orrs	r1, r5
 8002618:	0010      	movs	r0, r2
 800261a:	bcf0      	pop	{r4, r5, r6, r7}
 800261c:	46bb      	mov	fp, r7
 800261e:	46b2      	mov	sl, r6
 8002620:	46a9      	mov	r9, r5
 8002622:	46a0      	mov	r8, r4
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002626:	1ab4      	subs	r4, r6, r2
 8002628:	46a4      	mov	ip, r4
 800262a:	2c00      	cmp	r4, #0
 800262c:	dd58      	ble.n	80026e0 <__aeabi_dsub+0x218>
 800262e:	2a00      	cmp	r2, #0
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x16c>
 8002632:	e09e      	b.n	8002772 <__aeabi_dsub+0x2aa>
 8002634:	4a71      	ldr	r2, [pc, #452]	; (80027fc <__aeabi_dsub+0x334>)
 8002636:	4296      	cmp	r6, r2
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x174>
 800263a:	e13b      	b.n	80028b4 <__aeabi_dsub+0x3ec>
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0412      	lsls	r2, r2, #16
 8002640:	4311      	orrs	r1, r2
 8002642:	4662      	mov	r2, ip
 8002644:	2a38      	cmp	r2, #56	; 0x38
 8002646:	dd00      	ble.n	800264a <__aeabi_dsub+0x182>
 8002648:	e0c1      	b.n	80027ce <__aeabi_dsub+0x306>
 800264a:	2a1f      	cmp	r2, #31
 800264c:	dc00      	bgt.n	8002650 <__aeabi_dsub+0x188>
 800264e:	e1bb      	b.n	80029c8 <__aeabi_dsub+0x500>
 8002650:	000c      	movs	r4, r1
 8002652:	3a20      	subs	r2, #32
 8002654:	40d4      	lsrs	r4, r2
 8002656:	0022      	movs	r2, r4
 8002658:	4664      	mov	r4, ip
 800265a:	2c20      	cmp	r4, #32
 800265c:	d004      	beq.n	8002668 <__aeabi_dsub+0x1a0>
 800265e:	2740      	movs	r7, #64	; 0x40
 8002660:	1b3f      	subs	r7, r7, r4
 8002662:	40b9      	lsls	r1, r7
 8002664:	4308      	orrs	r0, r1
 8002666:	4680      	mov	r8, r0
 8002668:	4644      	mov	r4, r8
 800266a:	1e61      	subs	r1, r4, #1
 800266c:	418c      	sbcs	r4, r1
 800266e:	4314      	orrs	r4, r2
 8002670:	e0b1      	b.n	80027d6 <__aeabi_dsub+0x30e>
 8002672:	000c      	movs	r4, r1
 8002674:	4304      	orrs	r4, r0
 8002676:	d02a      	beq.n	80026ce <__aeabi_dsub+0x206>
 8002678:	46bb      	mov	fp, r7
 800267a:	42bd      	cmp	r5, r7
 800267c:	d02d      	beq.n	80026da <__aeabi_dsub+0x212>
 800267e:	4c61      	ldr	r4, [pc, #388]	; (8002804 <__aeabi_dsub+0x33c>)
 8002680:	46a4      	mov	ip, r4
 8002682:	44b4      	add	ip, r6
 8002684:	4664      	mov	r4, ip
 8002686:	2c00      	cmp	r4, #0
 8002688:	d05c      	beq.n	8002744 <__aeabi_dsub+0x27c>
 800268a:	1b94      	subs	r4, r2, r6
 800268c:	46a4      	mov	ip, r4
 800268e:	2e00      	cmp	r6, #0
 8002690:	d000      	beq.n	8002694 <__aeabi_dsub+0x1cc>
 8002692:	e115      	b.n	80028c0 <__aeabi_dsub+0x3f8>
 8002694:	464d      	mov	r5, r9
 8002696:	431d      	orrs	r5, r3
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x1d4>
 800269a:	e1c3      	b.n	8002a24 <__aeabi_dsub+0x55c>
 800269c:	1e65      	subs	r5, r4, #1
 800269e:	2c01      	cmp	r4, #1
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x1dc>
 80026a2:	e20c      	b.n	8002abe <__aeabi_dsub+0x5f6>
 80026a4:	4e55      	ldr	r6, [pc, #340]	; (80027fc <__aeabi_dsub+0x334>)
 80026a6:	42b4      	cmp	r4, r6
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x1e4>
 80026aa:	e1f8      	b.n	8002a9e <__aeabi_dsub+0x5d6>
 80026ac:	46ac      	mov	ip, r5
 80026ae:	e10e      	b.n	80028ce <__aeabi_dsub+0x406>
 80026b0:	000a      	movs	r2, r1
 80026b2:	4302      	orrs	r2, r0
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0x1f0>
 80026b6:	e136      	b.n	8002926 <__aeabi_dsub+0x45e>
 80026b8:	0022      	movs	r2, r4
 80026ba:	3a01      	subs	r2, #1
 80026bc:	2c01      	cmp	r4, #1
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x1fa>
 80026c0:	e1c6      	b.n	8002a50 <__aeabi_dsub+0x588>
 80026c2:	4c4e      	ldr	r4, [pc, #312]	; (80027fc <__aeabi_dsub+0x334>)
 80026c4:	45a4      	cmp	ip, r4
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x202>
 80026c8:	e0f4      	b.n	80028b4 <__aeabi_dsub+0x3ec>
 80026ca:	4694      	mov	ip, r2
 80026cc:	e731      	b.n	8002532 <__aeabi_dsub+0x6a>
 80026ce:	2401      	movs	r4, #1
 80026d0:	4067      	eors	r7, r4
 80026d2:	46bb      	mov	fp, r7
 80026d4:	42bd      	cmp	r5, r7
 80026d6:	d000      	beq.n	80026da <__aeabi_dsub+0x212>
 80026d8:	e71c      	b.n	8002514 <__aeabi_dsub+0x4c>
 80026da:	4c4a      	ldr	r4, [pc, #296]	; (8002804 <__aeabi_dsub+0x33c>)
 80026dc:	46a4      	mov	ip, r4
 80026de:	44b4      	add	ip, r6
 80026e0:	4664      	mov	r4, ip
 80026e2:	2c00      	cmp	r4, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x220>
 80026e6:	e0cf      	b.n	8002888 <__aeabi_dsub+0x3c0>
 80026e8:	1b94      	subs	r4, r2, r6
 80026ea:	46a4      	mov	ip, r4
 80026ec:	2e00      	cmp	r6, #0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x22a>
 80026f0:	e15c      	b.n	80029ac <__aeabi_dsub+0x4e4>
 80026f2:	4e42      	ldr	r6, [pc, #264]	; (80027fc <__aeabi_dsub+0x334>)
 80026f4:	42b2      	cmp	r2, r6
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x232>
 80026f8:	e1ec      	b.n	8002ad4 <__aeabi_dsub+0x60c>
 80026fa:	2680      	movs	r6, #128	; 0x80
 80026fc:	0436      	lsls	r6, r6, #16
 80026fe:	4333      	orrs	r3, r6
 8002700:	4664      	mov	r4, ip
 8002702:	2c38      	cmp	r4, #56	; 0x38
 8002704:	dd00      	ble.n	8002708 <__aeabi_dsub+0x240>
 8002706:	e1b3      	b.n	8002a70 <__aeabi_dsub+0x5a8>
 8002708:	2c1f      	cmp	r4, #31
 800270a:	dd00      	ble.n	800270e <__aeabi_dsub+0x246>
 800270c:	e238      	b.n	8002b80 <__aeabi_dsub+0x6b8>
 800270e:	2620      	movs	r6, #32
 8002710:	1b36      	subs	r6, r6, r4
 8002712:	001c      	movs	r4, r3
 8002714:	40b4      	lsls	r4, r6
 8002716:	464f      	mov	r7, r9
 8002718:	46a0      	mov	r8, r4
 800271a:	4664      	mov	r4, ip
 800271c:	40e7      	lsrs	r7, r4
 800271e:	4644      	mov	r4, r8
 8002720:	433c      	orrs	r4, r7
 8002722:	464f      	mov	r7, r9
 8002724:	40b7      	lsls	r7, r6
 8002726:	003e      	movs	r6, r7
 8002728:	1e77      	subs	r7, r6, #1
 800272a:	41be      	sbcs	r6, r7
 800272c:	4334      	orrs	r4, r6
 800272e:	4666      	mov	r6, ip
 8002730:	40f3      	lsrs	r3, r6
 8002732:	18c9      	adds	r1, r1, r3
 8002734:	1824      	adds	r4, r4, r0
 8002736:	4284      	cmp	r4, r0
 8002738:	419b      	sbcs	r3, r3
 800273a:	425b      	negs	r3, r3
 800273c:	4698      	mov	r8, r3
 800273e:	0016      	movs	r6, r2
 8002740:	4488      	add	r8, r1
 8002742:	e04e      	b.n	80027e2 <__aeabi_dsub+0x31a>
 8002744:	4a30      	ldr	r2, [pc, #192]	; (8002808 <__aeabi_dsub+0x340>)
 8002746:	1c74      	adds	r4, r6, #1
 8002748:	4214      	tst	r4, r2
 800274a:	d000      	beq.n	800274e <__aeabi_dsub+0x286>
 800274c:	e0d6      	b.n	80028fc <__aeabi_dsub+0x434>
 800274e:	464a      	mov	r2, r9
 8002750:	431a      	orrs	r2, r3
 8002752:	2e00      	cmp	r6, #0
 8002754:	d000      	beq.n	8002758 <__aeabi_dsub+0x290>
 8002756:	e15b      	b.n	8002a10 <__aeabi_dsub+0x548>
 8002758:	2a00      	cmp	r2, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dsub+0x296>
 800275c:	e1a5      	b.n	8002aaa <__aeabi_dsub+0x5e2>
 800275e:	000a      	movs	r2, r1
 8002760:	4302      	orrs	r2, r0
 8002762:	d000      	beq.n	8002766 <__aeabi_dsub+0x29e>
 8002764:	e1bb      	b.n	8002ade <__aeabi_dsub+0x616>
 8002766:	464a      	mov	r2, r9
 8002768:	0759      	lsls	r1, r3, #29
 800276a:	08d2      	lsrs	r2, r2, #3
 800276c:	430a      	orrs	r2, r1
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	e027      	b.n	80027c2 <__aeabi_dsub+0x2fa>
 8002772:	000a      	movs	r2, r1
 8002774:	4302      	orrs	r2, r0
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0x2b2>
 8002778:	e174      	b.n	8002a64 <__aeabi_dsub+0x59c>
 800277a:	0022      	movs	r2, r4
 800277c:	3a01      	subs	r2, #1
 800277e:	2c01      	cmp	r4, #1
 8002780:	d005      	beq.n	800278e <__aeabi_dsub+0x2c6>
 8002782:	4c1e      	ldr	r4, [pc, #120]	; (80027fc <__aeabi_dsub+0x334>)
 8002784:	45a4      	cmp	ip, r4
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x2c2>
 8002788:	e094      	b.n	80028b4 <__aeabi_dsub+0x3ec>
 800278a:	4694      	mov	ip, r2
 800278c:	e759      	b.n	8002642 <__aeabi_dsub+0x17a>
 800278e:	4448      	add	r0, r9
 8002790:	4548      	cmp	r0, r9
 8002792:	4192      	sbcs	r2, r2
 8002794:	185b      	adds	r3, r3, r1
 8002796:	4698      	mov	r8, r3
 8002798:	0004      	movs	r4, r0
 800279a:	4252      	negs	r2, r2
 800279c:	4490      	add	r8, r2
 800279e:	4643      	mov	r3, r8
 80027a0:	2602      	movs	r6, #2
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	d500      	bpl.n	80027a8 <__aeabi_dsub+0x2e0>
 80027a6:	e0c4      	b.n	8002932 <__aeabi_dsub+0x46a>
 80027a8:	3e01      	subs	r6, #1
 80027aa:	0763      	lsls	r3, r4, #29
 80027ac:	d000      	beq.n	80027b0 <__aeabi_dsub+0x2e8>
 80027ae:	e711      	b.n	80025d4 <__aeabi_dsub+0x10c>
 80027b0:	4643      	mov	r3, r8
 80027b2:	46b4      	mov	ip, r6
 80027b4:	0759      	lsls	r1, r3, #29
 80027b6:	08e2      	lsrs	r2, r4, #3
 80027b8:	430a      	orrs	r2, r1
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x334>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d040      	beq.n	8002844 <__aeabi_dsub+0x37c>
 80027c2:	4661      	mov	r1, ip
 80027c4:	031b      	lsls	r3, r3, #12
 80027c6:	0549      	lsls	r1, r1, #21
 80027c8:	0b1b      	lsrs	r3, r3, #12
 80027ca:	0d49      	lsrs	r1, r1, #21
 80027cc:	e720      	b.n	8002610 <__aeabi_dsub+0x148>
 80027ce:	4301      	orrs	r1, r0
 80027d0:	000c      	movs	r4, r1
 80027d2:	1e61      	subs	r1, r4, #1
 80027d4:	418c      	sbcs	r4, r1
 80027d6:	444c      	add	r4, r9
 80027d8:	454c      	cmp	r4, r9
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	4690      	mov	r8, r2
 80027e0:	4498      	add	r8, r3
 80027e2:	4643      	mov	r3, r8
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5e0      	bpl.n	80027aa <__aeabi_dsub+0x2e2>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x334>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x32a>
 80027f0:	e09f      	b.n	8002932 <__aeabi_dsub+0x46a>
 80027f2:	0031      	movs	r1, r6
 80027f4:	2300      	movs	r3, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	e70a      	b.n	8002610 <__aeabi_dsub+0x148>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	2a00      	cmp	r2, #0
 800280e:	d100      	bne.n	8002812 <__aeabi_dsub+0x34a>
 8002810:	e160      	b.n	8002ad4 <__aeabi_dsub+0x60c>
 8002812:	000a      	movs	r2, r1
 8002814:	4302      	orrs	r2, r0
 8002816:	d04d      	beq.n	80028b4 <__aeabi_dsub+0x3ec>
 8002818:	464a      	mov	r2, r9
 800281a:	075c      	lsls	r4, r3, #29
 800281c:	08d2      	lsrs	r2, r2, #3
 800281e:	4322      	orrs	r2, r4
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	08db      	lsrs	r3, r3, #3
 8002824:	0324      	lsls	r4, r4, #12
 8002826:	4223      	tst	r3, r4
 8002828:	d007      	beq.n	800283a <__aeabi_dsub+0x372>
 800282a:	08ce      	lsrs	r6, r1, #3
 800282c:	4226      	tst	r6, r4
 800282e:	d104      	bne.n	800283a <__aeabi_dsub+0x372>
 8002830:	465d      	mov	r5, fp
 8002832:	0033      	movs	r3, r6
 8002834:	08c2      	lsrs	r2, r0, #3
 8002836:	0749      	lsls	r1, r1, #29
 8002838:	430a      	orrs	r2, r1
 800283a:	0f51      	lsrs	r1, r2, #29
 800283c:	00d2      	lsls	r2, r2, #3
 800283e:	08d2      	lsrs	r2, r2, #3
 8002840:	0749      	lsls	r1, r1, #29
 8002842:	430a      	orrs	r2, r1
 8002844:	0011      	movs	r1, r2
 8002846:	4319      	orrs	r1, r3
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x384>
 800284a:	e1c8      	b.n	8002bde <__aeabi_dsub+0x716>
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	0309      	lsls	r1, r1, #12
 8002850:	430b      	orrs	r3, r1
 8002852:	031b      	lsls	r3, r3, #12
 8002854:	49d5      	ldr	r1, [pc, #852]	; (8002bac <__aeabi_dsub+0x6e4>)
 8002856:	0b1b      	lsrs	r3, r3, #12
 8002858:	e6da      	b.n	8002610 <__aeabi_dsub+0x148>
 800285a:	49d5      	ldr	r1, [pc, #852]	; (8002bb0 <__aeabi_dsub+0x6e8>)
 800285c:	1ab6      	subs	r6, r6, r2
 800285e:	400b      	ands	r3, r1
 8002860:	4698      	mov	r8, r3
 8002862:	e6b5      	b.n	80025d0 <__aeabi_dsub+0x108>
 8002864:	0020      	movs	r0, r4
 8002866:	f000 fa7f 	bl	8002d68 <__clzsi2>
 800286a:	0002      	movs	r2, r0
 800286c:	3218      	adds	r2, #24
 800286e:	2a1f      	cmp	r2, #31
 8002870:	dc00      	bgt.n	8002874 <__aeabi_dsub+0x3ac>
 8002872:	e68f      	b.n	8002594 <__aeabi_dsub+0xcc>
 8002874:	0023      	movs	r3, r4
 8002876:	3808      	subs	r0, #8
 8002878:	4083      	lsls	r3, r0
 800287a:	2400      	movs	r4, #0
 800287c:	e692      	b.n	80025a4 <__aeabi_dsub+0xdc>
 800287e:	4308      	orrs	r0, r1
 8002880:	0002      	movs	r2, r0
 8002882:	1e50      	subs	r0, r2, #1
 8002884:	4182      	sbcs	r2, r0
 8002886:	e66d      	b.n	8002564 <__aeabi_dsub+0x9c>
 8002888:	4cca      	ldr	r4, [pc, #808]	; (8002bb4 <__aeabi_dsub+0x6ec>)
 800288a:	1c72      	adds	r2, r6, #1
 800288c:	4222      	tst	r2, r4
 800288e:	d000      	beq.n	8002892 <__aeabi_dsub+0x3ca>
 8002890:	e0ad      	b.n	80029ee <__aeabi_dsub+0x526>
 8002892:	464a      	mov	r2, r9
 8002894:	431a      	orrs	r2, r3
 8002896:	2e00      	cmp	r6, #0
 8002898:	d1b8      	bne.n	800280c <__aeabi_dsub+0x344>
 800289a:	2a00      	cmp	r2, #0
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x3d8>
 800289e:	e158      	b.n	8002b52 <__aeabi_dsub+0x68a>
 80028a0:	000a      	movs	r2, r1
 80028a2:	4302      	orrs	r2, r0
 80028a4:	d000      	beq.n	80028a8 <__aeabi_dsub+0x3e0>
 80028a6:	e159      	b.n	8002b5c <__aeabi_dsub+0x694>
 80028a8:	464a      	mov	r2, r9
 80028aa:	0759      	lsls	r1, r3, #29
 80028ac:	08d2      	lsrs	r2, r2, #3
 80028ae:	430a      	orrs	r2, r1
 80028b0:	08db      	lsrs	r3, r3, #3
 80028b2:	e786      	b.n	80027c2 <__aeabi_dsub+0x2fa>
 80028b4:	464a      	mov	r2, r9
 80028b6:	0759      	lsls	r1, r3, #29
 80028b8:	08d2      	lsrs	r2, r2, #3
 80028ba:	430a      	orrs	r2, r1
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	e7c1      	b.n	8002844 <__aeabi_dsub+0x37c>
 80028c0:	4dba      	ldr	r5, [pc, #744]	; (8002bac <__aeabi_dsub+0x6e4>)
 80028c2:	42aa      	cmp	r2, r5
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x400>
 80028c6:	e11e      	b.n	8002b06 <__aeabi_dsub+0x63e>
 80028c8:	2580      	movs	r5, #128	; 0x80
 80028ca:	042d      	lsls	r5, r5, #16
 80028cc:	432b      	orrs	r3, r5
 80028ce:	4664      	mov	r4, ip
 80028d0:	2c38      	cmp	r4, #56	; 0x38
 80028d2:	dc5d      	bgt.n	8002990 <__aeabi_dsub+0x4c8>
 80028d4:	2c1f      	cmp	r4, #31
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0x412>
 80028d8:	e0d0      	b.n	8002a7c <__aeabi_dsub+0x5b4>
 80028da:	2520      	movs	r5, #32
 80028dc:	4667      	mov	r7, ip
 80028de:	1b2d      	subs	r5, r5, r4
 80028e0:	464e      	mov	r6, r9
 80028e2:	001c      	movs	r4, r3
 80028e4:	40fe      	lsrs	r6, r7
 80028e6:	40ac      	lsls	r4, r5
 80028e8:	4334      	orrs	r4, r6
 80028ea:	464e      	mov	r6, r9
 80028ec:	40ae      	lsls	r6, r5
 80028ee:	0035      	movs	r5, r6
 80028f0:	40fb      	lsrs	r3, r7
 80028f2:	1e6e      	subs	r6, r5, #1
 80028f4:	41b5      	sbcs	r5, r6
 80028f6:	1ac9      	subs	r1, r1, r3
 80028f8:	432c      	orrs	r4, r5
 80028fa:	e04e      	b.n	800299a <__aeabi_dsub+0x4d2>
 80028fc:	464a      	mov	r2, r9
 80028fe:	1a14      	subs	r4, r2, r0
 8002900:	45a1      	cmp	r9, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	4252      	negs	r2, r2
 8002906:	4690      	mov	r8, r2
 8002908:	1a5f      	subs	r7, r3, r1
 800290a:	003a      	movs	r2, r7
 800290c:	4647      	mov	r7, r8
 800290e:	1bd2      	subs	r2, r2, r7
 8002910:	4690      	mov	r8, r2
 8002912:	0212      	lsls	r2, r2, #8
 8002914:	d500      	bpl.n	8002918 <__aeabi_dsub+0x450>
 8002916:	e08b      	b.n	8002a30 <__aeabi_dsub+0x568>
 8002918:	4642      	mov	r2, r8
 800291a:	4322      	orrs	r2, r4
 800291c:	d000      	beq.n	8002920 <__aeabi_dsub+0x458>
 800291e:	e630      	b.n	8002582 <__aeabi_dsub+0xba>
 8002920:	2300      	movs	r3, #0
 8002922:	2500      	movs	r5, #0
 8002924:	e74d      	b.n	80027c2 <__aeabi_dsub+0x2fa>
 8002926:	464a      	mov	r2, r9
 8002928:	0759      	lsls	r1, r3, #29
 800292a:	08d2      	lsrs	r2, r2, #3
 800292c:	430a      	orrs	r2, r1
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	e744      	b.n	80027bc <__aeabi_dsub+0x2f4>
 8002932:	4642      	mov	r2, r8
 8002934:	4b9e      	ldr	r3, [pc, #632]	; (8002bb0 <__aeabi_dsub+0x6e8>)
 8002936:	0861      	lsrs	r1, r4, #1
 8002938:	401a      	ands	r2, r3
 800293a:	0013      	movs	r3, r2
 800293c:	2201      	movs	r2, #1
 800293e:	4014      	ands	r4, r2
 8002940:	430c      	orrs	r4, r1
 8002942:	07da      	lsls	r2, r3, #31
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	4698      	mov	r8, r3
 8002948:	4314      	orrs	r4, r2
 800294a:	e641      	b.n	80025d0 <__aeabi_dsub+0x108>
 800294c:	001a      	movs	r2, r3
 800294e:	3e1f      	subs	r6, #31
 8002950:	40f2      	lsrs	r2, r6
 8002952:	0016      	movs	r6, r2
 8002954:	2920      	cmp	r1, #32
 8002956:	d003      	beq.n	8002960 <__aeabi_dsub+0x498>
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	1a51      	subs	r1, r2, r1
 800295c:	408b      	lsls	r3, r1
 800295e:	431c      	orrs	r4, r3
 8002960:	1e62      	subs	r2, r4, #1
 8002962:	4194      	sbcs	r4, r2
 8002964:	2300      	movs	r3, #0
 8002966:	4334      	orrs	r4, r6
 8002968:	4698      	mov	r8, r3
 800296a:	2600      	movs	r6, #0
 800296c:	e71d      	b.n	80027aa <__aeabi_dsub+0x2e2>
 800296e:	000c      	movs	r4, r1
 8002970:	3a20      	subs	r2, #32
 8002972:	40d4      	lsrs	r4, r2
 8002974:	0022      	movs	r2, r4
 8002976:	4664      	mov	r4, ip
 8002978:	2c20      	cmp	r4, #32
 800297a:	d004      	beq.n	8002986 <__aeabi_dsub+0x4be>
 800297c:	2740      	movs	r7, #64	; 0x40
 800297e:	1b3f      	subs	r7, r7, r4
 8002980:	40b9      	lsls	r1, r7
 8002982:	4308      	orrs	r0, r1
 8002984:	4680      	mov	r8, r0
 8002986:	4644      	mov	r4, r8
 8002988:	1e61      	subs	r1, r4, #1
 800298a:	418c      	sbcs	r4, r1
 800298c:	4322      	orrs	r2, r4
 800298e:	e5e9      	b.n	8002564 <__aeabi_dsub+0x9c>
 8002990:	464c      	mov	r4, r9
 8002992:	4323      	orrs	r3, r4
 8002994:	001c      	movs	r4, r3
 8002996:	1e63      	subs	r3, r4, #1
 8002998:	419c      	sbcs	r4, r3
 800299a:	1b04      	subs	r4, r0, r4
 800299c:	42a0      	cmp	r0, r4
 800299e:	419b      	sbcs	r3, r3
 80029a0:	425b      	negs	r3, r3
 80029a2:	1acb      	subs	r3, r1, r3
 80029a4:	4698      	mov	r8, r3
 80029a6:	465d      	mov	r5, fp
 80029a8:	0016      	movs	r6, r2
 80029aa:	e5e2      	b.n	8002572 <__aeabi_dsub+0xaa>
 80029ac:	464e      	mov	r6, r9
 80029ae:	431e      	orrs	r6, r3
 80029b0:	d100      	bne.n	80029b4 <__aeabi_dsub+0x4ec>
 80029b2:	e0ae      	b.n	8002b12 <__aeabi_dsub+0x64a>
 80029b4:	1e66      	subs	r6, r4, #1
 80029b6:	2c01      	cmp	r4, #1
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x4f4>
 80029ba:	e0fd      	b.n	8002bb8 <__aeabi_dsub+0x6f0>
 80029bc:	4f7b      	ldr	r7, [pc, #492]	; (8002bac <__aeabi_dsub+0x6e4>)
 80029be:	42bc      	cmp	r4, r7
 80029c0:	d100      	bne.n	80029c4 <__aeabi_dsub+0x4fc>
 80029c2:	e107      	b.n	8002bd4 <__aeabi_dsub+0x70c>
 80029c4:	46b4      	mov	ip, r6
 80029c6:	e69b      	b.n	8002700 <__aeabi_dsub+0x238>
 80029c8:	4664      	mov	r4, ip
 80029ca:	2220      	movs	r2, #32
 80029cc:	1b12      	subs	r2, r2, r4
 80029ce:	000c      	movs	r4, r1
 80029d0:	4094      	lsls	r4, r2
 80029d2:	0007      	movs	r7, r0
 80029d4:	4090      	lsls	r0, r2
 80029d6:	46a0      	mov	r8, r4
 80029d8:	4664      	mov	r4, ip
 80029da:	1e42      	subs	r2, r0, #1
 80029dc:	4190      	sbcs	r0, r2
 80029de:	4662      	mov	r2, ip
 80029e0:	40e7      	lsrs	r7, r4
 80029e2:	4644      	mov	r4, r8
 80029e4:	40d1      	lsrs	r1, r2
 80029e6:	433c      	orrs	r4, r7
 80029e8:	4304      	orrs	r4, r0
 80029ea:	185b      	adds	r3, r3, r1
 80029ec:	e6f3      	b.n	80027d6 <__aeabi_dsub+0x30e>
 80029ee:	4c6f      	ldr	r4, [pc, #444]	; (8002bac <__aeabi_dsub+0x6e4>)
 80029f0:	42a2      	cmp	r2, r4
 80029f2:	d100      	bne.n	80029f6 <__aeabi_dsub+0x52e>
 80029f4:	e0d5      	b.n	8002ba2 <__aeabi_dsub+0x6da>
 80029f6:	4448      	add	r0, r9
 80029f8:	185b      	adds	r3, r3, r1
 80029fa:	4548      	cmp	r0, r9
 80029fc:	4189      	sbcs	r1, r1
 80029fe:	4249      	negs	r1, r1
 8002a00:	185b      	adds	r3, r3, r1
 8002a02:	07dc      	lsls	r4, r3, #31
 8002a04:	0840      	lsrs	r0, r0, #1
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	4698      	mov	r8, r3
 8002a0a:	0016      	movs	r6, r2
 8002a0c:	4304      	orrs	r4, r0
 8002a0e:	e6cc      	b.n	80027aa <__aeabi_dsub+0x2e2>
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	d000      	beq.n	8002a16 <__aeabi_dsub+0x54e>
 8002a14:	e082      	b.n	8002b1c <__aeabi_dsub+0x654>
 8002a16:	000a      	movs	r2, r1
 8002a18:	4302      	orrs	r2, r0
 8002a1a:	d140      	bne.n	8002a9e <__aeabi_dsub+0x5d6>
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	2500      	movs	r5, #0
 8002a20:	031b      	lsls	r3, r3, #12
 8002a22:	e713      	b.n	800284c <__aeabi_dsub+0x384>
 8002a24:	074b      	lsls	r3, r1, #29
 8002a26:	08c2      	lsrs	r2, r0, #3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	465d      	mov	r5, fp
 8002a2c:	08cb      	lsrs	r3, r1, #3
 8002a2e:	e6c5      	b.n	80027bc <__aeabi_dsub+0x2f4>
 8002a30:	464a      	mov	r2, r9
 8002a32:	1a84      	subs	r4, r0, r2
 8002a34:	42a0      	cmp	r0, r4
 8002a36:	4192      	sbcs	r2, r2
 8002a38:	1acb      	subs	r3, r1, r3
 8002a3a:	4252      	negs	r2, r2
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	4698      	mov	r8, r3
 8002a40:	465d      	mov	r5, fp
 8002a42:	e59e      	b.n	8002582 <__aeabi_dsub+0xba>
 8002a44:	464a      	mov	r2, r9
 8002a46:	0759      	lsls	r1, r3, #29
 8002a48:	08d2      	lsrs	r2, r2, #3
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	e6f9      	b.n	8002844 <__aeabi_dsub+0x37c>
 8002a50:	464a      	mov	r2, r9
 8002a52:	1a14      	subs	r4, r2, r0
 8002a54:	45a1      	cmp	r9, r4
 8002a56:	4192      	sbcs	r2, r2
 8002a58:	1a5b      	subs	r3, r3, r1
 8002a5a:	4252      	negs	r2, r2
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	4698      	mov	r8, r3
 8002a60:	2601      	movs	r6, #1
 8002a62:	e586      	b.n	8002572 <__aeabi_dsub+0xaa>
 8002a64:	464a      	mov	r2, r9
 8002a66:	0759      	lsls	r1, r3, #29
 8002a68:	08d2      	lsrs	r2, r2, #3
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	08db      	lsrs	r3, r3, #3
 8002a6e:	e6a5      	b.n	80027bc <__aeabi_dsub+0x2f4>
 8002a70:	464c      	mov	r4, r9
 8002a72:	4323      	orrs	r3, r4
 8002a74:	001c      	movs	r4, r3
 8002a76:	1e63      	subs	r3, r4, #1
 8002a78:	419c      	sbcs	r4, r3
 8002a7a:	e65b      	b.n	8002734 <__aeabi_dsub+0x26c>
 8002a7c:	4665      	mov	r5, ip
 8002a7e:	001e      	movs	r6, r3
 8002a80:	3d20      	subs	r5, #32
 8002a82:	40ee      	lsrs	r6, r5
 8002a84:	2c20      	cmp	r4, #32
 8002a86:	d005      	beq.n	8002a94 <__aeabi_dsub+0x5cc>
 8002a88:	2540      	movs	r5, #64	; 0x40
 8002a8a:	1b2d      	subs	r5, r5, r4
 8002a8c:	40ab      	lsls	r3, r5
 8002a8e:	464c      	mov	r4, r9
 8002a90:	431c      	orrs	r4, r3
 8002a92:	46a2      	mov	sl, r4
 8002a94:	4654      	mov	r4, sl
 8002a96:	1e63      	subs	r3, r4, #1
 8002a98:	419c      	sbcs	r4, r3
 8002a9a:	4334      	orrs	r4, r6
 8002a9c:	e77d      	b.n	800299a <__aeabi_dsub+0x4d2>
 8002a9e:	074b      	lsls	r3, r1, #29
 8002aa0:	08c2      	lsrs	r2, r0, #3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	465d      	mov	r5, fp
 8002aa6:	08cb      	lsrs	r3, r1, #3
 8002aa8:	e6cc      	b.n	8002844 <__aeabi_dsub+0x37c>
 8002aaa:	000a      	movs	r2, r1
 8002aac:	4302      	orrs	r2, r0
 8002aae:	d100      	bne.n	8002ab2 <__aeabi_dsub+0x5ea>
 8002ab0:	e736      	b.n	8002920 <__aeabi_dsub+0x458>
 8002ab2:	074b      	lsls	r3, r1, #29
 8002ab4:	08c2      	lsrs	r2, r0, #3
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	465d      	mov	r5, fp
 8002aba:	08cb      	lsrs	r3, r1, #3
 8002abc:	e681      	b.n	80027c2 <__aeabi_dsub+0x2fa>
 8002abe:	464a      	mov	r2, r9
 8002ac0:	1a84      	subs	r4, r0, r2
 8002ac2:	42a0      	cmp	r0, r4
 8002ac4:	4192      	sbcs	r2, r2
 8002ac6:	1acb      	subs	r3, r1, r3
 8002ac8:	4252      	negs	r2, r2
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	4698      	mov	r8, r3
 8002ace:	465d      	mov	r5, fp
 8002ad0:	2601      	movs	r6, #1
 8002ad2:	e54e      	b.n	8002572 <__aeabi_dsub+0xaa>
 8002ad4:	074b      	lsls	r3, r1, #29
 8002ad6:	08c2      	lsrs	r2, r0, #3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	08cb      	lsrs	r3, r1, #3
 8002adc:	e6b2      	b.n	8002844 <__aeabi_dsub+0x37c>
 8002ade:	464a      	mov	r2, r9
 8002ae0:	1a14      	subs	r4, r2, r0
 8002ae2:	45a1      	cmp	r9, r4
 8002ae4:	4192      	sbcs	r2, r2
 8002ae6:	1a5f      	subs	r7, r3, r1
 8002ae8:	4252      	negs	r2, r2
 8002aea:	1aba      	subs	r2, r7, r2
 8002aec:	4690      	mov	r8, r2
 8002aee:	0212      	lsls	r2, r2, #8
 8002af0:	d56b      	bpl.n	8002bca <__aeabi_dsub+0x702>
 8002af2:	464a      	mov	r2, r9
 8002af4:	1a84      	subs	r4, r0, r2
 8002af6:	42a0      	cmp	r0, r4
 8002af8:	4192      	sbcs	r2, r2
 8002afa:	1acb      	subs	r3, r1, r3
 8002afc:	4252      	negs	r2, r2
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	4698      	mov	r8, r3
 8002b02:	465d      	mov	r5, fp
 8002b04:	e564      	b.n	80025d0 <__aeabi_dsub+0x108>
 8002b06:	074b      	lsls	r3, r1, #29
 8002b08:	08c2      	lsrs	r2, r0, #3
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	465d      	mov	r5, fp
 8002b0e:	08cb      	lsrs	r3, r1, #3
 8002b10:	e698      	b.n	8002844 <__aeabi_dsub+0x37c>
 8002b12:	074b      	lsls	r3, r1, #29
 8002b14:	08c2      	lsrs	r2, r0, #3
 8002b16:	431a      	orrs	r2, r3
 8002b18:	08cb      	lsrs	r3, r1, #3
 8002b1a:	e64f      	b.n	80027bc <__aeabi_dsub+0x2f4>
 8002b1c:	000a      	movs	r2, r1
 8002b1e:	4302      	orrs	r2, r0
 8002b20:	d090      	beq.n	8002a44 <__aeabi_dsub+0x57c>
 8002b22:	464a      	mov	r2, r9
 8002b24:	075c      	lsls	r4, r3, #29
 8002b26:	08d2      	lsrs	r2, r2, #3
 8002b28:	4314      	orrs	r4, r2
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	0312      	lsls	r2, r2, #12
 8002b30:	4213      	tst	r3, r2
 8002b32:	d008      	beq.n	8002b46 <__aeabi_dsub+0x67e>
 8002b34:	08ce      	lsrs	r6, r1, #3
 8002b36:	4216      	tst	r6, r2
 8002b38:	d105      	bne.n	8002b46 <__aeabi_dsub+0x67e>
 8002b3a:	08c0      	lsrs	r0, r0, #3
 8002b3c:	0749      	lsls	r1, r1, #29
 8002b3e:	4308      	orrs	r0, r1
 8002b40:	0004      	movs	r4, r0
 8002b42:	465d      	mov	r5, fp
 8002b44:	0033      	movs	r3, r6
 8002b46:	0f61      	lsrs	r1, r4, #29
 8002b48:	00e2      	lsls	r2, r4, #3
 8002b4a:	0749      	lsls	r1, r1, #29
 8002b4c:	08d2      	lsrs	r2, r2, #3
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	e678      	b.n	8002844 <__aeabi_dsub+0x37c>
 8002b52:	074b      	lsls	r3, r1, #29
 8002b54:	08c2      	lsrs	r2, r0, #3
 8002b56:	431a      	orrs	r2, r3
 8002b58:	08cb      	lsrs	r3, r1, #3
 8002b5a:	e632      	b.n	80027c2 <__aeabi_dsub+0x2fa>
 8002b5c:	4448      	add	r0, r9
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	4548      	cmp	r0, r9
 8002b62:	4192      	sbcs	r2, r2
 8002b64:	4698      	mov	r8, r3
 8002b66:	4252      	negs	r2, r2
 8002b68:	4490      	add	r8, r2
 8002b6a:	4643      	mov	r3, r8
 8002b6c:	0004      	movs	r4, r0
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	d400      	bmi.n	8002b74 <__aeabi_dsub+0x6ac>
 8002b72:	e61a      	b.n	80027aa <__aeabi_dsub+0x2e2>
 8002b74:	4642      	mov	r2, r8
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <__aeabi_dsub+0x6e8>)
 8002b78:	2601      	movs	r6, #1
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	4690      	mov	r8, r2
 8002b7e:	e614      	b.n	80027aa <__aeabi_dsub+0x2e2>
 8002b80:	4666      	mov	r6, ip
 8002b82:	001f      	movs	r7, r3
 8002b84:	3e20      	subs	r6, #32
 8002b86:	40f7      	lsrs	r7, r6
 8002b88:	2c20      	cmp	r4, #32
 8002b8a:	d005      	beq.n	8002b98 <__aeabi_dsub+0x6d0>
 8002b8c:	2640      	movs	r6, #64	; 0x40
 8002b8e:	1b36      	subs	r6, r6, r4
 8002b90:	40b3      	lsls	r3, r6
 8002b92:	464c      	mov	r4, r9
 8002b94:	431c      	orrs	r4, r3
 8002b96:	46a2      	mov	sl, r4
 8002b98:	4654      	mov	r4, sl
 8002b9a:	1e63      	subs	r3, r4, #1
 8002b9c:	419c      	sbcs	r4, r3
 8002b9e:	433c      	orrs	r4, r7
 8002ba0:	e5c8      	b.n	8002734 <__aeabi_dsub+0x26c>
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	e532      	b.n	8002610 <__aeabi_dsub+0x148>
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	000007ff 	.word	0x000007ff
 8002bb0:	ff7fffff 	.word	0xff7fffff
 8002bb4:	000007fe 	.word	0x000007fe
 8002bb8:	464a      	mov	r2, r9
 8002bba:	1814      	adds	r4, r2, r0
 8002bbc:	4284      	cmp	r4, r0
 8002bbe:	4192      	sbcs	r2, r2
 8002bc0:	185b      	adds	r3, r3, r1
 8002bc2:	4698      	mov	r8, r3
 8002bc4:	4252      	negs	r2, r2
 8002bc6:	4490      	add	r8, r2
 8002bc8:	e5e9      	b.n	800279e <__aeabi_dsub+0x2d6>
 8002bca:	4642      	mov	r2, r8
 8002bcc:	4322      	orrs	r2, r4
 8002bce:	d100      	bne.n	8002bd2 <__aeabi_dsub+0x70a>
 8002bd0:	e6a6      	b.n	8002920 <__aeabi_dsub+0x458>
 8002bd2:	e5ea      	b.n	80027aa <__aeabi_dsub+0x2e2>
 8002bd4:	074b      	lsls	r3, r1, #29
 8002bd6:	08c2      	lsrs	r2, r0, #3
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	08cb      	lsrs	r3, r1, #3
 8002bdc:	e632      	b.n	8002844 <__aeabi_dsub+0x37c>
 8002bde:	2200      	movs	r2, #0
 8002be0:	4901      	ldr	r1, [pc, #4]	; (8002be8 <__aeabi_dsub+0x720>)
 8002be2:	0013      	movs	r3, r2
 8002be4:	e514      	b.n	8002610 <__aeabi_dsub+0x148>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	000007ff 	.word	0x000007ff

08002bec <__aeabi_dcmpun>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	0005      	movs	r5, r0
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <__aeabi_dcmpun+0x38>)
 8002bf2:	030c      	lsls	r4, r1, #12
 8002bf4:	0016      	movs	r6, r2
 8002bf6:	0049      	lsls	r1, r1, #1
 8002bf8:	031a      	lsls	r2, r3, #12
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	0b24      	lsrs	r4, r4, #12
 8002bfe:	0d49      	lsrs	r1, r1, #21
 8002c00:	0b12      	lsrs	r2, r2, #12
 8002c02:	0d5b      	lsrs	r3, r3, #21
 8002c04:	4281      	cmp	r1, r0
 8002c06:	d008      	beq.n	8002c1a <__aeabi_dcmpun+0x2e>
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <__aeabi_dcmpun+0x38>)
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d103      	bne.n	8002c18 <__aeabi_dcmpun+0x2c>
 8002c10:	4332      	orrs	r2, r6
 8002c12:	0010      	movs	r0, r2
 8002c14:	1e42      	subs	r2, r0, #1
 8002c16:	4190      	sbcs	r0, r2
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	d1fb      	bne.n	8002c18 <__aeabi_dcmpun+0x2c>
 8002c20:	e7f2      	b.n	8002c08 <__aeabi_dcmpun+0x1c>
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	000007ff 	.word	0x000007ff

08002c28 <__aeabi_d2iz>:
 8002c28:	000a      	movs	r2, r1
 8002c2a:	b530      	push	{r4, r5, lr}
 8002c2c:	4c13      	ldr	r4, [pc, #76]	; (8002c7c <__aeabi_d2iz+0x54>)
 8002c2e:	0053      	lsls	r3, r2, #1
 8002c30:	0309      	lsls	r1, r1, #12
 8002c32:	0005      	movs	r5, r0
 8002c34:	0b09      	lsrs	r1, r1, #12
 8002c36:	2000      	movs	r0, #0
 8002c38:	0d5b      	lsrs	r3, r3, #21
 8002c3a:	0fd2      	lsrs	r2, r2, #31
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	dd04      	ble.n	8002c4a <__aeabi_d2iz+0x22>
 8002c40:	480f      	ldr	r0, [pc, #60]	; (8002c80 <__aeabi_d2iz+0x58>)
 8002c42:	4283      	cmp	r3, r0
 8002c44:	dd02      	ble.n	8002c4c <__aeabi_d2iz+0x24>
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <__aeabi_d2iz+0x5c>)
 8002c48:	18d0      	adds	r0, r2, r3
 8002c4a:	bd30      	pop	{r4, r5, pc}
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	0340      	lsls	r0, r0, #13
 8002c50:	4301      	orrs	r1, r0
 8002c52:	480d      	ldr	r0, [pc, #52]	; (8002c88 <__aeabi_d2iz+0x60>)
 8002c54:	1ac0      	subs	r0, r0, r3
 8002c56:	281f      	cmp	r0, #31
 8002c58:	dd08      	ble.n	8002c6c <__aeabi_d2iz+0x44>
 8002c5a:	480c      	ldr	r0, [pc, #48]	; (8002c8c <__aeabi_d2iz+0x64>)
 8002c5c:	1ac3      	subs	r3, r0, r3
 8002c5e:	40d9      	lsrs	r1, r3
 8002c60:	000b      	movs	r3, r1
 8002c62:	4258      	negs	r0, r3
 8002c64:	2a00      	cmp	r2, #0
 8002c66:	d1f0      	bne.n	8002c4a <__aeabi_d2iz+0x22>
 8002c68:	0018      	movs	r0, r3
 8002c6a:	e7ee      	b.n	8002c4a <__aeabi_d2iz+0x22>
 8002c6c:	4c08      	ldr	r4, [pc, #32]	; (8002c90 <__aeabi_d2iz+0x68>)
 8002c6e:	40c5      	lsrs	r5, r0
 8002c70:	46a4      	mov	ip, r4
 8002c72:	4463      	add	r3, ip
 8002c74:	4099      	lsls	r1, r3
 8002c76:	000b      	movs	r3, r1
 8002c78:	432b      	orrs	r3, r5
 8002c7a:	e7f2      	b.n	8002c62 <__aeabi_d2iz+0x3a>
 8002c7c:	000003fe 	.word	0x000003fe
 8002c80:	0000041d 	.word	0x0000041d
 8002c84:	7fffffff 	.word	0x7fffffff
 8002c88:	00000433 	.word	0x00000433
 8002c8c:	00000413 	.word	0x00000413
 8002c90:	fffffbed 	.word	0xfffffbed

08002c94 <__aeabi_i2d>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d016      	beq.n	8002cc8 <__aeabi_i2d+0x34>
 8002c9a:	17c3      	asrs	r3, r0, #31
 8002c9c:	18c5      	adds	r5, r0, r3
 8002c9e:	405d      	eors	r5, r3
 8002ca0:	0fc4      	lsrs	r4, r0, #31
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	f000 f860 	bl	8002d68 <__clzsi2>
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <__aeabi_i2d+0x5c>)
 8002caa:	1a12      	subs	r2, r2, r0
 8002cac:	280a      	cmp	r0, #10
 8002cae:	dc16      	bgt.n	8002cde <__aeabi_i2d+0x4a>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	002e      	movs	r6, r5
 8002cb4:	3315      	adds	r3, #21
 8002cb6:	409e      	lsls	r6, r3
 8002cb8:	230b      	movs	r3, #11
 8002cba:	1a18      	subs	r0, r3, r0
 8002cbc:	40c5      	lsrs	r5, r0
 8002cbe:	0553      	lsls	r3, r2, #21
 8002cc0:	032d      	lsls	r5, r5, #12
 8002cc2:	0b2d      	lsrs	r5, r5, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e003      	b.n	8002cd0 <__aeabi_i2d+0x3c>
 8002cc8:	2400      	movs	r4, #0
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2500      	movs	r5, #0
 8002cce:	2600      	movs	r6, #0
 8002cd0:	051b      	lsls	r3, r3, #20
 8002cd2:	432b      	orrs	r3, r5
 8002cd4:	07e4      	lsls	r4, r4, #31
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	0030      	movs	r0, r6
 8002cda:	0019      	movs	r1, r3
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
 8002cde:	380b      	subs	r0, #11
 8002ce0:	4085      	lsls	r5, r0
 8002ce2:	0553      	lsls	r3, r2, #21
 8002ce4:	032d      	lsls	r5, r5, #12
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	0b2d      	lsrs	r5, r5, #12
 8002cea:	0d5b      	lsrs	r3, r3, #21
 8002cec:	e7f0      	b.n	8002cd0 <__aeabi_i2d+0x3c>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	0000041e 	.word	0x0000041e

08002cf4 <__aeabi_cfrcmple>:
 8002cf4:	4684      	mov	ip, r0
 8002cf6:	1c08      	adds	r0, r1, #0
 8002cf8:	4661      	mov	r1, ip
 8002cfa:	e7ff      	b.n	8002cfc <__aeabi_cfcmpeq>

08002cfc <__aeabi_cfcmpeq>:
 8002cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cfe:	f000 f8d1 	bl	8002ea4 <__lesf2>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d401      	bmi.n	8002d0a <__aeabi_cfcmpeq+0xe>
 8002d06:	2100      	movs	r1, #0
 8002d08:	42c8      	cmn	r0, r1
 8002d0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002d0c <__aeabi_fcmpeq>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	f000 f855 	bl	8002dbc <__eqsf2>
 8002d12:	4240      	negs	r0, r0
 8002d14:	3001      	adds	r0, #1
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <__aeabi_fcmplt>:
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	f000 f8c3 	bl	8002ea4 <__lesf2>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	db01      	blt.n	8002d26 <__aeabi_fcmplt+0xe>
 8002d22:	2000      	movs	r0, #0
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	2001      	movs	r0, #1
 8002d28:	bd10      	pop	{r4, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)

08002d2c <__aeabi_fcmple>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	f000 f8b9 	bl	8002ea4 <__lesf2>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	dd01      	ble.n	8002d3a <__aeabi_fcmple+0xe>
 8002d36:	2000      	movs	r0, #0
 8002d38:	bd10      	pop	{r4, pc}
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)

08002d40 <__aeabi_fcmpgt>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	f000 f863 	bl	8002e0c <__gesf2>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	dc01      	bgt.n	8002d4e <__aeabi_fcmpgt+0xe>
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	2001      	movs	r0, #1
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)

08002d54 <__aeabi_fcmpge>:
 8002d54:	b510      	push	{r4, lr}
 8002d56:	f000 f859 	bl	8002e0c <__gesf2>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	da01      	bge.n	8002d62 <__aeabi_fcmpge+0xe>
 8002d5e:	2000      	movs	r0, #0
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	2001      	movs	r0, #1
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)

08002d68 <__clzsi2>:
 8002d68:	211c      	movs	r1, #28
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	d301      	bcc.n	8002d76 <__clzsi2+0xe>
 8002d72:	0c00      	lsrs	r0, r0, #16
 8002d74:	3910      	subs	r1, #16
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	4298      	cmp	r0, r3
 8002d7a:	d301      	bcc.n	8002d80 <__clzsi2+0x18>
 8002d7c:	0a00      	lsrs	r0, r0, #8
 8002d7e:	3908      	subs	r1, #8
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d301      	bcc.n	8002d8a <__clzsi2+0x22>
 8002d86:	0900      	lsrs	r0, r0, #4
 8002d88:	3904      	subs	r1, #4
 8002d8a:	a202      	add	r2, pc, #8	; (adr r2, 8002d94 <__clzsi2+0x2c>)
 8002d8c:	5c10      	ldrb	r0, [r2, r0]
 8002d8e:	1840      	adds	r0, r0, r1
 8002d90:	4770      	bx	lr
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	02020304 	.word	0x02020304
 8002d98:	01010101 	.word	0x01010101
	...

08002da4 <__clzdi2>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	2900      	cmp	r1, #0
 8002da8:	d103      	bne.n	8002db2 <__clzdi2+0xe>
 8002daa:	f7ff ffdd 	bl	8002d68 <__clzsi2>
 8002dae:	3020      	adds	r0, #32
 8002db0:	e002      	b.n	8002db8 <__clzdi2+0x14>
 8002db2:	1c08      	adds	r0, r1, #0
 8002db4:	f7ff ffd8 	bl	8002d68 <__clzsi2>
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)

08002dbc <__eqsf2>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	0042      	lsls	r2, r0, #1
 8002dc0:	024e      	lsls	r6, r1, #9
 8002dc2:	004c      	lsls	r4, r1, #1
 8002dc4:	0245      	lsls	r5, r0, #9
 8002dc6:	0a6d      	lsrs	r5, r5, #9
 8002dc8:	0e12      	lsrs	r2, r2, #24
 8002dca:	0fc3      	lsrs	r3, r0, #31
 8002dcc:	0a76      	lsrs	r6, r6, #9
 8002dce:	0e24      	lsrs	r4, r4, #24
 8002dd0:	0fc9      	lsrs	r1, r1, #31
 8002dd2:	2aff      	cmp	r2, #255	; 0xff
 8002dd4:	d00f      	beq.n	8002df6 <__eqsf2+0x3a>
 8002dd6:	2cff      	cmp	r4, #255	; 0xff
 8002dd8:	d011      	beq.n	8002dfe <__eqsf2+0x42>
 8002dda:	2001      	movs	r0, #1
 8002ddc:	42a2      	cmp	r2, r4
 8002dde:	d000      	beq.n	8002de2 <__eqsf2+0x26>
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	42b5      	cmp	r5, r6
 8002de4:	d1fc      	bne.n	8002de0 <__eqsf2+0x24>
 8002de6:	428b      	cmp	r3, r1
 8002de8:	d00d      	beq.n	8002e06 <__eqsf2+0x4a>
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d1f8      	bne.n	8002de0 <__eqsf2+0x24>
 8002dee:	0028      	movs	r0, r5
 8002df0:	1e45      	subs	r5, r0, #1
 8002df2:	41a8      	sbcs	r0, r5
 8002df4:	e7f4      	b.n	8002de0 <__eqsf2+0x24>
 8002df6:	2001      	movs	r0, #1
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	d1f1      	bne.n	8002de0 <__eqsf2+0x24>
 8002dfc:	e7eb      	b.n	8002dd6 <__eqsf2+0x1a>
 8002dfe:	2001      	movs	r0, #1
 8002e00:	2e00      	cmp	r6, #0
 8002e02:	d1ed      	bne.n	8002de0 <__eqsf2+0x24>
 8002e04:	e7e9      	b.n	8002dda <__eqsf2+0x1e>
 8002e06:	2000      	movs	r0, #0
 8002e08:	e7ea      	b.n	8002de0 <__eqsf2+0x24>
 8002e0a:	46c0      	nop			; (mov r8, r8)

08002e0c <__gesf2>:
 8002e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e0e:	0042      	lsls	r2, r0, #1
 8002e10:	0246      	lsls	r6, r0, #9
 8002e12:	024d      	lsls	r5, r1, #9
 8002e14:	004c      	lsls	r4, r1, #1
 8002e16:	0fc3      	lsrs	r3, r0, #31
 8002e18:	0a76      	lsrs	r6, r6, #9
 8002e1a:	0e12      	lsrs	r2, r2, #24
 8002e1c:	0a6d      	lsrs	r5, r5, #9
 8002e1e:	0e24      	lsrs	r4, r4, #24
 8002e20:	0fc8      	lsrs	r0, r1, #31
 8002e22:	2aff      	cmp	r2, #255	; 0xff
 8002e24:	d01f      	beq.n	8002e66 <__gesf2+0x5a>
 8002e26:	2cff      	cmp	r4, #255	; 0xff
 8002e28:	d010      	beq.n	8002e4c <__gesf2+0x40>
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	d11f      	bne.n	8002e6e <__gesf2+0x62>
 8002e2e:	4271      	negs	r1, r6
 8002e30:	4171      	adcs	r1, r6
 8002e32:	2c00      	cmp	r4, #0
 8002e34:	d101      	bne.n	8002e3a <__gesf2+0x2e>
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d01e      	beq.n	8002e78 <__gesf2+0x6c>
 8002e3a:	2900      	cmp	r1, #0
 8002e3c:	d10e      	bne.n	8002e5c <__gesf2+0x50>
 8002e3e:	4283      	cmp	r3, r0
 8002e40:	d01e      	beq.n	8002e80 <__gesf2+0x74>
 8002e42:	2102      	movs	r1, #2
 8002e44:	1e58      	subs	r0, r3, #1
 8002e46:	4008      	ands	r0, r1
 8002e48:	3801      	subs	r0, #1
 8002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e4c:	2d00      	cmp	r5, #0
 8002e4e:	d126      	bne.n	8002e9e <__gesf2+0x92>
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d1f4      	bne.n	8002e3e <__gesf2+0x32>
 8002e54:	4271      	negs	r1, r6
 8002e56:	4171      	adcs	r1, r6
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	d0f0      	beq.n	8002e3e <__gesf2+0x32>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d1f4      	bne.n	8002e4a <__gesf2+0x3e>
 8002e60:	2001      	movs	r0, #1
 8002e62:	4240      	negs	r0, r0
 8002e64:	e7f1      	b.n	8002e4a <__gesf2+0x3e>
 8002e66:	2e00      	cmp	r6, #0
 8002e68:	d119      	bne.n	8002e9e <__gesf2+0x92>
 8002e6a:	2cff      	cmp	r4, #255	; 0xff
 8002e6c:	d0ee      	beq.n	8002e4c <__gesf2+0x40>
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d1e5      	bne.n	8002e3e <__gesf2+0x32>
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	d1e3      	bne.n	8002e3e <__gesf2+0x32>
 8002e76:	e7e4      	b.n	8002e42 <__gesf2+0x36>
 8002e78:	2000      	movs	r0, #0
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	d0e5      	beq.n	8002e4a <__gesf2+0x3e>
 8002e7e:	e7e0      	b.n	8002e42 <__gesf2+0x36>
 8002e80:	42a2      	cmp	r2, r4
 8002e82:	dc05      	bgt.n	8002e90 <__gesf2+0x84>
 8002e84:	dbea      	blt.n	8002e5c <__gesf2+0x50>
 8002e86:	42ae      	cmp	r6, r5
 8002e88:	d802      	bhi.n	8002e90 <__gesf2+0x84>
 8002e8a:	d3e7      	bcc.n	8002e5c <__gesf2+0x50>
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	e7dc      	b.n	8002e4a <__gesf2+0x3e>
 8002e90:	4241      	negs	r1, r0
 8002e92:	4141      	adcs	r1, r0
 8002e94:	4248      	negs	r0, r1
 8002e96:	2102      	movs	r1, #2
 8002e98:	4008      	ands	r0, r1
 8002e9a:	3801      	subs	r0, #1
 8002e9c:	e7d5      	b.n	8002e4a <__gesf2+0x3e>
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	4240      	negs	r0, r0
 8002ea2:	e7d2      	b.n	8002e4a <__gesf2+0x3e>

08002ea4 <__lesf2>:
 8002ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea6:	0042      	lsls	r2, r0, #1
 8002ea8:	0246      	lsls	r6, r0, #9
 8002eaa:	024d      	lsls	r5, r1, #9
 8002eac:	004c      	lsls	r4, r1, #1
 8002eae:	0fc3      	lsrs	r3, r0, #31
 8002eb0:	0a76      	lsrs	r6, r6, #9
 8002eb2:	0e12      	lsrs	r2, r2, #24
 8002eb4:	0a6d      	lsrs	r5, r5, #9
 8002eb6:	0e24      	lsrs	r4, r4, #24
 8002eb8:	0fc8      	lsrs	r0, r1, #31
 8002eba:	2aff      	cmp	r2, #255	; 0xff
 8002ebc:	d00d      	beq.n	8002eda <__lesf2+0x36>
 8002ebe:	2cff      	cmp	r4, #255	; 0xff
 8002ec0:	d00f      	beq.n	8002ee2 <__lesf2+0x3e>
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	d123      	bne.n	8002f0e <__lesf2+0x6a>
 8002ec6:	4271      	negs	r1, r6
 8002ec8:	4171      	adcs	r1, r6
 8002eca:	2c00      	cmp	r4, #0
 8002ecc:	d10f      	bne.n	8002eee <__lesf2+0x4a>
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	d10d      	bne.n	8002eee <__lesf2+0x4a>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	2e00      	cmp	r6, #0
 8002ed6:	d014      	beq.n	8002f02 <__lesf2+0x5e>
 8002ed8:	e00d      	b.n	8002ef6 <__lesf2+0x52>
 8002eda:	2e00      	cmp	r6, #0
 8002edc:	d110      	bne.n	8002f00 <__lesf2+0x5c>
 8002ede:	2cff      	cmp	r4, #255	; 0xff
 8002ee0:	d115      	bne.n	8002f0e <__lesf2+0x6a>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d10c      	bne.n	8002f00 <__lesf2+0x5c>
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d103      	bne.n	8002ef2 <__lesf2+0x4e>
 8002eea:	4271      	negs	r1, r6
 8002eec:	4171      	adcs	r1, r6
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	d108      	bne.n	8002f04 <__lesf2+0x60>
 8002ef2:	4283      	cmp	r3, r0
 8002ef4:	d010      	beq.n	8002f18 <__lesf2+0x74>
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	1e58      	subs	r0, r3, #1
 8002efa:	4008      	ands	r0, r1
 8002efc:	3801      	subs	r0, #1
 8002efe:	e000      	b.n	8002f02 <__lesf2+0x5e>
 8002f00:	2002      	movs	r0, #2
 8002f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d1fc      	bne.n	8002f02 <__lesf2+0x5e>
 8002f08:	2001      	movs	r0, #1
 8002f0a:	4240      	negs	r0, r0
 8002f0c:	e7f9      	b.n	8002f02 <__lesf2+0x5e>
 8002f0e:	2c00      	cmp	r4, #0
 8002f10:	d1ef      	bne.n	8002ef2 <__lesf2+0x4e>
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	d1ed      	bne.n	8002ef2 <__lesf2+0x4e>
 8002f16:	e7ee      	b.n	8002ef6 <__lesf2+0x52>
 8002f18:	42a2      	cmp	r2, r4
 8002f1a:	dc05      	bgt.n	8002f28 <__lesf2+0x84>
 8002f1c:	dbf2      	blt.n	8002f04 <__lesf2+0x60>
 8002f1e:	42ae      	cmp	r6, r5
 8002f20:	d802      	bhi.n	8002f28 <__lesf2+0x84>
 8002f22:	d3ef      	bcc.n	8002f04 <__lesf2+0x60>
 8002f24:	2000      	movs	r0, #0
 8002f26:	e7ec      	b.n	8002f02 <__lesf2+0x5e>
 8002f28:	4241      	negs	r1, r0
 8002f2a:	4141      	adcs	r1, r0
 8002f2c:	4248      	negs	r0, r1
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4008      	ands	r0, r1
 8002f32:	3801      	subs	r0, #1
 8002f34:	e7e5      	b.n	8002f02 <__lesf2+0x5e>
 8002f36:	46c0      	nop			; (mov r8, r8)

08002f38 <eepromRead>:

#include "34AA02_EEPROM.h"

static uint8_t eepromStatusLogLen = 0;

uint8_t eepromRead(EEPROM_MemTypeDef address, uint8_t dev_address){
 8002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af04      	add	r7, sp, #16
 8002f3e:	0002      	movs	r2, r0
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	1c0a      	adds	r2, r1, #0
 8002f48:	701a      	strb	r2, [r3, #0]
  uint16_t dev = (10 << 4) + (dev_address << 1);
 8002f4a:	1dbb      	adds	r3, r7, #6
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	18db      	adds	r3, r3, r3
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	210e      	movs	r1, #14
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	32a0      	adds	r2, #160	; 0xa0
 8002f5a:	801a      	strh	r2, [r3, #0]
  uint8_t data = 0;
 8002f5c:	260c      	movs	r6, #12
 8002f5e:	19bb      	adds	r3, r7, r6
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, dev, address, I2C_MEMADD_SIZE_8BIT, &data, 1U, HAL_MAX_DELAY);
 8002f64:	1dfb      	adds	r3, r7, #7
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	250d      	movs	r5, #13
 8002f6c:	197c      	adds	r4, r7, r5
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	8819      	ldrh	r1, [r3, #0]
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <eepromRead+0x74>)
 8002f74:	2301      	movs	r3, #1
 8002f76:	425b      	negs	r3, r3
 8002f78:	9302      	str	r3, [sp, #8]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	19bb      	adds	r3, r7, r6
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2301      	movs	r3, #1
 8002f84:	f002 fcec 	bl	8005960 <HAL_I2C_Mem_Read>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	7023      	strb	r3, [r4, #0]

  // Log eeprom issues
  if(status != HAL_OK){
 8002f8c:	197b      	adds	r3, r7, r5
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <eepromRead+0x66>
    saveStatus(status);
 8002f94:	197b      	adds	r3, r7, r5
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f947 	bl	800322c <saveStatus>
  }

  return data;
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b005      	add	sp, #20
 8002faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fac:	20000708 	.word	0x20000708

08002fb0 <eepromWrite>:

HAL_StatusTypeDef eepromWrite(EEPROM_MemTypeDef address, uint8_t data, uint8_t dev_address){
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	0004      	movs	r4, r0
 8002fb8:	0008      	movs	r0, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	1c22      	adds	r2, r4, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	1dbb      	adds	r3, r7, #6
 8002fc4:	1c02      	adds	r2, r0, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	1d7b      	adds	r3, r7, #5
 8002fca:	1c0a      	adds	r2, r1, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
  uint16_t dev = (10 << 4) + (dev_address << 1);
 8002fce:	1d7b      	adds	r3, r7, #5
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	18db      	adds	r3, r3, r3
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	200e      	movs	r0, #14
 8002fda:	183b      	adds	r3, r7, r0
 8002fdc:	32a0      	adds	r2, #160	; 0xa0
 8002fde:	801a      	strh	r2, [r3, #0]

  uint8_t buf[2] = {address, data};
 8002fe0:	2108      	movs	r1, #8
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	1dfa      	adds	r2, r7, #7
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	1dba      	adds	r2, r7, #6
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	705a      	strb	r2, [r3, #1]

  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, dev, buf, 2, HAL_MAX_DELAY);
 8002ff2:	250d      	movs	r5, #13
 8002ff4:	197c      	adds	r4, r7, r5
 8002ff6:	187a      	adds	r2, r7, r1
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	8819      	ldrh	r1, [r3, #0]
 8002ffc:	480c      	ldr	r0, [pc, #48]	; (8003030 <eepromWrite+0x80>)
 8002ffe:	2301      	movs	r3, #1
 8003000:	425b      	negs	r3, r3
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2302      	movs	r3, #2
 8003006:	f002 fba3 	bl	8005750 <HAL_I2C_Master_Transmit>
 800300a:	0003      	movs	r3, r0
 800300c:	7023      	strb	r3, [r4, #0]

  // Log eeprom issues
  if(status != HAL_OK){
 800300e:	197b      	adds	r3, r7, r5
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <eepromWrite+0x70>
    saveStatus(status);
 8003016:	197b      	adds	r3, r7, r5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	f000 f906 	bl	800322c <saveStatus>
  }

  return status;
 8003020:	230d      	movs	r3, #13
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	781b      	ldrb	r3, [r3, #0]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b004      	add	sp, #16
 800302c:	bdb0      	pop	{r4, r5, r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	20000708 	.word	0x20000708

08003034 <readSavedData>:

void readSavedData(uint16_t *buf, uint8_t dev_address){
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	000a      	movs	r2, r1
 800303e:	1cfb      	adds	r3, r7, #3
 8003040:	701a      	strb	r2, [r3, #0]
  uint16_t data;

  //ID
  buf[0] = eepromRead(ID, dev_address);
 8003042:	1cfb      	adds	r3, r7, #3
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	0019      	movs	r1, r3
 8003048:	2000      	movs	r0, #0
 800304a:	f7ff ff75 	bl	8002f38 <eepromRead>
 800304e:	0003      	movs	r3, r0
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8003056:	1cfb      	adds	r3, r7, #3
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f8be 	bl	80031dc <eepromReady>
  //R
  buf[1] = eepromRead(RED, dev_address);
 8003060:	1cfb      	adds	r3, r7, #3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	0019      	movs	r1, r3
 8003066:	2001      	movs	r0, #1
 8003068:	f7ff ff66 	bl	8002f38 <eepromRead>
 800306c:	0003      	movs	r3, r0
 800306e:	001a      	movs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3302      	adds	r3, #2
 8003074:	b292      	uxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8003078:	1cfb      	adds	r3, r7, #3
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f8ad 	bl	80031dc <eepromReady>
  //G
  buf[2] = eepromRead(GREEN, dev_address);
 8003082:	1cfb      	adds	r3, r7, #3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	0019      	movs	r1, r3
 8003088:	2002      	movs	r0, #2
 800308a:	f7ff ff55 	bl	8002f38 <eepromRead>
 800308e:	0003      	movs	r3, r0
 8003090:	001a      	movs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	b292      	uxth	r2, r2
 8003098:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 800309a:	1cfb      	adds	r3, r7, #3
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f89c 	bl	80031dc <eepromReady>
  //B
  buf[3] = eepromRead(BLUE, dev_address);
 80030a4:	1cfb      	adds	r3, r7, #3
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	0019      	movs	r1, r3
 80030aa:	2003      	movs	r0, #3
 80030ac:	f7ff ff44 	bl	8002f38 <eepromRead>
 80030b0:	0003      	movs	r3, r0
 80030b2:	001a      	movs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3306      	adds	r3, #6
 80030b8:	b292      	uxth	r2, r2
 80030ba:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 80030bc:	1cfb      	adds	r3, r7, #3
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 f88b 	bl	80031dc <eepromReady>
  //L1 upper 2 bits
  data = eepromRead(LUM_UP, dev_address) << 8;
 80030c6:	1cfb      	adds	r3, r7, #3
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	0019      	movs	r1, r3
 80030cc:	2004      	movs	r0, #4
 80030ce:	f7ff ff33 	bl	8002f38 <eepromRead>
 80030d2:	0003      	movs	r3, r0
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	240e      	movs	r4, #14
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	0212      	lsls	r2, r2, #8
 80030dc:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 80030de:	1cfb      	adds	r3, r7, #3
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f87a 	bl	80031dc <eepromReady>
  //L2 lower 8 bits
  buf[4] = data + eepromRead(LUM_LOW, dev_address);
 80030e8:	1cfb      	adds	r3, r7, #3
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	0019      	movs	r1, r3
 80030ee:	2005      	movs	r0, #5
 80030f0:	f7ff ff22 	bl	8002f38 <eepromRead>
 80030f4:	0003      	movs	r3, r0
 80030f6:	b299      	uxth	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3308      	adds	r3, #8
 80030fc:	193a      	adds	r2, r7, r4
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	188a      	adds	r2, r1, r2
 8003102:	b292      	uxth	r2, r2
 8003104:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8003106:	1cfb      	adds	r3, r7, #3
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f866 	bl	80031dc <eepromReady>
  //Rate
  buf[5] = eepromRead(RATE, dev_address);
 8003110:	1cfb      	adds	r3, r7, #3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	0019      	movs	r1, r3
 8003116:	2006      	movs	r0, #6
 8003118:	f7ff ff0e 	bl	8002f38 <eepromRead>
 800311c:	0003      	movs	r3, r0
 800311e:	001a      	movs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	330a      	adds	r3, #10
 8003124:	b292      	uxth	r2, r2
 8003126:	801a      	strh	r2, [r3, #0]
  eepromReady(dev_address);
 8003128:	1cfb      	adds	r3, r7, #3
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	0018      	movs	r0, r3
 800312e:	f000 f855 	bl	80031dc <eepromReady>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b005      	add	sp, #20
 8003138:	bd90      	pop	{r4, r7, pc}

0800313a <setSavedData>:

void setSavedData(uint8_t dev_address, uint8_t* data){
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	0002      	movs	r2, r0
 8003142:	6039      	str	r1, [r7, #0]
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	701a      	strb	r2, [r3, #0]

  eepromWrite(RED, data[0], dev_address);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	7819      	ldrb	r1, [r3, #0]
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	001a      	movs	r2, r3
 8003152:	2001      	movs	r0, #1
 8003154:	f7ff ff2c 	bl	8002fb0 <eepromWrite>
  HAL_Delay(5);
 8003158:	2005      	movs	r0, #5
 800315a:	f001 fd41 	bl	8004be0 <HAL_Delay>
  eepromWrite(GREEN, data[1], dev_address);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	7819      	ldrb	r1, [r3, #0]
 8003164:	1dfb      	adds	r3, r7, #7
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	001a      	movs	r2, r3
 800316a:	2002      	movs	r0, #2
 800316c:	f7ff ff20 	bl	8002fb0 <eepromWrite>
  HAL_Delay(5);
 8003170:	2005      	movs	r0, #5
 8003172:	f001 fd35 	bl	8004be0 <HAL_Delay>
  eepromWrite(BLUE, data[2], dev_address);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3302      	adds	r3, #2
 800317a:	7819      	ldrb	r1, [r3, #0]
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	001a      	movs	r2, r3
 8003182:	2003      	movs	r0, #3
 8003184:	f7ff ff14 	bl	8002fb0 <eepromWrite>
  HAL_Delay(5);
 8003188:	2005      	movs	r0, #5
 800318a:	f001 fd29 	bl	8004be0 <HAL_Delay>
  eepromWrite(LUM_UP, data[3], dev_address);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	3303      	adds	r3, #3
 8003192:	7819      	ldrb	r1, [r3, #0]
 8003194:	1dfb      	adds	r3, r7, #7
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	001a      	movs	r2, r3
 800319a:	2004      	movs	r0, #4
 800319c:	f7ff ff08 	bl	8002fb0 <eepromWrite>
  HAL_Delay(5);
 80031a0:	2005      	movs	r0, #5
 80031a2:	f001 fd1d 	bl	8004be0 <HAL_Delay>
  eepromWrite(LUM_LOW, data[4], dev_address);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3304      	adds	r3, #4
 80031aa:	7819      	ldrb	r1, [r3, #0]
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	001a      	movs	r2, r3
 80031b2:	2005      	movs	r0, #5
 80031b4:	f7ff fefc 	bl	8002fb0 <eepromWrite>
  HAL_Delay(5);
 80031b8:	2005      	movs	r0, #5
 80031ba:	f001 fd11 	bl	8004be0 <HAL_Delay>
  eepromWrite(RATE, data[5], 0);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	3305      	adds	r3, #5
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	0019      	movs	r1, r3
 80031c8:	2006      	movs	r0, #6
 80031ca:	f7ff fef1 	bl	8002fb0 <eepromWrite>
  HAL_Delay(5);
 80031ce:	2005      	movs	r0, #5
 80031d0:	f001 fd06 	bl	8004be0 <HAL_Delay>
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <eepromReady>:

void eepromReady(uint8_t dev_address){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	0002      	movs	r2, r0
 80031e4:	1dfb      	adds	r3, r7, #7
 80031e6:	701a      	strb	r2, [r3, #0]
  uint16_t dev = (10 << 4) + (dev_address << 1);
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	18db      	adds	r3, r3, r3
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	230e      	movs	r3, #14
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	32a0      	adds	r2, #160	; 0xa0
 80031f8:	801a      	strh	r2, [r3, #0]
  while(HAL_I2C_IsDeviceReady(&hi2c1, dev, 1, HAL_MAX_DELAY) == HAL_BUSY){
 80031fa:	e002      	b.n	8003202 <eepromReady+0x26>
      HAL_Delay(1);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f001 fcef 	bl	8004be0 <HAL_Delay>
  while(HAL_I2C_IsDeviceReady(&hi2c1, dev, 1, HAL_MAX_DELAY) == HAL_BUSY){
 8003202:	2301      	movs	r3, #1
 8003204:	425a      	negs	r2, r3
 8003206:	230e      	movs	r3, #14
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	8819      	ldrh	r1, [r3, #0]
 800320c:	4806      	ldr	r0, [pc, #24]	; (8003228 <eepromReady+0x4c>)
 800320e:	0013      	movs	r3, r2
 8003210:	2201      	movs	r2, #1
 8003212:	f002 fcd9 	bl	8005bc8 <HAL_I2C_IsDeviceReady>
 8003216:	0003      	movs	r3, r0
 8003218:	2b02      	cmp	r3, #2
 800321a:	d0ef      	beq.n	80031fc <eepromReady+0x20>
  }
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000708 	.word	0x20000708

0800322c <saveStatus>:

void saveStatus(HAL_StatusTypeDef status){
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	0002      	movs	r2, r0
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	701a      	strb	r2, [r3, #0]
  if(eepromStatusLogLen == 1024){
    eepromStatusLogLen = 0;
  }

  eepromStatusLog[eepromStatusLogLen];
  eepromStatusLogLen++;
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <saveStatus+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b02      	ldr	r3, [pc, #8]	; (800324c <saveStatus+0x20>)
 8003242:	701a      	strb	r2, [r3, #0]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000094 	.word	0x20000094

08003250 <getStatusLogLen>:

uint16_t getStatusLogLen(void){
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  return eepromStatusLogLen;
 8003254:	4b02      	ldr	r3, [pc, #8]	; (8003260 <getStatusLogLen+0x10>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000094 	.word	0x20000094

08003264 <setStatusLogLen>:

void setStatusLogLen(uint16_t len){
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	1dbb      	adds	r3, r7, #6
 800326e:	801a      	strh	r2, [r3, #0]
  eepromStatusLogLen = len;
 8003270:	1dbb      	adds	r3, r7, #6
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b03      	ldr	r3, [pc, #12]	; (8003284 <setStatusLogLen+0x20>)
 8003278:	701a      	strb	r2, [r3, #0]
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	20000094 	.word	0x20000094

08003288 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800328e:	003b      	movs	r3, r7
 8003290:	0018      	movs	r0, r3
 8003292:	2308      	movs	r3, #8
 8003294:	001a      	movs	r2, r3
 8003296:	2100      	movs	r1, #0
 8003298:	f006 f98c 	bl	80095b4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800329c:	4b30      	ldr	r3, [pc, #192]	; (8003360 <MX_ADC_Init+0xd8>)
 800329e:	4a31      	ldr	r2, [pc, #196]	; (8003364 <MX_ADC_Init+0xdc>)
 80032a0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80032a2:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <MX_ADC_Init+0xd8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <MX_ADC_Init+0xd8>)
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	05d2      	lsls	r2, r2, #23
 80032ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <MX_ADC_Init+0xd8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <MX_ADC_Init+0xd8>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <MX_ADC_Init+0xd8>)
 80032be:	2201      	movs	r2, #1
 80032c0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <MX_ADC_Init+0xd8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <MX_ADC_Init+0xd8>)
 80032ca:	2220      	movs	r2, #32
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <MX_ADC_Init+0xd8>)
 80032d2:	2221      	movs	r2, #33	; 0x21
 80032d4:	2100      	movs	r1, #0
 80032d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <MX_ADC_Init+0xd8>)
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <MX_ADC_Init+0xd8>)
 80032e0:	22c2      	movs	r2, #194	; 0xc2
 80032e2:	32ff      	adds	r2, #255	; 0xff
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <MX_ADC_Init+0xd8>)
 80032e8:	222c      	movs	r2, #44	; 0x2c
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <MX_ADC_Init+0xd8>)
 80032f0:	2204      	movs	r2, #4
 80032f2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <MX_ADC_Init+0xd8>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <MX_ADC_Init+0xd8>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <MX_ADC_Init+0xd8>)
 8003302:	2200      	movs	r2, #0
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <MX_ADC_Init+0xd8>)
 8003308:	2200      	movs	r2, #0
 800330a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <MX_ADC_Init+0xd8>)
 800330e:	0018      	movs	r0, r3
 8003310:	f001 fc8a 	bl	8004c28 <HAL_ADC_Init>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d001      	beq.n	800331c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003318:	f000 fa44 	bl	80037a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800331c:	003b      	movs	r3, r7
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <MX_ADC_Init+0xe0>)
 8003320:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003322:	003b      	movs	r3, r7
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	0152      	lsls	r2, r2, #5
 8003328:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800332a:	003a      	movs	r2, r7
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <MX_ADC_Init+0xd8>)
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f001 fded 	bl	8004f10 <HAL_ADC_ConfigChannel>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800333a:	f000 fa33 	bl	80037a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800333e:	003b      	movs	r3, r7
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <MX_ADC_Init+0xe4>)
 8003342:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003344:	003a      	movs	r2, r7
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <MX_ADC_Init+0xd8>)
 8003348:	0011      	movs	r1, r2
 800334a:	0018      	movs	r0, r3
 800334c:	f001 fde0 	bl	8004f10 <HAL_ADC_ConfigChannel>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d001      	beq.n	8003358 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003354:	f000 fa26 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b002      	add	sp, #8
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200006ac 	.word	0x200006ac
 8003364:	40012400 	.word	0x40012400
 8003368:	04000002 	.word	0x04000002
 800336c:	08000004 	.word	0x08000004

08003370 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	240c      	movs	r4, #12
 800337a:	193b      	adds	r3, r7, r4
 800337c:	0018      	movs	r0, r3
 800337e:	2314      	movs	r3, #20
 8003380:	001a      	movs	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	f006 f916 	bl	80095b4 <memset>
  if(adcHandle->Instance==ADC1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <HAL_ADC_MspInit+0x70>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d122      	bne.n	80033d8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003392:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_ADC_MspInit+0x74>)
 8003394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003396:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_ADC_MspInit+0x74>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0089      	lsls	r1, r1, #2
 800339c:	430a      	orrs	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_ADC_MspInit+0x74>)
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_ADC_MspInit+0x74>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_ADC_MspInit+0x74>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2201      	movs	r2, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	2206      	movs	r2, #6
 80033bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	2203      	movs	r2, #3
 80033c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	193a      	adds	r2, r7, r4
 80033cc:	23a0      	movs	r3, #160	; 0xa0
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f001 ffa8 	bl	8005328 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b009      	add	sp, #36	; 0x24
 80033de:	bd90      	pop	{r4, r7, pc}
 80033e0:	40012400 	.word	0x40012400
 80033e4:	40021000 	.word	0x40021000

080033e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ee:	240c      	movs	r4, #12
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	0018      	movs	r0, r3
 80033f4:	2314      	movs	r3, #20
 80033f6:	001a      	movs	r2, r3
 80033f8:	2100      	movs	r1, #0
 80033fa:	f006 f8db 	bl	80095b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <MX_GPIO_Init+0xa8>)
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <MX_GPIO_Init+0xa8>)
 8003404:	2104      	movs	r1, #4
 8003406:	430a      	orrs	r2, r1
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
 800340a:	4b21      	ldr	r3, [pc, #132]	; (8003490 <MX_GPIO_Init+0xa8>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	2204      	movs	r2, #4
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <MX_GPIO_Init+0xa8>)
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <MX_GPIO_Init+0xa8>)
 800341c:	2101      	movs	r1, #1
 800341e:	430a      	orrs	r2, r1
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <MX_GPIO_Init+0xa8>)
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	2201      	movs	r2, #1
 8003428:	4013      	ands	r3, r2
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <MX_GPIO_Init+0xa8>)
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <MX_GPIO_Init+0xa8>)
 8003434:	2102      	movs	r1, #2
 8003436:	430a      	orrs	r2, r1
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <MX_GPIO_Init+0xa8>)
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CBUS0_TXDEN_Pin|CBUS3__SLEEP_Pin;
 8003446:	193b      	adds	r3, r7, r4
 8003448:	22c0      	movs	r2, #192	; 0xc0
 800344a:	0212      	lsls	r2, r2, #8
 800344c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344e:	193b      	adds	r3, r7, r4
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	193b      	adds	r3, r7, r4
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345a:	193b      	adds	r3, r7, r4
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <MX_GPIO_Init+0xac>)
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f001 ff61 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8003466:	0021      	movs	r1, r4
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	187b      	adds	r3, r7, r1
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800347a:	187a      	adds	r2, r7, r1
 800347c:	23a0      	movs	r3, #160	; 0xa0
 800347e:	05db      	lsls	r3, r3, #23
 8003480:	0011      	movs	r1, r2
 8003482:	0018      	movs	r0, r3
 8003484:	f001 ff50 	bl	8005328 <HAL_GPIO_Init>

}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b009      	add	sp, #36	; 0x24
 800348e:	bd90      	pop	{r4, r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	50000800 	.word	0x50000800

08003498 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <MX_I2C1_Init+0x74>)
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <MX_I2C1_Init+0x78>)
 80034a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <MX_I2C1_Init+0x74>)
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <MX_I2C1_Init+0x7c>)
 80034a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <MX_I2C1_Init+0x74>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <MX_I2C1_Init+0x74>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <MX_I2C1_Init+0x74>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <MX_I2C1_Init+0x74>)
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <MX_I2C1_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <MX_I2C1_Init+0x74>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <MX_I2C1_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <MX_I2C1_Init+0x74>)
 80034d4:	0018      	movs	r0, r3
 80034d6:	f002 f8a5 	bl	8005624 <HAL_I2C_Init>
 80034da:	1e03      	subs	r3, r0, #0
 80034dc:	d001      	beq.n	80034e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034de:	f000 f961 	bl	80037a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <MX_I2C1_Init+0x74>)
 80034e4:	2100      	movs	r1, #0
 80034e6:	0018      	movs	r0, r3
 80034e8:	f002 fe76 	bl	80061d8 <HAL_I2CEx_ConfigAnalogFilter>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034f0:	f000 f958 	bl	80037a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <MX_I2C1_Init+0x74>)
 80034f6:	2100      	movs	r1, #0
 80034f8:	0018      	movs	r0, r3
 80034fa:	f002 feb9 	bl	8006270 <HAL_I2CEx_ConfigDigitalFilter>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003502:	f000 f94f 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000708 	.word	0x20000708
 8003510:	40005400 	.word	0x40005400
 8003514:	00707cbb 	.word	0x00707cbb

08003518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	240c      	movs	r4, #12
 8003522:	193b      	adds	r3, r7, r4
 8003524:	0018      	movs	r0, r3
 8003526:	2314      	movs	r3, #20
 8003528:	001a      	movs	r2, r3
 800352a:	2100      	movs	r1, #0
 800352c:	f006 f842 	bl	80095b4 <memset>
  if(i2cHandle->Instance==I2C1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_I2C_MspInit+0x7c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d128      	bne.n	800358c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353a:	4b17      	ldr	r3, [pc, #92]	; (8003598 <HAL_I2C_MspInit+0x80>)
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_I2C_MspInit+0x80>)
 8003540:	2102      	movs	r1, #2
 8003542:	430a      	orrs	r2, r1
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_I2C_MspInit+0x80>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003552:	0021      	movs	r1, r4
 8003554:	187b      	adds	r3, r7, r1
 8003556:	22c0      	movs	r2, #192	; 0xc0
 8003558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2212      	movs	r2, #18
 800355e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2201      	movs	r2, #1
 8003564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2203      	movs	r2, #3
 800356a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2201      	movs	r2, #1
 8003570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003572:	187b      	adds	r3, r7, r1
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_I2C_MspInit+0x84>)
 8003576:	0019      	movs	r1, r3
 8003578:	0010      	movs	r0, r2
 800357a:	f001 fed5 	bl	8005328 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_I2C_MspInit+0x80>)
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_I2C_MspInit+0x80>)
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	0389      	lsls	r1, r1, #14
 8003588:	430a      	orrs	r2, r1
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b009      	add	sp, #36	; 0x24
 8003592:	bd90      	pop	{r4, r7, pc}
 8003594:	40005400 	.word	0x40005400
 8003598:	40021000 	.word	0x40021000
 800359c:	50000400 	.word	0x50000400

080035a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035a6:	f001 faab 	bl	8004b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035aa:	f000 f86b 	bl	8003684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ae:	f7ff ff1b 	bl	80033e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80035b2:	f000 ff79 	bl	80044a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80035b6:	f000 fff5 	bl	80045a4 <MX_TIM3_Init>
  MX_TIM7_Init();
 80035ba:	f001 f88f 	bl	80046dc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80035be:	f001 f98d 	bl	80048dc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80035c2:	f7ff ff69 	bl	8003498 <MX_I2C1_Init>
  MX_USART5_UART_Init();
 80035c6:	f001 f9b9 	bl	800493c <MX_USART5_UART_Init>
  MX_ADC_Init();
 80035ca:	f7ff fe5d 	bl	8003288 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  //Start uart rx interrupt
  HAL_UART_Receive_IT(&huart1, buf, len);
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <main+0xcc>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	4926      	ldr	r1, [pc, #152]	; (8003670 <main+0xd0>)
 80035d6:	4b27      	ldr	r3, [pc, #156]	; (8003674 <main+0xd4>)
 80035d8:	0018      	movs	r0, r3
 80035da:	f004 fd21 	bl	8008020 <HAL_UART_Receive_IT>

  //Start Color channels
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <main+0xd8>)
 80035e0:	2100      	movs	r1, #0
 80035e2:	0018      	movs	r0, r3
 80035e4:	f003 fe50 	bl	8007288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <main+0xd8>)
 80035ea:	2104      	movs	r1, #4
 80035ec:	0018      	movs	r0, r3
 80035ee:	f003 fe4b 	bl	8007288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <main+0xd8>)
 80035f4:	2108      	movs	r1, #8
 80035f6:	0018      	movs	r0, r3
 80035f8:	f003 fe46 	bl	8007288 <HAL_TIM_PWM_Start>

  //Start luminance channel
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <main+0xdc>)
 80035fe:	2100      	movs	r1, #0
 8003600:	0018      	movs	r0, r3
 8003602:	f003 fe41 	bl	8007288 <HAL_TIM_PWM_Start>

  //Start luminance fade value update timer
  HAL_TIM_Base_Start_IT(&htim7);
 8003606:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <main+0xe0>)
 8003608:	0018      	movs	r0, r3
 800360a:	f003 fda3 	bl	8007154 <HAL_TIM_Base_Start_IT>

  //Get Saved state from EEPROM
  uint16_t buf[6] = {0};
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	0018      	movs	r0, r3
 8003612:	230c      	movs	r3, #12
 8003614:	001a      	movs	r2, r3
 8003616:	2100      	movs	r1, #0
 8003618:	f005 ffcc 	bl	80095b4 <memset>
  readSavedData(buf, EEPROMADDRESS);
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	2100      	movs	r1, #0
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff fd07 	bl	8003034 <readSavedData>

  //setID(buf[0])
  uint8_t startcolors[3] = {(uint8_t)buf[1], (uint8_t)buf[2], (uint8_t)buf[3]};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	885b      	ldrh	r3, [r3, #2]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	003b      	movs	r3, r7
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	889b      	ldrh	r3, [r3, #4]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	003b      	movs	r3, r7
 8003638:	705a      	strb	r2, [r3, #1]
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	88db      	ldrh	r3, [r3, #6]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	003b      	movs	r3, r7
 8003642:	709a      	strb	r2, [r3, #2]
  SetColorValues(startcolors);
 8003644:	003b      	movs	r3, r7
 8003646:	0018      	movs	r0, r3
 8003648:	f000 fdfe 	bl	8004248 <SetColorValues>
  SetLuminanceValue(buf[4]);
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	891b      	ldrh	r3, [r3, #8]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 fe75 	bl	8004340 <SetLuminanceValue>
  SetRateValue(buf[5]);
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	895b      	ldrh	r3, [r3, #10]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 feac 	bl	80043b8 <SetRateValue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    CheckCommand();
 8003660:	f000 fcf0 	bl	8004044 <CheckCommand>
    ProcessLuminance();
 8003664:	f000 feb8 	bl	80043d8 <ProcessLuminance>
    CheckCommand();
 8003668:	e7fa      	b.n	8003660 <main+0xc0>
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000000 	.word	0x20000000
 8003670:	20000754 	.word	0x20000754
 8003674:	2000089c 	.word	0x2000089c
 8003678:	20000758 	.word	0x20000758
 800367c:	20000798 	.word	0x20000798
 8003680:	200007d8 	.word	0x200007d8

08003684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b09b      	sub	sp, #108	; 0x6c
 8003688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800368a:	2434      	movs	r4, #52	; 0x34
 800368c:	193b      	adds	r3, r7, r4
 800368e:	0018      	movs	r0, r3
 8003690:	2334      	movs	r3, #52	; 0x34
 8003692:	001a      	movs	r2, r3
 8003694:	2100      	movs	r1, #0
 8003696:	f005 ff8d 	bl	80095b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800369a:	2320      	movs	r3, #32
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	0018      	movs	r0, r3
 80036a0:	2314      	movs	r3, #20
 80036a2:	001a      	movs	r2, r3
 80036a4:	2100      	movs	r1, #0
 80036a6:	f005 ff85 	bl	80095b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036aa:	003b      	movs	r3, r7
 80036ac:	0018      	movs	r0, r3
 80036ae:	2320      	movs	r3, #32
 80036b0:	001a      	movs	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	f005 ff7e 	bl	80095b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <SystemClock_Config+0xe4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2b      	ldr	r2, [pc, #172]	; (800376c <SystemClock_Config+0xe8>)
 80036be:	401a      	ands	r2, r3
 80036c0:	4b29      	ldr	r3, [pc, #164]	; (8003768 <SystemClock_Config+0xe4>)
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	0109      	lsls	r1, r1, #4
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036ca:	0021      	movs	r1, r4
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	2202      	movs	r2, #2
 80036d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	2201      	movs	r2, #1
 80036d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	2210      	movs	r2, #16
 80036dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036de:	187b      	adds	r3, r7, r1
 80036e0:	2202      	movs	r2, #2
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2200      	movs	r2, #0
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	02d2      	lsls	r2, r2, #11
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	03d2      	lsls	r2, r2, #15
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	0018      	movs	r0, r3
 80036fe:	f002 fe03 	bl	8006308 <HAL_RCC_OscConfig>
 8003702:	1e03      	subs	r3, r0, #0
 8003704:	d001      	beq.n	800370a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003706:	f000 f84d 	bl	80037a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800370a:	2120      	movs	r1, #32
 800370c:	187b      	adds	r3, r7, r1
 800370e:	220f      	movs	r2, #15
 8003710:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003712:	187b      	adds	r3, r7, r1
 8003714:	2203      	movs	r2, #3
 8003716:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003718:	187b      	adds	r3, r7, r1
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800371e:	187b      	adds	r3, r7, r1
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003724:	187b      	adds	r3, r7, r1
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800372a:	187b      	adds	r3, r7, r1
 800372c:	2101      	movs	r1, #1
 800372e:	0018      	movs	r0, r3
 8003730:	f003 f966 	bl	8006a00 <HAL_RCC_ClockConfig>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003738:	f000 f834 	bl	80037a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800373c:	003b      	movs	r3, r7
 800373e:	2209      	movs	r2, #9
 8003740:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003742:	003b      	movs	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003748:	003b      	movs	r3, r7
 800374a:	2200      	movs	r2, #0
 800374c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800374e:	003b      	movs	r3, r7
 8003750:	0018      	movs	r0, r3
 8003752:	f003 fb79 	bl	8006e48 <HAL_RCCEx_PeriphCLKConfig>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d001      	beq.n	800375e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800375a:	f000 f823 	bl	80037a4 <Error_Handler>
  }
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b01b      	add	sp, #108	; 0x6c
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	40007000 	.word	0x40007000
 800376c:	ffffe7ff 	.word	0xffffe7ff

08003770 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  ProcessSerial(buf);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_UART_RxCpltCallback+0x28>)
 800377a:	0018      	movs	r0, r3
 800377c:	f000 fc38 	bl	8003ff0 <ProcessSerial>
  HAL_UART_Receive_IT(&huart1, buf, len);
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_UART_RxCpltCallback+0x2c>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b29a      	uxth	r2, r3
 8003786:	4904      	ldr	r1, [pc, #16]	; (8003798 <HAL_UART_RxCpltCallback+0x28>)
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_UART_RxCpltCallback+0x30>)
 800378a:	0018      	movs	r0, r3
 800378c:	f004 fc48 	bl	8008020 <HAL_UART_Receive_IT>
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000754 	.word	0x20000754
 800379c:	20000000 	.word	0x20000000
 80037a0:	2000089c 	.word	0x2000089c

080037a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a8:	b672      	cpsid	i
}
 80037aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037ac:	e7fe      	b.n	80037ac <Error_Handler+0x8>
	...

080037b0 <SendSerial>:
uint8_t len_in = 0;       // Serial in length
uint8_t i_in = 0;       // Serial in index

uint8_t command_term = 0;     // termination char flag

void SendSerial(uint8_t* buf, uint16_t len){
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	1cbb      	adds	r3, r7, #2
 80037bc:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buf, len, 1000);
 80037be:	23fa      	movs	r3, #250	; 0xfa
 80037c0:	009c      	lsls	r4, r3, #2
 80037c2:	1cbb      	adds	r3, r7, #2
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4803      	ldr	r0, [pc, #12]	; (80037d8 <SendSerial+0x28>)
 80037ca:	0023      	movs	r3, r4
 80037cc:	f004 fb80 	bl	8007ed0 <HAL_UART_Transmit>
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b003      	add	sp, #12
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	2000089c 	.word	0x2000089c

080037dc <SerialCommands>:

void SerialCommands(uint8_t* input, uint8_t in_len){
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037de:	b095      	sub	sp, #84	; 0x54
 80037e0:	af04      	add	r7, sp, #16
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	000a      	movs	r2, r1
 80037e6:	1cfb      	adds	r3, r7, #3
 80037e8:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 80037ea:	2327      	movs	r3, #39	; 0x27
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]

  uint8_t error_flag = 0; // Indicates Value errors
 80037f2:	2326      	movs	r3, #38	; 0x26
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]

  //Check for EEPROM Errors
  if(getStatusLogLen()){
 80037fa:	f7ff fd29 	bl	8003250 <getStatusLogLen>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <SerialCommands+0x2a>
    EEPROMError();
 8003802:	f000 fba1 	bl	8003f48 <EEPROMError>
  }

  if(strncmp((char*)input, "COLOR?", 6U) == 0){
 8003806:	49c6      	ldr	r1, [pc, #792]	; (8003b20 <SerialCommands+0x344>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2206      	movs	r2, #6
 800380c:	0018      	movs	r0, r3
 800380e:	f005 fef9 	bl	8009604 <strncmp>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d14e      	bne.n	80038b4 <SerialCommands+0xd8>
    uint8_t colors[3] = {0, 0, 0};
 8003816:	2020      	movs	r0, #32
 8003818:	183b      	adds	r3, r7, r0
 800381a:	4ac2      	ldr	r2, [pc, #776]	; (8003b24 <SerialCommands+0x348>)
 800381c:	8811      	ldrh	r1, [r2, #0]
 800381e:	8019      	strh	r1, [r3, #0]
 8003820:	7892      	ldrb	r2, [r2, #2]
 8003822:	709a      	strb	r2, [r3, #2]

    uint8_t len_out = 0;
 8003824:	253f      	movs	r5, #63	; 0x3f
 8003826:	197b      	adds	r3, r7, r5
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]

    GetColorValues(colors);
 800382c:	0004      	movs	r4, r0
 800382e:	183b      	adds	r3, r7, r0
 8003830:	0018      	movs	r0, r3
 8003832:	f000 fcad 	bl	8004190 <GetColorValues>

    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
        colors[0], colors[1], colors[2]);
 8003836:	0020      	movs	r0, r4
 8003838:	183b      	adds	r3, r7, r0
 800383a:	781b      	ldrb	r3, [r3, #0]
    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
 800383c:	001a      	movs	r2, r3
        colors[0], colors[1], colors[2]);
 800383e:	183b      	adds	r3, r7, r0
 8003840:	785b      	ldrb	r3, [r3, #1]
    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
 8003842:	001c      	movs	r4, r3
        colors[0], colors[1], colors[2]);
 8003844:	183b      	adds	r3, r7, r0
 8003846:	789b      	ldrb	r3, [r3, #2]
    sprintf((char*)serial_out, "Red %i; Green %i; Blue %i;\n\r",
 8003848:	49b7      	ldr	r1, [pc, #732]	; (8003b28 <SerialCommands+0x34c>)
 800384a:	48b8      	ldr	r0, [pc, #736]	; (8003b2c <SerialCommands+0x350>)
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	0023      	movs	r3, r4
 8003850:	f005 feb8 	bl	80095c4 <siprintf>

    len_out += 22;
 8003854:	197b      	adds	r3, r7, r5
 8003856:	197a      	adds	r2, r7, r5
 8003858:	7812      	ldrb	r2, [r2, #0]
 800385a:	3216      	adds	r2, #22
 800385c:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 0; i < 3; i++){
 800385e:	233e      	movs	r3, #62	; 0x3e
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e016      	b.n	8003896 <SerialCommands+0xba>

      len_out += NumberLen(colors[i]);
 8003868:	243e      	movs	r4, #62	; 0x3e
 800386a:	193b      	adds	r3, r7, r4
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2220      	movs	r2, #32
 8003870:	18ba      	adds	r2, r7, r2
 8003872:	5cd3      	ldrb	r3, [r2, r3]
 8003874:	b29b      	uxth	r3, r3
 8003876:	0018      	movs	r0, r3
 8003878:	f000 fb06 	bl	8003e88 <NumberLen>
 800387c:	0003      	movs	r3, r0
 800387e:	b2d9      	uxtb	r1, r3
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	18bb      	adds	r3, r7, r2
 8003884:	18ba      	adds	r2, r7, r2
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	188a      	adds	r2, r1, r2
 800388a:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 3; i++){
 800388c:	193b      	adds	r3, r7, r4
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	193b      	adds	r3, r7, r4
 8003892:	3201      	adds	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	233e      	movs	r3, #62	; 0x3e
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d9e3      	bls.n	8003868 <SerialCommands+0x8c>
    }

    SendSerial(serial_out, len_out);
 80038a0:	233f      	movs	r3, #63	; 0x3f
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	4ba0      	ldr	r3, [pc, #640]	; (8003b2c <SerialCommands+0x350>)
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff ff7f 	bl	80037b0 <SendSerial>

  else{
    sprintf((char*)serial_out, "Error: No Command\n\r");
    SendSerial(serial_out, 19);
  }
}
 80038b2:	e238      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "COLOR", 5U) == 0){
 80038b4:	499e      	ldr	r1, [pc, #632]	; (8003b30 <SerialCommands+0x354>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	0018      	movs	r0, r3
 80038bc:	f005 fea2 	bl	8009604 <strncmp>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d14e      	bne.n	8003962 <SerialCommands+0x186>
    i = 6;
 80038c4:	2327      	movs	r3, #39	; 0x27
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2206      	movs	r2, #6
 80038ca:	701a      	strb	r2, [r3, #0]
    uint8_t colors[3] = {0, 0, 0};
 80038cc:	231c      	movs	r3, #28
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	4a94      	ldr	r2, [pc, #592]	; (8003b24 <SerialCommands+0x348>)
 80038d2:	8811      	ldrh	r1, [r2, #0]
 80038d4:	8019      	strh	r1, [r3, #0]
 80038d6:	7892      	ldrb	r2, [r2, #2]
 80038d8:	709a      	strb	r2, [r3, #2]
    for(uint8_t j = 0; j < sizeof(colors); j++){
 80038da:	233d      	movs	r3, #61	; 0x3d
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e02b      	b.n	800393c <SerialCommands+0x160>
      colors[j] = (uint8_t)ParseNumber(input, &i, &error_flag);
 80038e4:	2326      	movs	r3, #38	; 0x26
 80038e6:	18fa      	adds	r2, r7, r3
 80038e8:	2427      	movs	r4, #39	; 0x27
 80038ea:	1939      	adds	r1, r7, r4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 fa2c 	bl	8003d4c <ParseNumber>
 80038f4:	0003      	movs	r3, r0
 80038f6:	001a      	movs	r2, r3
 80038f8:	203d      	movs	r0, #61	; 0x3d
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b2d1      	uxtb	r1, r2
 8003900:	221c      	movs	r2, #28
 8003902:	18ba      	adds	r2, r7, r2
 8003904:	54d1      	strb	r1, [r2, r3]
      if(input[i] == '\r' || input[i] == '\n'){
 8003906:	193b      	adds	r3, r7, r4
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	001a      	movs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	189b      	adds	r3, r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b0d      	cmp	r3, #13
 8003914:	d017      	beq.n	8003946 <SerialCommands+0x16a>
 8003916:	193b      	adds	r3, r7, r4
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	001a      	movs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	189b      	adds	r3, r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b0a      	cmp	r3, #10
 8003924:	d00f      	beq.n	8003946 <SerialCommands+0x16a>
      i++;
 8003926:	193b      	adds	r3, r7, r4
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	193b      	adds	r3, r7, r4
 8003930:	701a      	strb	r2, [r3, #0]
    for(uint8_t j = 0; j < sizeof(colors); j++){
 8003932:	183b      	adds	r3, r7, r0
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	183b      	adds	r3, r7, r0
 8003938:	3201      	adds	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	233d      	movs	r3, #61	; 0x3d
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d9ce      	bls.n	80038e4 <SerialCommands+0x108>
    if(error_flag){
 8003946:	2326      	movs	r3, #38	; 0x26
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <SerialCommands+0x17a>
      ValueError();
 8003950:	f000 fae6 	bl	8003f20 <ValueError>
}
 8003954:	e1e7      	b.n	8003d26 <SerialCommands+0x54a>
      SetColorValues(colors);
 8003956:	231c      	movs	r3, #28
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fc74 	bl	8004248 <SetColorValues>
}
 8003960:	e1e1      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "LUM?", 4U) == 0){
 8003962:	4974      	ldr	r1, [pc, #464]	; (8003b34 <SerialCommands+0x358>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	0018      	movs	r0, r3
 800396a:	f005 fe4b 	bl	8009604 <strncmp>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d128      	bne.n	80039c4 <SerialCommands+0x1e8>
    uint8_t len_out = 0;
 8003972:	252b      	movs	r5, #43	; 0x2b
 8003974:	197b      	adds	r3, r7, r5
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
    uint16_t val = GetLuminanceValue();
 800397a:	2628      	movs	r6, #40	; 0x28
 800397c:	19bc      	adds	r4, r7, r6
 800397e:	f000 fcbd 	bl	80042fc <GetLuminanceValue>
 8003982:	0003      	movs	r3, r0
 8003984:	8023      	strh	r3, [r4, #0]
    len_out += NumberLen(val);
 8003986:	0034      	movs	r4, r6
 8003988:	193b      	adds	r3, r7, r4
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 fa7b 	bl	8003e88 <NumberLen>
 8003992:	0003      	movs	r3, r0
 8003994:	b2d9      	uxtb	r1, r3
 8003996:	197b      	adds	r3, r7, r5
 8003998:	197a      	adds	r2, r7, r5
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	188a      	adds	r2, r1, r2
 800399e:	701a      	strb	r2, [r3, #0]
    sprintf((char*)serial_out, "%i\n\r", val);
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	881a      	ldrh	r2, [r3, #0]
 80039a4:	4964      	ldr	r1, [pc, #400]	; (8003b38 <SerialCommands+0x35c>)
 80039a6:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <SerialCommands+0x350>)
 80039a8:	0018      	movs	r0, r3
 80039aa:	f005 fe0b 	bl	80095c4 <siprintf>
    SendSerial(serial_out, len_out + 2);
 80039ae:	197b      	adds	r3, r7, r5
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3302      	adds	r3, #2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <SerialCommands+0x350>)
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff fef7 	bl	80037b0 <SendSerial>
}
 80039c2:	e1b0      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "LUM", 3U) == 0){
 80039c4:	495d      	ldr	r1, [pc, #372]	; (8003b3c <SerialCommands+0x360>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	0018      	movs	r0, r3
 80039cc:	f005 fe1a 	bl	8009604 <strncmp>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d127      	bne.n	8003a24 <SerialCommands+0x248>
    i = 4;
 80039d4:	2127      	movs	r1, #39	; 0x27
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	2204      	movs	r2, #4
 80039da:	701a      	strb	r2, [r3, #0]
    uint16_t val = ParseNumber(input, &i, &error_flag);
 80039dc:	253a      	movs	r5, #58	; 0x3a
 80039de:	197c      	adds	r4, r7, r5
 80039e0:	2326      	movs	r3, #38	; 0x26
 80039e2:	18fa      	adds	r2, r7, r3
 80039e4:	1879      	adds	r1, r7, r1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 f9af 	bl	8003d4c <ParseNumber>
 80039ee:	0003      	movs	r3, r0
 80039f0:	8023      	strh	r3, [r4, #0]
    if(val > 1000){
 80039f2:	197b      	adds	r3, r7, r5
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	23fa      	movs	r3, #250	; 0xfa
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d903      	bls.n	8003a06 <SerialCommands+0x22a>
      val = 1000;
 80039fe:	197b      	adds	r3, r7, r5
 8003a00:	22fa      	movs	r2, #250	; 0xfa
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	801a      	strh	r2, [r3, #0]
    if(error_flag){
 8003a06:	2326      	movs	r3, #38	; 0x26
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <SerialCommands+0x23a>
      ValueError();
 8003a10:	f000 fa86 	bl	8003f20 <ValueError>
}
 8003a14:	e187      	b.n	8003d26 <SerialCommands+0x54a>
      SetLuminanceValue(val);
 8003a16:	233a      	movs	r3, #58	; 0x3a
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f000 fc8f 	bl	8004340 <SetLuminanceValue>
}
 8003a22:	e180      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "RATE?", 5U) == 0){
 8003a24:	4946      	ldr	r1, [pc, #280]	; (8003b40 <SerialCommands+0x364>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2205      	movs	r2, #5
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f005 fdea 	bl	8009604 <strncmp>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d128      	bne.n	8003a86 <SerialCommands+0x2aa>
    uint8_t len_out = 0;
 8003a34:	252f      	movs	r5, #47	; 0x2f
 8003a36:	197b      	adds	r3, r7, r5
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    uint16_t val = GetRateValue();
 8003a3c:	262c      	movs	r6, #44	; 0x2c
 8003a3e:	19bc      	adds	r4, r7, r6
 8003a40:	f000 fcb0 	bl	80043a4 <GetRateValue>
 8003a44:	0003      	movs	r3, r0
 8003a46:	8023      	strh	r3, [r4, #0]
    len_out += NumberLen(val);
 8003a48:	0034      	movs	r4, r6
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 fa1a 	bl	8003e88 <NumberLen>
 8003a54:	0003      	movs	r3, r0
 8003a56:	b2d9      	uxtb	r1, r3
 8003a58:	197b      	adds	r3, r7, r5
 8003a5a:	197a      	adds	r2, r7, r5
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	188a      	adds	r2, r1, r2
 8003a60:	701a      	strb	r2, [r3, #0]
    sprintf((char*)serial_out, "%i\n\r", val);
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	4934      	ldr	r1, [pc, #208]	; (8003b38 <SerialCommands+0x35c>)
 8003a68:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <SerialCommands+0x350>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f005 fdaa 	bl	80095c4 <siprintf>
    SendSerial(serial_out, len_out + 2);
 8003a70:	197b      	adds	r3, r7, r5
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3302      	adds	r3, #2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <SerialCommands+0x350>)
 8003a7c:	0011      	movs	r1, r2
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f7ff fe96 	bl	80037b0 <SendSerial>
}
 8003a84:	e14f      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "RATE", 4U) == 0){
 8003a86:	492f      	ldr	r1, [pc, #188]	; (8003b44 <SerialCommands+0x368>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f005 fdb9 	bl	8009604 <strncmp>
 8003a92:	1e03      	subs	r3, r0, #0
 8003a94:	d124      	bne.n	8003ae0 <SerialCommands+0x304>
    i = 5;
 8003a96:	2127      	movs	r1, #39	; 0x27
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	701a      	strb	r2, [r3, #0]
    uint16_t val = ParseNumber(input, &i, &error_flag);
 8003a9e:	2538      	movs	r5, #56	; 0x38
 8003aa0:	197c      	adds	r4, r7, r5
 8003aa2:	2326      	movs	r3, #38	; 0x26
 8003aa4:	18fa      	adds	r2, r7, r3
 8003aa6:	1879      	adds	r1, r7, r1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 f94e 	bl	8003d4c <ParseNumber>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	8023      	strh	r3, [r4, #0]
    if(val > 255){
 8003ab4:	197b      	adds	r3, r7, r5
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	d902      	bls.n	8003ac2 <SerialCommands+0x2e6>
      val = 255;
 8003abc:	197b      	adds	r3, r7, r5
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	801a      	strh	r2, [r3, #0]
    if(error_flag){
 8003ac2:	2326      	movs	r3, #38	; 0x26
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <SerialCommands+0x2f6>
      ValueError();
 8003acc:	f000 fa28 	bl	8003f20 <ValueError>
}
 8003ad0:	e129      	b.n	8003d26 <SerialCommands+0x54a>
      SetRateValue(val);
 8003ad2:	2338      	movs	r3, #56	; 0x38
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 fc6d 	bl	80043b8 <SetRateValue>
}
 8003ade:	e122      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "SAVE?", 5U) == 0){
 8003ae0:	4919      	ldr	r1, [pc, #100]	; (8003b48 <SerialCommands+0x36c>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f005 fd8c 	bl	8009604 <strncmp>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d000      	beq.n	8003af2 <SerialCommands+0x316>
 8003af0:	e074      	b.n	8003bdc <SerialCommands+0x400>
    uint8_t len_out = 0;
 8003af2:	2337      	movs	r3, #55	; 0x37
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
    uint16_t buf[6] = {0};
 8003afa:	2410      	movs	r4, #16
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	0018      	movs	r0, r3
 8003b00:	230c      	movs	r3, #12
 8003b02:	001a      	movs	r2, r3
 8003b04:	2100      	movs	r1, #0
 8003b06:	f005 fd55 	bl	80095b4 <memset>
    readSavedData(buf, EEPROMADDRESS);
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff fa90 	bl	8003034 <readSavedData>
    for(uint8_t i = 0; i < sizeof(buf); i++){
 8003b14:	2336      	movs	r3, #54	; 0x36
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e02d      	b.n	8003b7a <SerialCommands+0x39e>
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	0800ad40 	.word	0x0800ad40
 8003b24:	0800adf8 	.word	0x0800adf8
 8003b28:	0800ad48 	.word	0x0800ad48
 8003b2c:	20000098 	.word	0x20000098
 8003b30:	0800ad68 	.word	0x0800ad68
 8003b34:	0800ad70 	.word	0x0800ad70
 8003b38:	0800ad78 	.word	0x0800ad78
 8003b3c:	0800ad80 	.word	0x0800ad80
 8003b40:	0800ad84 	.word	0x0800ad84
 8003b44:	0800ad8c 	.word	0x0800ad8c
 8003b48:	0800ad94 	.word	0x0800ad94
      len_out += NumberLen(buf[i]);
 8003b4c:	2436      	movs	r4, #54	; 0x36
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	2310      	movs	r3, #16
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	0052      	lsls	r2, r2, #1
 8003b58:	5ad3      	ldrh	r3, [r2, r3]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f994 	bl	8003e88 <NumberLen>
 8003b60:	0003      	movs	r3, r0
 8003b62:	b2d9      	uxtb	r1, r3
 8003b64:	2237      	movs	r2, #55	; 0x37
 8003b66:	18bb      	adds	r3, r7, r2
 8003b68:	18ba      	adds	r2, r7, r2
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	188a      	adds	r2, r1, r2
 8003b6e:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < sizeof(buf); i++){
 8003b70:	193b      	adds	r3, r7, r4
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	3201      	adds	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	2336      	movs	r3, #54	; 0x36
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b0b      	cmp	r3, #11
 8003b82:	d9e3      	bls.n	8003b4c <SerialCommands+0x370>
    len_out += 40;
 8003b84:	2237      	movs	r2, #55	; 0x37
 8003b86:	18bb      	adds	r3, r7, r2
 8003b88:	18ba      	adds	r2, r7, r2
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	3228      	adds	r2, #40	; 0x28
 8003b8e:	701a      	strb	r2, [r3, #0]
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8003b90:	2110      	movs	r1, #16
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	881b      	ldrh	r3, [r3, #0]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8003b96:	001e      	movs	r6, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	885b      	ldrh	r3, [r3, #2]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8003b9c:	469c      	mov	ip, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	889b      	ldrh	r3, [r3, #4]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8003ba2:	001a      	movs	r2, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	88db      	ldrh	r3, [r3, #6]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8003ba8:	001c      	movs	r4, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	891b      	ldrh	r3, [r3, #8]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8003bae:	001d      	movs	r5, r3
                                buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	895b      	ldrh	r3, [r3, #10]
    sprintf((char*)serial_out, "ID: %i\nRED: %i\nGREEN: %i\nBLUE: %i\nLUM: %i\nRATE: %i\n\r",
 8003bb4:	495e      	ldr	r1, [pc, #376]	; (8003d30 <SerialCommands+0x554>)
 8003bb6:	485f      	ldr	r0, [pc, #380]	; (8003d34 <SerialCommands+0x558>)
 8003bb8:	9303      	str	r3, [sp, #12]
 8003bba:	9502      	str	r5, [sp, #8]
 8003bbc:	9401      	str	r4, [sp, #4]
 8003bbe:	9200      	str	r2, [sp, #0]
 8003bc0:	4663      	mov	r3, ip
 8003bc2:	0032      	movs	r2, r6
 8003bc4:	f005 fcfe 	bl	80095c4 <siprintf>
    SendSerial(serial_out, len_out);
 8003bc8:	2237      	movs	r2, #55	; 0x37
 8003bca:	18bb      	adds	r3, r7, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <SerialCommands+0x558>)
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff fdeb 	bl	80037b0 <SendSerial>
}
 8003bda:	e0a4      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "SAVE", 4U) == 0){
 8003bdc:	4956      	ldr	r1, [pc, #344]	; (8003d38 <SerialCommands+0x55c>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2204      	movs	r2, #4
 8003be2:	0018      	movs	r0, r3
 8003be4:	f005 fd0e 	bl	8009604 <strncmp>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d12a      	bne.n	8003c42 <SerialCommands+0x466>
    uint8_t data[6] = {0};
 8003bec:	2508      	movs	r5, #8
 8003bee:	197b      	adds	r3, r7, r5
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	809a      	strh	r2, [r3, #4]
    GetColorValues(data);
 8003bf8:	197b      	adds	r3, r7, r5
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 fac8 	bl	8004190 <GetColorValues>
    uint16_t lum = GetLuminanceValue();
 8003c00:	2630      	movs	r6, #48	; 0x30
 8003c02:	19bc      	adds	r4, r7, r6
 8003c04:	f000 fb7a 	bl	80042fc <GetLuminanceValue>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	8023      	strh	r3, [r4, #0]
    data[3] = (uint8_t)((lum & 0x0300) >> 8);
 8003c0c:	0031      	movs	r1, r6
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	121b      	asrs	r3, r3, #8
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2203      	movs	r2, #3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	197b      	adds	r3, r7, r5
 8003c1e:	70da      	strb	r2, [r3, #3]
    data[4] = (uint8_t)(lum & 0x00FF);
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	197b      	adds	r3, r7, r5
 8003c28:	711a      	strb	r2, [r3, #4]
    data[5] = (uint8_t)GetRateValue();
 8003c2a:	f000 fbbb 	bl	80043a4 <GetRateValue>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	197b      	adds	r3, r7, r5
 8003c34:	715a      	strb	r2, [r3, #5]
    setSavedData(EEPROMADDRESS, data);
 8003c36:	197b      	adds	r3, r7, r5
 8003c38:	0019      	movs	r1, r3
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7ff fa7d 	bl	800313a <setSavedData>
}
 8003c40:	e071      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "ID?", 3U) == 0){
 8003c42:	493e      	ldr	r1, [pc, #248]	; (8003d3c <SerialCommands+0x560>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2203      	movs	r2, #3
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f005 fcdb 	bl	8009604 <strncmp>
 8003c4e:	1e03      	subs	r3, r0, #0
 8003c50:	d12b      	bne.n	8003caa <SerialCommands+0x4ce>
    uint8_t len_out = 0;
 8003c52:	2533      	movs	r5, #51	; 0x33
 8003c54:	197b      	adds	r3, r7, r5
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
    uint8_t val = eepromRead(ID, EEPROMADDRESS);
 8003c5a:	2632      	movs	r6, #50	; 0x32
 8003c5c:	19bc      	adds	r4, r7, r6
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2000      	movs	r0, #0
 8003c62:	f7ff f969 	bl	8002f38 <eepromRead>
 8003c66:	0003      	movs	r3, r0
 8003c68:	7023      	strb	r3, [r4, #0]
    len_out += NumberLen(val);
 8003c6a:	0034      	movs	r4, r6
 8003c6c:	193b      	adds	r3, r7, r4
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 f908 	bl	8003e88 <NumberLen>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	b2d9      	uxtb	r1, r3
 8003c7c:	197b      	adds	r3, r7, r5
 8003c7e:	197a      	adds	r2, r7, r5
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	188a      	adds	r2, r1, r2
 8003c84:	701a      	strb	r2, [r3, #0]
    sprintf((char*)serial_out, "%i\n\r", val);
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	492d      	ldr	r1, [pc, #180]	; (8003d40 <SerialCommands+0x564>)
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <SerialCommands+0x558>)
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f005 fc98 	bl	80095c4 <siprintf>
    SendSerial(serial_out, len_out + 2);
 8003c94:	197b      	adds	r3, r7, r5
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <SerialCommands+0x558>)
 8003ca0:	0011      	movs	r1, r2
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff fd84 	bl	80037b0 <SendSerial>
}
 8003ca8:	e03d      	b.n	8003d26 <SerialCommands+0x54a>
  else if(strncmp((char*)input, "ID", 2U) == 0){
 8003caa:	4926      	ldr	r1, [pc, #152]	; (8003d44 <SerialCommands+0x568>)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f005 fca7 	bl	8009604 <strncmp>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d12a      	bne.n	8003d10 <SerialCommands+0x534>
    i = 3;
 8003cba:	2127      	movs	r1, #39	; 0x27
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	701a      	strb	r2, [r3, #0]
    uint16_t val = ParseNumber(input, &i, &error_flag);
 8003cc2:	2534      	movs	r5, #52	; 0x34
 8003cc4:	197c      	adds	r4, r7, r5
 8003cc6:	2326      	movs	r3, #38	; 0x26
 8003cc8:	18fa      	adds	r2, r7, r3
 8003cca:	1879      	adds	r1, r7, r1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f83c 	bl	8003d4c <ParseNumber>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	8023      	strh	r3, [r4, #0]
    if(val > 255){
 8003cd8:	197b      	adds	r3, r7, r5
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2bff      	cmp	r3, #255	; 0xff
 8003cde:	d902      	bls.n	8003ce6 <SerialCommands+0x50a>
      val = 255;
 8003ce0:	197b      	adds	r3, r7, r5
 8003ce2:	22ff      	movs	r2, #255	; 0xff
 8003ce4:	801a      	strh	r2, [r3, #0]
    if(error_flag){
 8003ce6:	2326      	movs	r3, #38	; 0x26
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <SerialCommands+0x51a>
      ValueError();
 8003cf0:	f000 f916 	bl	8003f20 <ValueError>
}
 8003cf4:	e017      	b.n	8003d26 <SerialCommands+0x54a>
      eepromWrite(ID, (uint8_t)val, EEPROMADDRESS);
 8003cf6:	2334      	movs	r3, #52	; 0x34
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2200      	movs	r2, #0
 8003d00:	0019      	movs	r1, r3
 8003d02:	2000      	movs	r0, #0
 8003d04:	f7ff f954 	bl	8002fb0 <eepromWrite>
      HAL_Delay(5);
 8003d08:	2005      	movs	r0, #5
 8003d0a:	f000 ff69 	bl	8004be0 <HAL_Delay>
}
 8003d0e:	e00a      	b.n	8003d26 <SerialCommands+0x54a>
    sprintf((char*)serial_out, "Error: No Command\n\r");
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <SerialCommands+0x56c>)
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <SerialCommands+0x558>)
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f005 fc54 	bl	80095c4 <siprintf>
    SendSerial(serial_out, 19);
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <SerialCommands+0x558>)
 8003d1e:	2113      	movs	r1, #19
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff fd45 	bl	80037b0 <SendSerial>
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b011      	add	sp, #68	; 0x44
 8003d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	0800ad9c 	.word	0x0800ad9c
 8003d34:	20000098 	.word	0x20000098
 8003d38:	0800add4 	.word	0x0800add4
 8003d3c:	0800addc 	.word	0x0800addc
 8003d40:	0800ad78 	.word	0x0800ad78
 8003d44:	0800ade0 	.word	0x0800ade0
 8003d48:	0800ade4 	.word	0x0800ade4

08003d4c <ParseNumber>:

uint16_t ParseNumber(uint8_t* input, uint8_t* i, uint8_t* error){
 8003d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  uint8_t col = 0; // largest decimal place column number
 8003d58:	2317      	movs	r3, #23
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]

  while(input[*i + col] != '\r' && input[*i + col] != '\n' && input[*i + col] != ',' && *i < 20){
 8003d60:	e005      	b.n	8003d6e <ParseNumber+0x22>
    col++;
 8003d62:	2117      	movs	r1, #23
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	3201      	adds	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
  while(input[*i + col] != '\r' && input[*i + col] != '\n' && input[*i + col] != ',' && *i < 20){
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	001a      	movs	r2, r3
 8003d74:	2117      	movs	r1, #23
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	18d3      	adds	r3, r2, r3
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b0d      	cmp	r3, #13
 8003d86:	d01b      	beq.n	8003dc0 <ParseNumber+0x74>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	18d3      	adds	r3, r2, r3
 8003d94:	001a      	movs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	189b      	adds	r3, r3, r2
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b0a      	cmp	r3, #10
 8003d9e:	d00f      	beq.n	8003dc0 <ParseNumber+0x74>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	001a      	movs	r2, r3
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	18d3      	adds	r3, r2, r3
 8003dac:	001a      	movs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b2c      	cmp	r3, #44	; 0x2c
 8003db6:	d003      	beq.n	8003dc0 <ParseNumber+0x74>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b13      	cmp	r3, #19
 8003dbe:	d9d0      	bls.n	8003d62 <ParseNumber+0x16>
  }

  uint16_t val = 0;
 8003dc0:	2314      	movs	r3, #20
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	801a      	strh	r2, [r3, #0]
  while(col != 0){
 8003dc8:	e050      	b.n	8003e6c <ParseNumber+0x120>

    if((uint8_t)(input[*i] - 0x30) > 9){
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	001a      	movs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	3b30      	subs	r3, #48	; 0x30
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b09      	cmp	r3, #9
 8003ddc:	d902      	bls.n	8003de4 <ParseNumber+0x98>
    *error = 1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
    }

    val += (input[*i] - 0x30) * pow(10, col - 1);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	001a      	movs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	3b30      	subs	r3, #48	; 0x30
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe ff4e 	bl	8002c94 <__aeabi_i2d>
 8003df8:	0004      	movs	r4, r0
 8003dfa:	000d      	movs	r5, r1
 8003dfc:	2617      	movs	r6, #23
 8003dfe:	19bb      	adds	r3, r7, r6
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7fe ff45 	bl	8002c94 <__aeabi_i2d>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	000b      	movs	r3, r1
 8003e0e:	2000      	movs	r0, #0
 8003e10:	491c      	ldr	r1, [pc, #112]	; (8003e84 <ParseNumber+0x138>)
 8003e12:	f006 f80f 	bl	8009e34 <pow>
 8003e16:	0002      	movs	r2, r0
 8003e18:	000b      	movs	r3, r1
 8003e1a:	0020      	movs	r0, r4
 8003e1c:	0029      	movs	r1, r5
 8003e1e:	f7fe f8e7 	bl	8001ff0 <__aeabi_dmul>
 8003e22:	0002      	movs	r2, r0
 8003e24:	000b      	movs	r3, r1
 8003e26:	0014      	movs	r4, r2
 8003e28:	001d      	movs	r5, r3
 8003e2a:	2314      	movs	r3, #20
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7fe ff2f 	bl	8002c94 <__aeabi_i2d>
 8003e36:	0002      	movs	r2, r0
 8003e38:	000b      	movs	r3, r1
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	0029      	movs	r1, r5
 8003e3e:	f7fd f967 	bl	8001110 <__aeabi_dadd>
 8003e42:	0002      	movs	r2, r0
 8003e44:	000b      	movs	r3, r1
 8003e46:	2114      	movs	r1, #20
 8003e48:	187c      	adds	r4, r7, r1
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	f7fc fa8f 	bl	8000370 <__aeabi_d2uiz>
 8003e52:	0003      	movs	r3, r0
 8003e54:	8023      	strh	r3, [r4, #0]
    *i += 1;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	701a      	strb	r2, [r3, #0]
    col--;
 8003e62:	19bb      	adds	r3, r7, r6
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	19bb      	adds	r3, r7, r6
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
  while(col != 0){
 8003e6c:	2317      	movs	r3, #23
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1a9      	bne.n	8003dca <ParseNumber+0x7e>
  }

  return val;
 8003e76:	2314      	movs	r3, #20
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	881b      	ldrh	r3, [r3, #0]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b007      	add	sp, #28
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	40240000 	.word	0x40240000

08003e88 <NumberLen>:

/**
  *NumberLen
  */
uint16_t NumberLen(uint16_t num){
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	0002      	movs	r2, r0
 8003e90:	1dbb      	adds	r3, r7, #6
 8003e92:	801a      	strh	r2, [r3, #0]
  uint16_t len = 0;
 8003e94:	210e      	movs	r1, #14
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	2200      	movs	r2, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
  if(num >= 10000){
 8003e9c:	1dbb      	adds	r3, r7, #6
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	4a1e      	ldr	r2, [pc, #120]	; (8003f1c <NumberLen+0x94>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d905      	bls.n	8003eb2 <NumberLen+0x2a>
      len += 5;
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	187a      	adds	r2, r7, r1
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	3205      	adds	r2, #5
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	e02c      	b.n	8003f0c <NumberLen+0x84>
  }
  else if(num >= 1000){
 8003eb2:	1dbb      	adds	r3, r7, #6
 8003eb4:	881a      	ldrh	r2, [r3, #0]
 8003eb6:	23fa      	movs	r3, #250	; 0xfa
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d306      	bcc.n	8003ecc <NumberLen+0x44>
      len += 4;
 8003ebe:	220e      	movs	r2, #14
 8003ec0:	18bb      	adds	r3, r7, r2
 8003ec2:	18ba      	adds	r2, r7, r2
 8003ec4:	8812      	ldrh	r2, [r2, #0]
 8003ec6:	3204      	adds	r2, #4
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	e01f      	b.n	8003f0c <NumberLen+0x84>
  }
  else if(num >= 100){
 8003ecc:	1dbb      	adds	r3, r7, #6
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	2b63      	cmp	r3, #99	; 0x63
 8003ed2:	d906      	bls.n	8003ee2 <NumberLen+0x5a>
      len += 3;
 8003ed4:	220e      	movs	r2, #14
 8003ed6:	18bb      	adds	r3, r7, r2
 8003ed8:	18ba      	adds	r2, r7, r2
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	3203      	adds	r2, #3
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	e014      	b.n	8003f0c <NumberLen+0x84>
  }
  else if(num >= 10){
 8003ee2:	1dbb      	adds	r3, r7, #6
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	2b09      	cmp	r3, #9
 8003ee8:	d906      	bls.n	8003ef8 <NumberLen+0x70>
      len += 2;
 8003eea:	220e      	movs	r2, #14
 8003eec:	18bb      	adds	r3, r7, r2
 8003eee:	18ba      	adds	r2, r7, r2
 8003ef0:	8812      	ldrh	r2, [r2, #0]
 8003ef2:	3202      	adds	r2, #2
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	e009      	b.n	8003f0c <NumberLen+0x84>
  }
  else if(num < 10){
 8003ef8:	1dbb      	adds	r3, r7, #6
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	2b09      	cmp	r3, #9
 8003efe:	d805      	bhi.n	8003f0c <NumberLen+0x84>
      len += 1;
 8003f00:	220e      	movs	r2, #14
 8003f02:	18bb      	adds	r3, r7, r2
 8003f04:	18ba      	adds	r2, r7, r2
 8003f06:	8812      	ldrh	r2, [r2, #0]
 8003f08:	3201      	adds	r2, #1
 8003f0a:	801a      	strh	r2, [r3, #0]
  }

  return len;
 8003f0c:	230e      	movs	r3, #14
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	881b      	ldrh	r3, [r3, #0]
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b004      	add	sp, #16
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	0000270f 	.word	0x0000270f

08003f20 <ValueError>:

void ValueError(void){
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  sprintf((char*)serial_out, "Value Error\n\r");  //TODO: Stuttering Error message when error occurs after second comma
 8003f24:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <ValueError+0x20>)
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <ValueError+0x24>)
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f005 fb4a 	bl	80095c4 <siprintf>
  SendSerial(serial_out, 13);
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <ValueError+0x24>)
 8003f32:	210d      	movs	r1, #13
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fc3b 	bl	80037b0 <SendSerial>
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	0800adfc 	.word	0x0800adfc
 8003f44:	20000098 	.word	0x20000098

08003f48 <EEPROMError>:

void EEPROMError(void){
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
  uint16_t eepromStatusLogLen = getStatusLogLen();
 8003f4e:	1dbc      	adds	r4, r7, #6
 8003f50:	f7ff f97e 	bl	8003250 <getStatusLogLen>
 8003f54:	0003      	movs	r3, r0
 8003f56:	8023      	strh	r3, [r4, #0]

  for(eepromStatusLogLen; eepromStatusLogLen > 0; eepromStatusLogLen--){
 8003f58:	e035      	b.n	8003fc6 <EEPROMError+0x7e>
    if(eepromStatusLog[eepromStatusLogLen - 1] == HAL_BUSY){
 8003f5a:	1dbb      	adds	r3, r7, #6
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <EEPROMError+0x94>)
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d10b      	bne.n	8003f80 <EEPROMError+0x38>
      sprintf((char*)serial_out, "EEPROM BUSY\n\r");
 8003f68:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <EEPROMError+0x98>)
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <EEPROMError+0x9c>)
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f005 fb28 	bl	80095c4 <siprintf>
      SendSerial(serial_out, 13);
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <EEPROMError+0x9c>)
 8003f76:	210d      	movs	r1, #13
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fc19 	bl	80037b0 <SendSerial>
 8003f7e:	e01d      	b.n	8003fbc <EEPROMError+0x74>
    }
    else if(eepromStatusLog[eepromStatusLogLen - 1] == HAL_ERROR){
 8003f80:	1dbb      	adds	r3, r7, #6
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <EEPROMError+0x94>)
 8003f88:	5cd3      	ldrb	r3, [r2, r3]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10b      	bne.n	8003fa6 <EEPROMError+0x5e>
      sprintf((char*)serial_out, "EEPROM ERROR\n\r");
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <EEPROMError+0xa0>)
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <EEPROMError+0x9c>)
 8003f92:	0011      	movs	r1, r2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f005 fb15 	bl	80095c4 <siprintf>
      SendSerial(serial_out, 14);
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <EEPROMError+0x9c>)
 8003f9c:	210e      	movs	r1, #14
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7ff fc06 	bl	80037b0 <SendSerial>
 8003fa4:	e00a      	b.n	8003fbc <EEPROMError+0x74>
    }
    else{
      sprintf((char*)serial_out, "EEPROM FAIL\n\r");
 8003fa6:	4a11      	ldr	r2, [pc, #68]	; (8003fec <EEPROMError+0xa4>)
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <EEPROMError+0x9c>)
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f005 fb09 	bl	80095c4 <siprintf>
      SendSerial(serial_out, 13);
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <EEPROMError+0x9c>)
 8003fb4:	210d      	movs	r1, #13
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7ff fbfa 	bl	80037b0 <SendSerial>
  for(eepromStatusLogLen; eepromStatusLogLen > 0; eepromStatusLogLen--){
 8003fbc:	1dbb      	adds	r3, r7, #6
 8003fbe:	881a      	ldrh	r2, [r3, #0]
 8003fc0:	1dbb      	adds	r3, r7, #6
 8003fc2:	3a01      	subs	r2, #1
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1c5      	bne.n	8003f5a <EEPROMError+0x12>
    }
  }

  setStatusLogLen(0);
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7ff f948 	bl	8003264 <setStatusLogLen>

}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b003      	add	sp, #12
 8003fda:	bd90      	pop	{r4, r7, pc}
 8003fdc:	200002ac 	.word	0x200002ac
 8003fe0:	0800ae0c 	.word	0x0800ae0c
 8003fe4:	20000098 	.word	0x20000098
 8003fe8:	0800ae1c 	.word	0x0800ae1c
 8003fec:	0800ae2c 	.word	0x0800ae2c

08003ff0 <ProcessSerial>:

void ProcessSerial(uint8_t* Buf){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  serial_in[len_in] = *Buf;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <ProcessSerial+0x48>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7819      	ldrb	r1, [r3, #0]
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <ProcessSerial+0x4c>)
 8004004:	5499      	strb	r1, [r3, r2]
  len_in++;
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <ProcessSerial+0x48>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <ProcessSerial+0x48>)
 8004010:	701a      	strb	r2, [r3, #0]

  if(*Buf == '\n' || *Buf == '\r'){
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b0a      	cmp	r3, #10
 8004018:	d003      	beq.n	8004022 <ProcessSerial+0x32>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b0d      	cmp	r3, #13
 8004020:	d105      	bne.n	800402e <ProcessSerial+0x3e>
    command_term = 1;
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <ProcessSerial+0x50>)
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
    len_in = 0;
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <ProcessSerial+0x48>)
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
  }
}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	20000297 	.word	0x20000297
 800403c:	20000198 	.word	0x20000198
 8004040:	20000299 	.word	0x20000299

08004044 <CheckCommand>:

void CheckCommand(void){
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  if(command_term == 1){
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <CheckCommand+0x28>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d109      	bne.n	8004064 <CheckCommand+0x20>
    command_term = 0;
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <CheckCommand+0x28>)
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
    SerialCommands(serial_in, i_in);
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <CheckCommand+0x2c>)
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <CheckCommand+0x30>)
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f7ff fbbc 	bl	80037dc <SerialCommands>
  }
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	20000299 	.word	0x20000299
 8004070:	20000298 	.word	0x20000298
 8004074:	20000198 	.word	0x20000198

08004078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_MspInit+0x24>)
 800407e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_MspInit+0x24>)
 8004082:	2101      	movs	r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_MspInit+0x24>)
 800408a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_MspInit+0x24>)
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	0549      	lsls	r1, r1, #21
 8004092:	430a      	orrs	r2, r1
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000

080040a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <NMI_Handler+0x4>

080040a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <HardFault_Handler+0x4>

080040ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c4:	f000 fd70 	bl	8004ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <USART4_5_IRQHandler+0x14>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f004 f80a 	bl	80080f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	20000818 	.word	0x20000818

080040e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <TIM7_IRQHandler+0x14>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f003 f95c 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	200007d8 	.word	0x200007d8

08004100 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <USART1_IRQHandler+0x14>)
 8004106:	0018      	movs	r0, r3
 8004108:	f003 fff2 	bl	80080f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	2000089c 	.word	0x2000089c

08004118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <_sbrk+0x5c>)
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <_sbrk+0x60>)
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <_sbrk+0x64>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <_sbrk+0x64>)
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <_sbrk+0x68>)
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <_sbrk+0x64>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d207      	bcs.n	8004158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004148:	f005 fa0a 	bl	8009560 <__errno>
 800414c:	0003      	movs	r3, r0
 800414e:	220c      	movs	r2, #12
 8004150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004152:	2301      	movs	r3, #1
 8004154:	425b      	negs	r3, r3
 8004156:	e009      	b.n	800416c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <_sbrk+0x64>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <_sbrk+0x64>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	18d2      	adds	r2, r2, r3
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <_sbrk+0x64>)
 8004168:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800416a:	68fb      	ldr	r3, [r7, #12]
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b006      	add	sp, #24
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20005000 	.word	0x20005000
 8004178:	00000400 	.word	0x00000400
 800417c:	2000029c 	.word	0x2000029c
 8004180:	20000938 	.word	0x20000938

08004184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <GetColorValues>:
/* USER CODE BEGIN 0 */
/**
 * @brief This functions sets RGB as
 * @details
 */
void GetColorValues(uint8_t* colors){
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  //Colors are between 0 and 255; PWM values are from 0 to 32000
  //32000/255 = 125.49; timer values are scaled down
  //to give an approximate 0-255 value
  colors[0] = (uint8_t)((float)htim3.Instance->CCR1/125.49f + 0.5f);
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <GetColorValues+0xb0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	0018      	movs	r0, r3
 80041a0:	f7fc ff7a 	bl	8001098 <__aeabi_ui2f>
 80041a4:	1c03      	adds	r3, r0, #0
 80041a6:	4927      	ldr	r1, [pc, #156]	; (8004244 <GetColorValues+0xb4>)
 80041a8:	1c18      	adds	r0, r3, #0
 80041aa:	f7fc fb67 	bl	800087c <__aeabi_fdiv>
 80041ae:	1c03      	adds	r3, r0, #0
 80041b0:	21fc      	movs	r1, #252	; 0xfc
 80041b2:	0589      	lsls	r1, r1, #22
 80041b4:	1c18      	adds	r0, r3, #0
 80041b6:	f7fc f9c5 	bl	8000544 <__aeabi_fadd>
 80041ba:	1c03      	adds	r3, r0, #0
 80041bc:	1c18      	adds	r0, r3, #0
 80041be:	f7fc f8bf 	bl	8000340 <__aeabi_f2uiz>
 80041c2:	0003      	movs	r3, r0
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	701a      	strb	r2, [r3, #0]
  colors[1] = (uint8_t)((float)htim3.Instance->CCR2/125.49f + 0.5f);
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <GetColorValues+0xb0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7fc ff61 	bl	8001098 <__aeabi_ui2f>
 80041d6:	1c03      	adds	r3, r0, #0
 80041d8:	491a      	ldr	r1, [pc, #104]	; (8004244 <GetColorValues+0xb4>)
 80041da:	1c18      	adds	r0, r3, #0
 80041dc:	f7fc fb4e 	bl	800087c <__aeabi_fdiv>
 80041e0:	1c03      	adds	r3, r0, #0
 80041e2:	21fc      	movs	r1, #252	; 0xfc
 80041e4:	0589      	lsls	r1, r1, #22
 80041e6:	1c18      	adds	r0, r3, #0
 80041e8:	f7fc f9ac 	bl	8000544 <__aeabi_fadd>
 80041ec:	1c03      	adds	r3, r0, #0
 80041ee:	1c1a      	adds	r2, r3, #0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	1c5c      	adds	r4, r3, #1
 80041f4:	1c10      	adds	r0, r2, #0
 80041f6:	f7fc f8a3 	bl	8000340 <__aeabi_f2uiz>
 80041fa:	0003      	movs	r3, r0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	7023      	strb	r3, [r4, #0]
  colors[2] = (uint8_t)((float)htim3.Instance->CCR3/125.49f + 0.5f);
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <GetColorValues+0xb0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	0018      	movs	r0, r3
 8004208:	f7fc ff46 	bl	8001098 <__aeabi_ui2f>
 800420c:	1c03      	adds	r3, r0, #0
 800420e:	490d      	ldr	r1, [pc, #52]	; (8004244 <GetColorValues+0xb4>)
 8004210:	1c18      	adds	r0, r3, #0
 8004212:	f7fc fb33 	bl	800087c <__aeabi_fdiv>
 8004216:	1c03      	adds	r3, r0, #0
 8004218:	21fc      	movs	r1, #252	; 0xfc
 800421a:	0589      	lsls	r1, r1, #22
 800421c:	1c18      	adds	r0, r3, #0
 800421e:	f7fc f991 	bl	8000544 <__aeabi_fadd>
 8004222:	1c03      	adds	r3, r0, #0
 8004224:	1c1a      	adds	r2, r3, #0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1c9c      	adds	r4, r3, #2
 800422a:	1c10      	adds	r0, r2, #0
 800422c:	f7fc f888 	bl	8000340 <__aeabi_f2uiz>
 8004230:	0003      	movs	r3, r0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	7023      	strb	r3, [r4, #0]
}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	b003      	add	sp, #12
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	20000758 	.word	0x20000758
 8004244:	42fafae1 	.word	0x42fafae1

08004248 <SetColorValues>:

void SetColorValues(uint8_t* colors){
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  }
  if(colors[2] > 255){
    colors[2] = 255;
  }
  //colors contains primary color values that must be conditioned for the 32000 range of PWM values
  htim3.Instance->CCR1 = (uint16_t)((float)colors[0]*125.49f + 0.5f);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	0018      	movs	r0, r3
 8004256:	f7fc ff1f 	bl	8001098 <__aeabi_ui2f>
 800425a:	1c03      	adds	r3, r0, #0
 800425c:	4925      	ldr	r1, [pc, #148]	; (80042f4 <SetColorValues+0xac>)
 800425e:	1c18      	adds	r0, r3, #0
 8004260:	f7fc fc18 	bl	8000a94 <__aeabi_fmul>
 8004264:	1c03      	adds	r3, r0, #0
 8004266:	21fc      	movs	r1, #252	; 0xfc
 8004268:	0589      	lsls	r1, r1, #22
 800426a:	1c18      	adds	r0, r3, #0
 800426c:	f7fc f96a 	bl	8000544 <__aeabi_fadd>
 8004270:	1c03      	adds	r3, r0, #0
 8004272:	1c18      	adds	r0, r3, #0
 8004274:	f7fc f864 	bl	8000340 <__aeabi_f2uiz>
 8004278:	0003      	movs	r3, r0
 800427a:	b29a      	uxth	r2, r3
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <SetColorValues+0xb0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2 = (uint16_t)((float)colors[1]*125.49f + 0.5f);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3301      	adds	r3, #1
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	0018      	movs	r0, r3
 800428a:	f7fc ff05 	bl	8001098 <__aeabi_ui2f>
 800428e:	1c03      	adds	r3, r0, #0
 8004290:	4918      	ldr	r1, [pc, #96]	; (80042f4 <SetColorValues+0xac>)
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fbfe 	bl	8000a94 <__aeabi_fmul>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	21fc      	movs	r1, #252	; 0xfc
 800429c:	0589      	lsls	r1, r1, #22
 800429e:	1c18      	adds	r0, r3, #0
 80042a0:	f7fc f950 	bl	8000544 <__aeabi_fadd>
 80042a4:	1c03      	adds	r3, r0, #0
 80042a6:	1c18      	adds	r0, r3, #0
 80042a8:	f7fc f84a 	bl	8000340 <__aeabi_f2uiz>
 80042ac:	0003      	movs	r3, r0
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <SetColorValues+0xb0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
  htim3.Instance->CCR3 = (uint16_t)((float)colors[2]*125.49f + 0.5f);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3302      	adds	r3, #2
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	0018      	movs	r0, r3
 80042be:	f7fc feeb 	bl	8001098 <__aeabi_ui2f>
 80042c2:	1c03      	adds	r3, r0, #0
 80042c4:	490b      	ldr	r1, [pc, #44]	; (80042f4 <SetColorValues+0xac>)
 80042c6:	1c18      	adds	r0, r3, #0
 80042c8:	f7fc fbe4 	bl	8000a94 <__aeabi_fmul>
 80042cc:	1c03      	adds	r3, r0, #0
 80042ce:	21fc      	movs	r1, #252	; 0xfc
 80042d0:	0589      	lsls	r1, r1, #22
 80042d2:	1c18      	adds	r0, r3, #0
 80042d4:	f7fc f936 	bl	8000544 <__aeabi_fadd>
 80042d8:	1c03      	adds	r3, r0, #0
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc f830 	bl	8000340 <__aeabi_f2uiz>
 80042e0:	0003      	movs	r3, r0
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <SetColorValues+0xb0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	42fafae1 	.word	0x42fafae1
 80042f8:	20000758 	.word	0x20000758

080042fc <GetLuminanceValue>:

uint16_t GetLuminanceValue(void){
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  //expects a return between 0 and 1000 must be conditioned
  //lum in between 0 and 1000; PWM is between 0 and 3200
  //3200/1000 = 3.2; lum values are scaled down
  //lum flip must be accounted for
  return (uint16_t)(1000 - ((float)htim2.Instance->CCR1/3.2f));
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <GetLuminanceValue+0x38>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	0018      	movs	r0, r3
 8004308:	f7fc fec6 	bl	8001098 <__aeabi_ui2f>
 800430c:	1c03      	adds	r3, r0, #0
 800430e:	490a      	ldr	r1, [pc, #40]	; (8004338 <GetLuminanceValue+0x3c>)
 8004310:	1c18      	adds	r0, r3, #0
 8004312:	f7fc fab3 	bl	800087c <__aeabi_fdiv>
 8004316:	1c03      	adds	r3, r0, #0
 8004318:	1c19      	adds	r1, r3, #0
 800431a:	4808      	ldr	r0, [pc, #32]	; (800433c <GetLuminanceValue+0x40>)
 800431c:	f7fc fcd4 	bl	8000cc8 <__aeabi_fsub>
 8004320:	1c03      	adds	r3, r0, #0
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc f80c 	bl	8000340 <__aeabi_f2uiz>
 8004328:	0003      	movs	r3, r0
 800432a:	b29b      	uxth	r3, r3
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	20000798 	.word	0x20000798
 8004338:	404ccccd 	.word	0x404ccccd
 800433c:	447a0000 	.word	0x447a0000

08004340 <SetLuminanceValue>:

void SetLuminanceValue(uint16_t lum){
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	0002      	movs	r2, r0
 8004348:	1dbb      	adds	r3, r7, #6
 800434a:	801a      	strh	r2, [r3, #0]
  //lum cap
  if(lum > 1000){
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	881a      	ldrh	r2, [r3, #0]
 8004350:	23fa      	movs	r3, #250	; 0xfa
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d903      	bls.n	8004360 <SetLuminanceValue+0x20>
    lum = 1000;
 8004358:	1dbb      	adds	r3, r7, #6
 800435a:	22fa      	movs	r2, #250	; 0xfa
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	801a      	strh	r2, [r3, #0]
  }
  lum = 1000 - lum; // Flip
 8004360:	1dbb      	adds	r3, r7, #6
 8004362:	1dba      	adds	r2, r7, #6
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	21fa      	movs	r1, #250	; 0xfa
 8004368:	0089      	lsls	r1, r1, #2
 800436a:	1a8a      	subs	r2, r1, r2
 800436c:	801a      	strh	r2, [r3, #0]
  htim2.Instance->CCR1 = (uint16_t)((float)lum*3.2f);
 800436e:	1dbb      	adds	r3, r7, #6
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	0018      	movs	r0, r3
 8004374:	f7fc fe90 	bl	8001098 <__aeabi_ui2f>
 8004378:	1c03      	adds	r3, r0, #0
 800437a:	4908      	ldr	r1, [pc, #32]	; (800439c <SetLuminanceValue+0x5c>)
 800437c:	1c18      	adds	r0, r3, #0
 800437e:	f7fc fb89 	bl	8000a94 <__aeabi_fmul>
 8004382:	1c03      	adds	r3, r0, #0
 8004384:	1c18      	adds	r0, r3, #0
 8004386:	f7fb ffdb 	bl	8000340 <__aeabi_f2uiz>
 800438a:	0003      	movs	r3, r0
 800438c:	b29a      	uxth	r2, r3
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <SetLuminanceValue+0x60>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}
 800439c:	404ccccd 	.word	0x404ccccd
 80043a0:	20000798 	.word	0x20000798

080043a4 <GetRateValue>:

uint16_t rate = 0;
uint16_t GetRateValue(void){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  return rate;
 80043a8:	4b02      	ldr	r3, [pc, #8]	; (80043b4 <GetRateValue+0x10>)
 80043aa:	881b      	ldrh	r3, [r3, #0]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	200002a0 	.word	0x200002a0

080043b8 <SetRateValue>:

void SetRateValue(uint16_t val){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	0002      	movs	r2, r0
 80043c0:	1dbb      	adds	r3, r7, #6
 80043c2:	801a      	strh	r2, [r3, #0]
  rate = val;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <SetRateValue+0x1c>)
 80043c6:	1dba      	adds	r2, r7, #6
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	801a      	strh	r2, [r3, #0]
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200002a0 	.word	0x200002a0

080043d8 <ProcessLuminance>:

uint8_t time_flag = 0;
uint8_t dir = 0;
void ProcessLuminance(void){
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  if(time_flag){
 80043dc:	4b25      	ldr	r3, [pc, #148]	; (8004474 <ProcessLuminance+0x9c>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d044      	beq.n	800446e <ProcessLuminance+0x96>

    if(dir == 0){
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <ProcessLuminance+0xa0>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <ProcessLuminance+0x2c>
      SetLuminanceValue(GetLuminanceValue() + rate);
 80043ec:	f7ff ff86 	bl	80042fc <GetLuminanceValue>
 80043f0:	0003      	movs	r3, r0
 80043f2:	001a      	movs	r2, r3
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <ProcessLuminance+0xa4>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff ff9f 	bl	8004340 <SetLuminanceValue>
 8004402:	e016      	b.n	8004432 <ProcessLuminance+0x5a>
    }
    else{
      //prevent unsigned flips
      if((int)GetLuminanceValue() - (int)rate < 0){
 8004404:	f7ff ff7a 	bl	80042fc <GetLuminanceValue>
 8004408:	0003      	movs	r3, r0
 800440a:	001a      	movs	r2, r3
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <ProcessLuminance+0xa4>)
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	d503      	bpl.n	800441c <ProcessLuminance+0x44>
        SetLuminanceValue(0);
 8004414:	2000      	movs	r0, #0
 8004416:	f7ff ff93 	bl	8004340 <SetLuminanceValue>
 800441a:	e00a      	b.n	8004432 <ProcessLuminance+0x5a>
      }
      else{
        SetLuminanceValue(GetLuminanceValue() - rate);
 800441c:	f7ff ff6e 	bl	80042fc <GetLuminanceValue>
 8004420:	0003      	movs	r3, r0
 8004422:	001a      	movs	r2, r3
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <ProcessLuminance+0xa4>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff ff87 	bl	8004340 <SetLuminanceValue>
      }
    }
    if(dir == 0 && GetLuminanceValue() == 1000){
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <ProcessLuminance+0xa0>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <ProcessLuminance+0x7a>
 800443a:	f7ff ff5f 	bl	80042fc <GetLuminanceValue>
 800443e:	0003      	movs	r3, r0
 8004440:	001a      	movs	r2, r3
 8004442:	23fa      	movs	r3, #250	; 0xfa
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	429a      	cmp	r2, r3
 8004448:	d103      	bne.n	8004452 <ProcessLuminance+0x7a>
      dir = 1;
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <ProcessLuminance+0xa0>)
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e00a      	b.n	8004468 <ProcessLuminance+0x90>
    }
    else if(dir == 1 && GetLuminanceValue() == 0){
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <ProcessLuminance+0xa0>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d106      	bne.n	8004468 <ProcessLuminance+0x90>
 800445a:	f7ff ff4f 	bl	80042fc <GetLuminanceValue>
 800445e:	1e03      	subs	r3, r0, #0
 8004460:	d102      	bne.n	8004468 <ProcessLuminance+0x90>
      dir = 0;
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <ProcessLuminance+0xa0>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
    }

    time_flag = 0;
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <ProcessLuminance+0x9c>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
  }

}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	200002a2 	.word	0x200002a2
 8004478:	200002a3 	.word	0x200002a3
 800447c:	200002a0 	.word	0x200002a0

08004480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  if (htim == &htim7){
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d102      	bne.n	8004496 <HAL_TIM_PeriodElapsedCallback+0x16>
    time_flag = 1;
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
  }
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	200007d8 	.word	0x200007d8
 80044a4:	200002a2 	.word	0x200002a2

080044a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ae:	2318      	movs	r3, #24
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	0018      	movs	r0, r3
 80044b4:	2310      	movs	r3, #16
 80044b6:	001a      	movs	r2, r3
 80044b8:	2100      	movs	r1, #0
 80044ba:	f005 f87b 	bl	80095b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044be:	2310      	movs	r3, #16
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	0018      	movs	r0, r3
 80044c4:	2308      	movs	r3, #8
 80044c6:	001a      	movs	r2, r3
 80044c8:	2100      	movs	r1, #0
 80044ca:	f005 f873 	bl	80095b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ce:	003b      	movs	r3, r7
 80044d0:	0018      	movs	r0, r3
 80044d2:	2310      	movs	r3, #16
 80044d4:	001a      	movs	r2, r3
 80044d6:	2100      	movs	r1, #0
 80044d8:	f005 f86c 	bl	80095b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044dc:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <MX_TIM2_Init+0xf8>)
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	05d2      	lsls	r2, r2, #23
 80044e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <MX_TIM2_Init+0xf8>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <MX_TIM2_Init+0xf8>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <MX_TIM2_Init+0xf8>)
 80044f2:	22c8      	movs	r2, #200	; 0xc8
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f8:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <MX_TIM2_Init+0xf8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044fe:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004504:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004506:	0018      	movs	r0, r3
 8004508:	f002 fde4 	bl	80070d4 <HAL_TIM_Base_Init>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8004510:	f7ff f948 	bl	80037a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004514:	2118      	movs	r1, #24
 8004516:	187b      	adds	r3, r7, r1
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	0152      	lsls	r2, r2, #5
 800451c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800451e:	187a      	adds	r2, r7, r1
 8004520:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004522:	0011      	movs	r1, r2
 8004524:	0018      	movs	r0, r3
 8004526:	f003 f8ef 	bl	8007708 <HAL_TIM_ConfigClockSource>
 800452a:	1e03      	subs	r3, r0, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800452e:	f7ff f939 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004534:	0018      	movs	r0, r3
 8004536:	f002 fe5f 	bl	80071f8 <HAL_TIM_PWM_Init>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d001      	beq.n	8004542 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800453e:	f7ff f931 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004542:	2110      	movs	r1, #16
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454a:	187b      	adds	r3, r7, r1
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004550:	187a      	adds	r2, r7, r1
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004554:	0011      	movs	r1, r2
 8004556:	0018      	movs	r0, r3
 8004558:	f003 fbea 	bl	8007d30 <HAL_TIMEx_MasterConfigSynchronization>
 800455c:	1e03      	subs	r3, r0, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8004560:	f7ff f920 	bl	80037a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004564:	003b      	movs	r3, r7
 8004566:	2260      	movs	r2, #96	; 0x60
 8004568:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800456a:	003b      	movs	r3, r7
 800456c:	2200      	movs	r2, #0
 800456e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004570:	003b      	movs	r3, r7
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004576:	003b      	movs	r3, r7
 8004578:	2200      	movs	r2, #0
 800457a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800457c:	0039      	movs	r1, r7
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004580:	2200      	movs	r2, #0
 8004582:	0018      	movs	r0, r3
 8004584:	f002 fffa 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800458c:	f7ff f90a 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <MX_TIM2_Init+0xf8>)
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f918 	bl	80047c8 <HAL_TIM_MspPostInit>

}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b00a      	add	sp, #40	; 0x28
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000798 	.word	0x20000798

080045a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045aa:	2318      	movs	r3, #24
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	0018      	movs	r0, r3
 80045b0:	2310      	movs	r3, #16
 80045b2:	001a      	movs	r2, r3
 80045b4:	2100      	movs	r1, #0
 80045b6:	f004 fffd 	bl	80095b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045ba:	2310      	movs	r3, #16
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	0018      	movs	r0, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	001a      	movs	r2, r3
 80045c4:	2100      	movs	r1, #0
 80045c6:	f004 fff5 	bl	80095b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ca:	003b      	movs	r3, r7
 80045cc:	0018      	movs	r0, r3
 80045ce:	2310      	movs	r3, #16
 80045d0:	001a      	movs	r2, r3
 80045d2:	2100      	movs	r1, #0
 80045d4:	f004 ffee 	bl	80095b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045d8:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <MX_TIM3_Init+0x130>)
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <MX_TIM3_Init+0x134>)
 80045dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <MX_TIM3_Init+0x130>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e4:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <MX_TIM3_Init+0x130>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <MX_TIM3_Init+0x130>)
 80045ec:	22fa      	movs	r2, #250	; 0xfa
 80045ee:	01d2      	lsls	r2, r2, #7
 80045f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f2:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <MX_TIM3_Init+0x130>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f8:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <MX_TIM3_Init+0x130>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045fe:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <MX_TIM3_Init+0x130>)
 8004600:	0018      	movs	r0, r3
 8004602:	f002 fd67 	bl	80070d4 <HAL_TIM_Base_Init>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d001      	beq.n	800460e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800460a:	f7ff f8cb 	bl	80037a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800460e:	2118      	movs	r1, #24
 8004610:	187b      	adds	r3, r7, r1
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	0152      	lsls	r2, r2, #5
 8004616:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004618:	187a      	adds	r2, r7, r1
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <MX_TIM3_Init+0x130>)
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f003 f872 	bl	8007708 <HAL_TIM_ConfigClockSource>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d001      	beq.n	800462c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8004628:	f7ff f8bc 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800462c:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <MX_TIM3_Init+0x130>)
 800462e:	0018      	movs	r0, r3
 8004630:	f002 fde2 	bl	80071f8 <HAL_TIM_PWM_Init>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004638:	f7ff f8b4 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800463c:	2110      	movs	r1, #16
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004644:	187b      	adds	r3, r7, r1
 8004646:	2200      	movs	r2, #0
 8004648:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800464a:	187a      	adds	r2, r7, r1
 800464c:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <MX_TIM3_Init+0x130>)
 800464e:	0011      	movs	r1, r2
 8004650:	0018      	movs	r0, r3
 8004652:	f003 fb6d 	bl	8007d30 <HAL_TIMEx_MasterConfigSynchronization>
 8004656:	1e03      	subs	r3, r0, #0
 8004658:	d001      	beq.n	800465e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800465a:	f7ff f8a3 	bl	80037a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800465e:	003b      	movs	r3, r7
 8004660:	2260      	movs	r2, #96	; 0x60
 8004662:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004664:	003b      	movs	r3, r7
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800466a:	003b      	movs	r3, r7
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004670:	003b      	movs	r3, r7
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004676:	0039      	movs	r1, r7
 8004678:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <MX_TIM3_Init+0x130>)
 800467a:	2200      	movs	r2, #0
 800467c:	0018      	movs	r0, r3
 800467e:	f002 ff7d 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d001      	beq.n	800468a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8004686:	f7ff f88d 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <MX_TIM3_Init+0x130>)
 800468c:	2104      	movs	r1, #4
 800468e:	0018      	movs	r0, r3
 8004690:	f003 fbac 	bl	8007dec <HAL_TIMEx_RemapConfig>
 8004694:	1e03      	subs	r3, r0, #0
 8004696:	d001      	beq.n	800469c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8004698:	f7ff f884 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800469c:	0039      	movs	r1, r7
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <MX_TIM3_Init+0x130>)
 80046a0:	2204      	movs	r2, #4
 80046a2:	0018      	movs	r0, r3
 80046a4:	f002 ff6a 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d001      	beq.n	80046b0 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80046ac:	f7ff f87a 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046b0:	0039      	movs	r1, r7
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <MX_TIM3_Init+0x130>)
 80046b4:	2208      	movs	r2, #8
 80046b6:	0018      	movs	r0, r3
 80046b8:	f002 ff60 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d001      	beq.n	80046c4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80046c0:	f7ff f870 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <MX_TIM3_Init+0x130>)
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 f87e 	bl	80047c8 <HAL_TIM_MspPostInit>

}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b00a      	add	sp, #40	; 0x28
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000758 	.word	0x20000758
 80046d8:	40000400 	.word	0x40000400

080046dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e2:	003b      	movs	r3, r7
 80046e4:	0018      	movs	r0, r3
 80046e6:	2308      	movs	r3, #8
 80046e8:	001a      	movs	r2, r3
 80046ea:	2100      	movs	r1, #0
 80046ec:	f004 ff62 	bl	80095b4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80046f0:	4b15      	ldr	r3, [pc, #84]	; (8004748 <MX_TIM7_Init+0x6c>)
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <MX_TIM7_Init+0x70>)
 80046f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31;
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <MX_TIM7_Init+0x6c>)
 80046f8:	221f      	movs	r2, #31
 80046fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <MX_TIM7_Init+0x6c>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <MX_TIM7_Init+0x6c>)
 8004704:	4a12      	ldr	r2, [pc, #72]	; (8004750 <MX_TIM7_Init+0x74>)
 8004706:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <MX_TIM7_Init+0x6c>)
 800470a:	2200      	movs	r2, #0
 800470c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <MX_TIM7_Init+0x6c>)
 8004710:	0018      	movs	r0, r3
 8004712:	f002 fcdf 	bl	80070d4 <HAL_TIM_Base_Init>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d001      	beq.n	800471e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800471a:	f7ff f843 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800471e:	003b      	movs	r3, r7
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004724:	003b      	movs	r3, r7
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800472a:	003a      	movs	r2, r7
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <MX_TIM7_Init+0x6c>)
 800472e:	0011      	movs	r1, r2
 8004730:	0018      	movs	r0, r3
 8004732:	f003 fafd 	bl	8007d30 <HAL_TIMEx_MasterConfigSynchronization>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d001      	beq.n	800473e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800473a:	f7ff f833 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	200007d8 	.word	0x200007d8
 800474c:	40001400 	.word	0x40001400
 8004750:	00002710 	.word	0x00002710

08004754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	05db      	lsls	r3, r3, #23
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <HAL_TIM_Base_MspInit+0x68>)
 800476a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <HAL_TIM_Base_MspInit+0x68>)
 800476e:	2101      	movs	r1, #1
 8004770:	430a      	orrs	r2, r1
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004774:	e01e      	b.n	80047b4 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM3)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <HAL_TIM_Base_MspInit+0x6c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d106      	bne.n	800478e <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <HAL_TIM_Base_MspInit+0x68>)
 8004782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_TIM_Base_MspInit+0x68>)
 8004786:	2102      	movs	r1, #2
 8004788:	430a      	orrs	r2, r1
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800478c:	e012      	b.n	80047b4 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM7)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <HAL_TIM_Base_MspInit+0x70>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10d      	bne.n	80047b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_TIM_Base_MspInit+0x68>)
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <HAL_TIM_Base_MspInit+0x68>)
 800479e:	2120      	movs	r1, #32
 80047a0:	430a      	orrs	r2, r1
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	2012      	movs	r0, #18
 80047aa:	f000 fd03 	bl	80051b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047ae:	2012      	movs	r0, #18
 80047b0:	f000 fd15 	bl	80051de <HAL_NVIC_EnableIRQ>
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b002      	add	sp, #8
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40001400 	.word	0x40001400

080047c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b08b      	sub	sp, #44	; 0x2c
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	2414      	movs	r4, #20
 80047d2:	193b      	adds	r3, r7, r4
 80047d4:	0018      	movs	r0, r3
 80047d6:	2314      	movs	r3, #20
 80047d8:	001a      	movs	r2, r3
 80047da:	2100      	movs	r1, #0
 80047dc:	f004 feea 	bl	80095b4 <memset>
  if(timHandle->Instance==TIM2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	05db      	lsls	r3, r3, #23
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d123      	bne.n	8004834 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ec:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 80047f2:	2101      	movs	r1, #1
 80047f4:	430a      	orrs	r2, r1
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	2201      	movs	r2, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM_LUM_Pin;
 8004804:	0021      	movs	r1, r4
 8004806:	187b      	adds	r3, r7, r1
 8004808:	2220      	movs	r2, #32
 800480a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800480c:	187b      	adds	r3, r7, r1
 800480e:	2212      	movs	r2, #18
 8004810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	187b      	adds	r3, r7, r1
 8004814:	2200      	movs	r2, #0
 8004816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004818:	187b      	adds	r3, r7, r1
 800481a:	2200      	movs	r2, #0
 800481c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800481e:	187b      	adds	r3, r7, r1
 8004820:	2205      	movs	r2, #5
 8004822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_LUM_GPIO_Port, &GPIO_InitStruct);
 8004824:	187a      	adds	r2, r7, r1
 8004826:	23a0      	movs	r3, #160	; 0xa0
 8004828:	05db      	lsls	r3, r3, #23
 800482a:	0011      	movs	r1, r2
 800482c:	0018      	movs	r0, r3
 800482e:	f000 fd7b 	bl	8005328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004832:	e049      	b.n	80048c8 <HAL_TIM_MspPostInit+0x100>
  else if(timHandle->Instance==TIM3)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <HAL_TIM_MspPostInit+0x10c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d144      	bne.n	80048c8 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 8004844:	2101      	movs	r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	62da      	str	r2, [r3, #44]	; 0x2c
 800484a:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	2201      	movs	r2, #1
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004856:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 800485c:	2102      	movs	r1, #2
 800485e:	430a      	orrs	r2, r1
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c
 8004862:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_TIM_MspPostInit+0x108>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	2202      	movs	r2, #2
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_RED_Pin|TIM_GREEN_Pin;
 800486e:	2414      	movs	r4, #20
 8004870:	193b      	adds	r3, r7, r4
 8004872:	22c0      	movs	r2, #192	; 0xc0
 8004874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004876:	193b      	adds	r3, r7, r4
 8004878:	2202      	movs	r2, #2
 800487a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487c:	193b      	adds	r3, r7, r4
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004882:	193b      	adds	r3, r7, r4
 8004884:	2200      	movs	r2, #0
 8004886:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004888:	193b      	adds	r3, r7, r4
 800488a:	2202      	movs	r2, #2
 800488c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488e:	193a      	adds	r2, r7, r4
 8004890:	23a0      	movs	r3, #160	; 0xa0
 8004892:	05db      	lsls	r3, r3, #23
 8004894:	0011      	movs	r1, r2
 8004896:	0018      	movs	r0, r3
 8004898:	f000 fd46 	bl	8005328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_BLUE_Pin;
 800489c:	0021      	movs	r1, r4
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a4:	187b      	adds	r3, r7, r1
 80048a6:	2202      	movs	r2, #2
 80048a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b0:	187b      	adds	r3, r7, r1
 80048b2:	2200      	movs	r2, #0
 80048b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	2202      	movs	r2, #2
 80048ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_BLUE_GPIO_Port, &GPIO_InitStruct);
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	4a06      	ldr	r2, [pc, #24]	; (80048d8 <HAL_TIM_MspPostInit+0x110>)
 80048c0:	0019      	movs	r1, r3
 80048c2:	0010      	movs	r0, r2
 80048c4:	f000 fd30 	bl	8005328 <HAL_GPIO_Init>
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b00b      	add	sp, #44	; 0x2c
 80048ce:	bd90      	pop	{r4, r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40000400 	.word	0x40000400
 80048d8:	50000400 	.word	0x50000400

080048dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart5;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <MX_USART1_UART_Init+0x58>)
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <MX_USART1_UART_Init+0x5c>)
 80048e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048e6:	4b13      	ldr	r3, [pc, #76]	; (8004934 <MX_USART1_UART_Init+0x58>)
 80048e8:	22e1      	movs	r2, #225	; 0xe1
 80048ea:	0252      	lsls	r2, r2, #9
 80048ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <MX_USART1_UART_Init+0x58>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <MX_USART1_UART_Init+0x58>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <MX_USART1_UART_Init+0x58>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <MX_USART1_UART_Init+0x58>)
 8004902:	220c      	movs	r2, #12
 8004904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <MX_USART1_UART_Init+0x58>)
 8004908:	2200      	movs	r2, #0
 800490a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <MX_USART1_UART_Init+0x58>)
 800490e:	2200      	movs	r2, #0
 8004910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <MX_USART1_UART_Init+0x58>)
 8004914:	2200      	movs	r2, #0
 8004916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <MX_USART1_UART_Init+0x58>)
 800491a:	2200      	movs	r2, #0
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <MX_USART1_UART_Init+0x58>)
 8004920:	0018      	movs	r0, r3
 8004922:	f003 fa81 	bl	8007e28 <HAL_UART_Init>
 8004926:	1e03      	subs	r3, r0, #0
 8004928:	d001      	beq.n	800492e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800492a:	f7fe ff3b 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	2000089c 	.word	0x2000089c
 8004938:	40013800 	.word	0x40013800

0800493c <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004942:	4a15      	ldr	r2, [pc, #84]	; (8004998 <MX_USART5_UART_Init+0x5c>)
 8004944:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004948:	22e1      	movs	r2, #225	; 0xe1
 800494a:	0252      	lsls	r2, r2, #9
 800494c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800494e:	4b11      	ldr	r3, [pc, #68]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <MX_USART5_UART_Init+0x58>)
 800495c:	2200      	movs	r2, #0
 800495e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004962:	220c      	movs	r2, #12
 8004964:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800496c:	4b09      	ldr	r3, [pc, #36]	; (8004994 <MX_USART5_UART_Init+0x58>)
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004974:	2200      	movs	r2, #0
 8004976:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <MX_USART5_UART_Init+0x58>)
 800497a:	2200      	movs	r2, #0
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <MX_USART5_UART_Init+0x58>)
 8004980:	0018      	movs	r0, r3
 8004982:	f003 fa51 	bl	8007e28 <HAL_UART_Init>
 8004986:	1e03      	subs	r3, r0, #0
 8004988:	d001      	beq.n	800498e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800498a:	f7fe ff0b 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000818 	.word	0x20000818
 8004998:	40005000 	.word	0x40005000

0800499c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b08b      	sub	sp, #44	; 0x2c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a4:	2414      	movs	r4, #20
 80049a6:	193b      	adds	r3, r7, r4
 80049a8:	0018      	movs	r0, r3
 80049aa:	2314      	movs	r3, #20
 80049ac:	001a      	movs	r2, r3
 80049ae:	2100      	movs	r1, #0
 80049b0:	f004 fe00 	bl	80095b4 <memset>
  if(uartHandle->Instance==USART1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a38      	ldr	r2, [pc, #224]	; (8004a9c <HAL_UART_MspInit+0x100>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d133      	bne.n	8004a26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049be:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 80049c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	01c9      	lsls	r1, r1, #7
 80049c8:	430a      	orrs	r2, r1
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049cc:	4b34      	ldr	r3, [pc, #208]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 80049d2:	2101      	movs	r1, #1
 80049d4:	430a      	orrs	r2, r1
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049d8:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	2201      	movs	r2, #1
 80049de:	4013      	ands	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80049e4:	193b      	adds	r3, r7, r4
 80049e6:	22f0      	movs	r2, #240	; 0xf0
 80049e8:	0152      	lsls	r2, r2, #5
 80049ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ec:	0021      	movs	r1, r4
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	2202      	movs	r2, #2
 80049f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2203      	movs	r2, #3
 80049fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2204      	movs	r2, #4
 8004a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a06:	187a      	adds	r2, r7, r1
 8004a08:	23a0      	movs	r3, #160	; 0xa0
 8004a0a:	05db      	lsls	r3, r3, #23
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fc8a 	bl	8005328 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a14:	2200      	movs	r2, #0
 8004a16:	2100      	movs	r1, #0
 8004a18:	201b      	movs	r0, #27
 8004a1a:	f000 fbcb 	bl	80051b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a1e:	201b      	movs	r0, #27
 8004a20:	f000 fbdd 	bl	80051de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8004a24:	e035      	b.n	8004a92 <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART5)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_UART_MspInit+0x108>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d130      	bne.n	8004a92 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART5_CLK_ENABLE();
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 8004a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0349      	lsls	r1, r1, #13
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 8004a44:	2102      	movs	r1, #2
 8004a46:	430a      	orrs	r2, r1
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004a56:	2114      	movs	r1, #20
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	2218      	movs	r2, #24
 8004a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5e:	187b      	adds	r3, r7, r1
 8004a60:	2202      	movs	r2, #2
 8004a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a6a:	187b      	adds	r3, r7, r1
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	2206      	movs	r2, #6
 8004a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	4a0b      	ldr	r2, [pc, #44]	; (8004aa8 <HAL_UART_MspInit+0x10c>)
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	0010      	movs	r0, r2
 8004a7e:	f000 fc53 	bl	8005328 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8004a82:	2200      	movs	r2, #0
 8004a84:	2100      	movs	r1, #0
 8004a86:	200e      	movs	r0, #14
 8004a88:	f000 fb94 	bl	80051b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8004a8c:	200e      	movs	r0, #14
 8004a8e:	f000 fba6 	bl	80051de <HAL_NVIC_EnableIRQ>
}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b00b      	add	sp, #44	; 0x2c
 8004a98:	bd90      	pop	{r4, r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	40013800 	.word	0x40013800
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40005000 	.word	0x40005000
 8004aa8:	50000400 	.word	0x50000400

08004aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8004aac:	480d      	ldr	r0, [pc, #52]	; (8004ae4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004aae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ab0:	480d      	ldr	r0, [pc, #52]	; (8004ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ab2:	490e      	ldr	r1, [pc, #56]	; (8004aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ab4:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <LoopForever+0xe>)
  movs r3, #0
 8004ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ab8:	e002      	b.n	8004ac0 <LoopCopyDataInit>

08004aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004abe:	3304      	adds	r3, #4

08004ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ac4:	d3f9      	bcc.n	8004aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ac8:	4c0b      	ldr	r4, [pc, #44]	; (8004af8 <LoopForever+0x16>)
  movs r3, #0
 8004aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004acc:	e001      	b.n	8004ad2 <LoopFillZerobss>

08004ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ad0:	3204      	adds	r2, #4

08004ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ad4:	d3fb      	bcc.n	8004ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004ad6:	f7ff fb55 	bl	8004184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ada:	f004 fd47 	bl	800956c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ade:	f7fe fd5f 	bl	80035a0 <main>

08004ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ae2:	e7fe      	b.n	8004ae2 <LoopForever>
   ldr   r0, =_estack
 8004ae4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004af0:	0800b070 	.word	0x0800b070
  ldr r2, =_sbss
 8004af4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004af8:	20000934 	.word	0x20000934

08004afc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004afc:	e7fe      	b.n	8004afc <ADC1_COMP_IRQHandler>
	...

08004b00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b06:	1dfb      	adds	r3, r7, #7
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_Init+0x3c>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_Init+0x3c>)
 8004b12:	2140      	movs	r1, #64	; 0x40
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f000 f811 	bl	8004b40 <HAL_InitTick>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004b22:	1dfb      	adds	r3, r7, #7
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e001      	b.n	8004b2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b2a:	f7ff faa5 	bl	8004078 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781b      	ldrb	r3, [r3, #0]
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b002      	add	sp, #8
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	40022000 	.word	0x40022000

08004b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <HAL_InitTick+0x5c>)
 8004b4a:	681c      	ldr	r4, [r3, #0]
 8004b4c:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <HAL_InitTick+0x60>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	0019      	movs	r1, r3
 8004b52:	23fa      	movs	r3, #250	; 0xfa
 8004b54:	0098      	lsls	r0, r3, #2
 8004b56:	f7fb fae1 	bl	800011c <__udivsi3>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	0020      	movs	r0, r4
 8004b60:	f7fb fadc 	bl	800011c <__udivsi3>
 8004b64:	0003      	movs	r3, r0
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fb49 	bl	80051fe <HAL_SYSTICK_Config>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e00f      	b.n	8004b94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d80b      	bhi.n	8004b92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	425b      	negs	r3, r3
 8004b80:	2200      	movs	r2, #0
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 fb16 	bl	80051b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_InitTick+0x64>)
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b003      	add	sp, #12
 8004b9a:	bd90      	pop	{r4, r7, pc}
 8004b9c:	20000004 	.word	0x20000004
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	20000008 	.word	0x20000008

08004ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_IncTick+0x1c>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_IncTick+0x20>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	18d2      	adds	r2, r2, r3
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_IncTick+0x20>)
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	20000920 	.word	0x20000920

08004bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  return uwTick;
 8004bd0:	4b02      	ldr	r3, [pc, #8]	; (8004bdc <HAL_GetTick+0x10>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	20000920 	.word	0x20000920

08004be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004be8:	f7ff fff0 	bl	8004bcc <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d005      	beq.n	8004c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_Delay+0x44>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	001a      	movs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	f7ff ffe0 	bl	8004bcc <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d8f7      	bhi.n	8004c08 <HAL_Delay+0x28>
  {
  }
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	2000000c 	.word	0x2000000c

08004c28 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e159      	b.n	8004eee <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2250      	movs	r2, #80	; 0x50
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fe fb8c 	bl	8003370 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d005      	beq.n	8004c70 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004c6e:	d00b      	beq.n	8004c88 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	2210      	movs	r2, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2250      	movs	r2, #80	; 0x50
 8004c80:	2100      	movs	r1, #0
 8004c82:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e132      	b.n	8004eee <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	4a9a      	ldr	r2, [pc, #616]	; (8004ef8 <HAL_ADC_Init+0x2d0>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2202      	movs	r2, #2
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <HAL_ADC_Init+0x90>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_ADC_Init+0x90>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_ADC_Init+0x92>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d149      	bne.n	8004d52 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	23c0      	movs	r3, #192	; 0xc0
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_ADC_Init+0xba>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	05db      	lsls	r3, r3, #23
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d005      	beq.n	8004ce2 <HAL_ADC_Init+0xba>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d111      	bne.n	8004d06 <HAL_ADC_Init+0xde>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0092      	lsls	r2, r2, #2
 8004cee:	0892      	lsrs	r2, r2, #2
 8004cf0:	611a      	str	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6919      	ldr	r1, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	611a      	str	r2, [r3, #16]
 8004d04:	e014      	b.n	8004d30 <HAL_ADC_Init+0x108>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0092      	lsls	r2, r2, #2
 8004d12:	0892      	lsrs	r2, r2, #2
 8004d14:	611a      	str	r2, [r3, #16]
 8004d16:	4b79      	ldr	r3, [pc, #484]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b78      	ldr	r3, [pc, #480]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d1c:	4978      	ldr	r1, [pc, #480]	; (8004f00 <HAL_ADC_Init+0x2d8>)
 8004d1e:	400a      	ands	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	4b76      	ldr	r3, [pc, #472]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	4b74      	ldr	r3, [pc, #464]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2118      	movs	r1, #24
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004d52:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b69      	ldr	r3, [pc, #420]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d58:	496a      	ldr	r1, [pc, #424]	; (8004f04 <HAL_ADC_Init+0x2dc>)
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004d5e:	4b67      	ldr	r3, [pc, #412]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	065a      	lsls	r2, r3, #25
 8004d68:	4b64      	ldr	r3, [pc, #400]	; (8004efc <HAL_ADC_Init+0x2d4>)
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	055b      	lsls	r3, r3, #21
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	0549      	lsls	r1, r1, #21
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	495b      	ldr	r1, [pc, #364]	; (8004f08 <HAL_ADC_Init+0x2e0>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68d9      	ldr	r1, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_Init+0x18c>
 8004db0:	2304      	movs	r3, #4
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_Init+0x18e>
 8004db4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004db6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2020      	movs	r0, #32
 8004dbc:	5c1b      	ldrb	r3, [r3, r0]
 8004dbe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004dc0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	202c      	movs	r0, #44	; 0x2c
 8004dc6:	5c1b      	ldrb	r3, [r3, r0]
 8004dc8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004dca:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004dd0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004dd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004de0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dee:	23c2      	movs	r3, #194	; 0xc2
 8004df0:	33ff      	adds	r3, #255	; 0xff
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d00b      	beq.n	8004e0e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68d9      	ldr	r1, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2221      	movs	r2, #33	; 0x21
 8004e12:	5c9b      	ldrb	r3, [r3, r2]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d11a      	bne.n	8004e4e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	0249      	lsls	r1, r1, #9
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e00b      	b.n	8004e4e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	2201      	movs	r2, #1
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d11f      	bne.n	8004e96 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	492a      	ldr	r1, [pc, #168]	; (8004f0c <HAL_ADC_Init+0x2e4>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6919      	ldr	r1, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004e74:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004e7a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2101      	movs	r1, #1
 8004e90:	430a      	orrs	r2, r1
 8004e92:	611a      	str	r2, [r3, #16]
 8004e94:	e00e      	b.n	8004eb4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d107      	bne.n	8004eb4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2101      	movs	r1, #1
 8004eb0:	438a      	bics	r2, r1
 8004eb2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2107      	movs	r1, #7
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6959      	ldr	r1, [r3, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b002      	add	sp, #8
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	fffffefd 	.word	0xfffffefd
 8004efc:	40012708 	.word	0x40012708
 8004f00:	ffc3ffff 	.word	0xffc3ffff
 8004f04:	fdffffff 	.word	0xfdffffff
 8004f08:	fffe0219 	.word	0xfffe0219
 8004f0c:	fffffc03 	.word	0xfffffc03

08004f10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2250      	movs	r2, #80	; 0x50
 8004f1e:	5c9b      	ldrb	r3, [r3, r2]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e06c      	b.n	8005002 <HAL_ADC_ConfigChannel+0xf2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2250      	movs	r2, #80	; 0x50
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2204      	movs	r2, #4
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	2220      	movs	r2, #32
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2250      	movs	r2, #80	; 0x50
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e056      	b.n	8005002 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a2c      	ldr	r2, [pc, #176]	; (800500c <HAL_ADC_ConfigChannel+0xfc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d028      	beq.n	8004fb0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	035b      	lsls	r3, r3, #13
 8004f6a:	0b5a      	lsrs	r2, r3, #13
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	02db      	lsls	r3, r3, #11
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004f80:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	0409      	lsls	r1, r1, #16
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004f8e:	200a      	movs	r0, #10
 8004f90:	f000 f844 	bl	800501c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	029b      	lsls	r3, r3, #10
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d02b      	beq.n	8004ff8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004fa6:	2180      	movs	r1, #128	; 0x80
 8004fa8:	03c9      	lsls	r1, r1, #15
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e023      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	035b      	lsls	r3, r3, #13
 8004fbc:	0b5b      	lsrs	r3, r3, #13
 8004fbe:	43d9      	mvns	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	02db      	lsls	r3, r3, #11
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d005      	beq.n	8004fe0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004fda:	490e      	ldr	r1, [pc, #56]	; (8005014 <HAL_ADC_ConfigChannel+0x104>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d005      	beq.n	8004ff8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_ADC_ConfigChannel+0x100>)
 8004ff2:	4909      	ldr	r1, [pc, #36]	; (8005018 <HAL_ADC_ConfigChannel+0x108>)
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2250      	movs	r2, #80	; 0x50
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	00001001 	.word	0x00001001
 8005010:	40012708 	.word	0x40012708
 8005014:	ff7fffff 	.word	0xff7fffff
 8005018:	ffbfffff 	.word	0xffbfffff

0800501c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <ADC_DelayMicroSecond+0x38>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	490b      	ldr	r1, [pc, #44]	; (8005058 <ADC_DelayMicroSecond+0x3c>)
 800502a:	0018      	movs	r0, r3
 800502c:	f7fb f876 	bl	800011c <__udivsi3>
 8005030:	0003      	movs	r3, r0
 8005032:	001a      	movs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4353      	muls	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800503a:	e002      	b.n	8005042 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b01      	subs	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f9      	bne.n	800503c <ADC_DelayMicroSecond+0x20>
  } 
}
 8005048:	46c0      	nop			; (mov r8, r8)
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b004      	add	sp, #16
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	20000004 	.word	0x20000004
 8005058:	000f4240 	.word	0x000f4240

0800505c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	0002      	movs	r2, r0
 8005064:	1dfb      	adds	r3, r7, #7
 8005066:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005068:	1dfb      	adds	r3, r7, #7
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b7f      	cmp	r3, #127	; 0x7f
 800506e:	d809      	bhi.n	8005084 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005070:	1dfb      	adds	r3, r7, #7
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	001a      	movs	r2, r3
 8005076:	231f      	movs	r3, #31
 8005078:	401a      	ands	r2, r3
 800507a:	4b04      	ldr	r3, [pc, #16]	; (800508c <__NVIC_EnableIRQ+0x30>)
 800507c:	2101      	movs	r1, #1
 800507e:	4091      	lsls	r1, r2
 8005080:	000a      	movs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]
  }
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}
 800508c:	e000e100 	.word	0xe000e100

08005090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	0002      	movs	r2, r0
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	1dfb      	adds	r3, r7, #7
 800509c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800509e:	1dfb      	adds	r3, r7, #7
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b7f      	cmp	r3, #127	; 0x7f
 80050a4:	d828      	bhi.n	80050f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050a6:	4a2f      	ldr	r2, [pc, #188]	; (8005164 <__NVIC_SetPriority+0xd4>)
 80050a8:	1dfb      	adds	r3, r7, #7
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b25b      	sxtb	r3, r3
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	33c0      	adds	r3, #192	; 0xc0
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	589b      	ldr	r3, [r3, r2]
 80050b6:	1dfa      	adds	r2, r7, #7
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	0011      	movs	r1, r2
 80050bc:	2203      	movs	r2, #3
 80050be:	400a      	ands	r2, r1
 80050c0:	00d2      	lsls	r2, r2, #3
 80050c2:	21ff      	movs	r1, #255	; 0xff
 80050c4:	4091      	lsls	r1, r2
 80050c6:	000a      	movs	r2, r1
 80050c8:	43d2      	mvns	r2, r2
 80050ca:	401a      	ands	r2, r3
 80050cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	22ff      	movs	r2, #255	; 0xff
 80050d4:	401a      	ands	r2, r3
 80050d6:	1dfb      	adds	r3, r7, #7
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	0018      	movs	r0, r3
 80050dc:	2303      	movs	r3, #3
 80050de:	4003      	ands	r3, r0
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050e4:	481f      	ldr	r0, [pc, #124]	; (8005164 <__NVIC_SetPriority+0xd4>)
 80050e6:	1dfb      	adds	r3, r7, #7
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	430a      	orrs	r2, r1
 80050f0:	33c0      	adds	r3, #192	; 0xc0
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80050f6:	e031      	b.n	800515c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <__NVIC_SetPriority+0xd8>)
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	0019      	movs	r1, r3
 8005100:	230f      	movs	r3, #15
 8005102:	400b      	ands	r3, r1
 8005104:	3b08      	subs	r3, #8
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	3306      	adds	r3, #6
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	3304      	adds	r3, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1dfa      	adds	r2, r7, #7
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	0011      	movs	r1, r2
 8005118:	2203      	movs	r2, #3
 800511a:	400a      	ands	r2, r1
 800511c:	00d2      	lsls	r2, r2, #3
 800511e:	21ff      	movs	r1, #255	; 0xff
 8005120:	4091      	lsls	r1, r2
 8005122:	000a      	movs	r2, r1
 8005124:	43d2      	mvns	r2, r2
 8005126:	401a      	ands	r2, r3
 8005128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	22ff      	movs	r2, #255	; 0xff
 8005130:	401a      	ands	r2, r3
 8005132:	1dfb      	adds	r3, r7, #7
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	0018      	movs	r0, r3
 8005138:	2303      	movs	r3, #3
 800513a:	4003      	ands	r3, r0
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005140:	4809      	ldr	r0, [pc, #36]	; (8005168 <__NVIC_SetPriority+0xd8>)
 8005142:	1dfb      	adds	r3, r7, #7
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	001c      	movs	r4, r3
 8005148:	230f      	movs	r3, #15
 800514a:	4023      	ands	r3, r4
 800514c:	3b08      	subs	r3, #8
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	430a      	orrs	r2, r1
 8005152:	3306      	adds	r3, #6
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	18c3      	adds	r3, r0, r3
 8005158:	3304      	adds	r3, #4
 800515a:	601a      	str	r2, [r3, #0]
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b003      	add	sp, #12
 8005162:	bd90      	pop	{r4, r7, pc}
 8005164:	e000e100 	.word	0xe000e100
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	045b      	lsls	r3, r3, #17
 800517c:	429a      	cmp	r2, r3
 800517e:	d301      	bcc.n	8005184 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005180:	2301      	movs	r3, #1
 8005182:	e010      	b.n	80051a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <SysTick_Config+0x44>)
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	3a01      	subs	r2, #1
 800518a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800518c:	2301      	movs	r3, #1
 800518e:	425b      	negs	r3, r3
 8005190:	2103      	movs	r1, #3
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff ff7c 	bl	8005090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <SysTick_Config+0x44>)
 800519a:	2200      	movs	r2, #0
 800519c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <SysTick_Config+0x44>)
 80051a0:	2207      	movs	r2, #7
 80051a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b002      	add	sp, #8
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	e000e010 	.word	0xe000e010

080051b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	210f      	movs	r1, #15
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	1c02      	adds	r2, r0, #0
 80051c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b25b      	sxtb	r3, r3
 80051ce:	0011      	movs	r1, r2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff ff5d 	bl	8005090 <__NVIC_SetPriority>
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b004      	add	sp, #16
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	0002      	movs	r2, r0
 80051e6:	1dfb      	adds	r3, r7, #7
 80051e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b25b      	sxtb	r3, r3
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7ff ff33 	bl	800505c <__NVIC_EnableIRQ>
}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b002      	add	sp, #8
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0018      	movs	r0, r3
 800520a:	f7ff ffaf 	bl	800516c <SysTick_Config>
 800520e:	0003      	movs	r3, r0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b002      	add	sp, #8
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	230f      	movs	r3, #15
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2225      	movs	r2, #37	; 0x25
 800522c:	5c9b      	ldrb	r3, [r3, r2]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d008      	beq.n	8005246 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2204      	movs	r2, #4
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2224      	movs	r2, #36	; 0x24
 800523e:	2100      	movs	r1, #0
 8005240:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e024      	b.n	8005290 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	210e      	movs	r1, #14
 8005252:	438a      	bics	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2101      	movs	r1, #1
 8005262:	438a      	bics	r2, r1
 8005264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	221c      	movs	r2, #28
 800526c:	401a      	ands	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2101      	movs	r1, #1
 8005274:	4091      	lsls	r1, r2
 8005276:	000a      	movs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2225      	movs	r2, #37	; 0x25
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2224      	movs	r2, #36	; 0x24
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

    return status;
 800528a:	230f      	movs	r3, #15
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b004      	add	sp, #16
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	210f      	movs	r1, #15
 80052a2:	187b      	adds	r3, r7, r1
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2225      	movs	r2, #37	; 0x25
 80052ac:	5c9b      	ldrb	r3, [r3, r2]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d006      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e02a      	b.n	8005318 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	210e      	movs	r1, #14
 80052ce:	438a      	bics	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	438a      	bics	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	221c      	movs	r2, #28
 80052e8:	401a      	ands	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2101      	movs	r1, #1
 80052f0:	4091      	lsls	r1, r2
 80052f2:	000a      	movs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2225      	movs	r2, #37	; 0x25
 80052fa:	2101      	movs	r1, #1
 80052fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2224      	movs	r2, #36	; 0x24
 8005302:	2100      	movs	r1, #0
 8005304:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	0010      	movs	r0, r2
 8005316:	4798      	blx	r3
    }
  }
  return status;
 8005318:	230f      	movs	r3, #15
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	781b      	ldrb	r3, [r3, #0]
}
 800531e:	0018      	movs	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	b004      	add	sp, #16
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800533e:	e155      	b.n	80055ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2101      	movs	r1, #1
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4091      	lsls	r1, r2
 800534a:	000a      	movs	r2, r1
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d100      	bne.n	8005358 <HAL_GPIO_Init+0x30>
 8005356:	e146      	b.n	80055e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2203      	movs	r2, #3
 800535e:	4013      	ands	r3, r2
 8005360:	2b01      	cmp	r3, #1
 8005362:	d005      	beq.n	8005370 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2203      	movs	r2, #3
 800536a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800536c:	2b02      	cmp	r3, #2
 800536e:	d130      	bne.n	80053d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	2203      	movs	r2, #3
 800537c:	409a      	lsls	r2, r3
 800537e:	0013      	movs	r3, r2
 8005380:	43da      	mvns	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	409a      	lsls	r2, r3
 8005392:	0013      	movs	r3, r2
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053a6:	2201      	movs	r2, #1
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	409a      	lsls	r2, r3
 80053ac:	0013      	movs	r3, r2
 80053ae:	43da      	mvns	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4013      	ands	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	2201      	movs	r2, #1
 80053be:	401a      	ands	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	409a      	lsls	r2, r3
 80053c4:	0013      	movs	r3, r2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2203      	movs	r2, #3
 80053d8:	4013      	ands	r3, r2
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d017      	beq.n	800540e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	2203      	movs	r2, #3
 80053ea:	409a      	lsls	r2, r3
 80053ec:	0013      	movs	r3, r2
 80053ee:	43da      	mvns	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4013      	ands	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	409a      	lsls	r2, r3
 8005400:	0013      	movs	r3, r2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	4013      	ands	r3, r2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d123      	bne.n	8005462 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	08da      	lsrs	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3208      	adds	r2, #8
 8005422:	0092      	lsls	r2, r2, #2
 8005424:	58d3      	ldr	r3, [r2, r3]
 8005426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2207      	movs	r2, #7
 800542c:	4013      	ands	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	220f      	movs	r2, #15
 8005432:	409a      	lsls	r2, r3
 8005434:	0013      	movs	r3, r2
 8005436:	43da      	mvns	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4013      	ands	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2107      	movs	r1, #7
 8005446:	400b      	ands	r3, r1
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	409a      	lsls	r2, r3
 800544c:	0013      	movs	r3, r2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	08da      	lsrs	r2, r3, #3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3208      	adds	r2, #8
 800545c:	0092      	lsls	r2, r2, #2
 800545e:	6939      	ldr	r1, [r7, #16]
 8005460:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	2203      	movs	r2, #3
 800546e:	409a      	lsls	r2, r3
 8005470:	0013      	movs	r3, r2
 8005472:	43da      	mvns	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4013      	ands	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	401a      	ands	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	409a      	lsls	r2, r3
 8005488:	0013      	movs	r3, r2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	23c0      	movs	r3, #192	; 0xc0
 800549c:	029b      	lsls	r3, r3, #10
 800549e:	4013      	ands	r3, r2
 80054a0:	d100      	bne.n	80054a4 <HAL_GPIO_Init+0x17c>
 80054a2:	e0a0      	b.n	80055e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a4:	4b57      	ldr	r3, [pc, #348]	; (8005604 <HAL_GPIO_Init+0x2dc>)
 80054a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a8:	4b56      	ldr	r3, [pc, #344]	; (8005604 <HAL_GPIO_Init+0x2dc>)
 80054aa:	2101      	movs	r1, #1
 80054ac:	430a      	orrs	r2, r1
 80054ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80054b0:	4a55      	ldr	r2, [pc, #340]	; (8005608 <HAL_GPIO_Init+0x2e0>)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	089b      	lsrs	r3, r3, #2
 80054b6:	3302      	adds	r3, #2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	589b      	ldr	r3, [r3, r2]
 80054bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2203      	movs	r2, #3
 80054c2:	4013      	ands	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	220f      	movs	r2, #15
 80054c8:	409a      	lsls	r2, r3
 80054ca:	0013      	movs	r3, r2
 80054cc:	43da      	mvns	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4013      	ands	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	23a0      	movs	r3, #160	; 0xa0
 80054d8:	05db      	lsls	r3, r3, #23
 80054da:	429a      	cmp	r2, r3
 80054dc:	d01f      	beq.n	800551e <HAL_GPIO_Init+0x1f6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a4a      	ldr	r2, [pc, #296]	; (800560c <HAL_GPIO_Init+0x2e4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d019      	beq.n	800551a <HAL_GPIO_Init+0x1f2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a49      	ldr	r2, [pc, #292]	; (8005610 <HAL_GPIO_Init+0x2e8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_GPIO_Init+0x1ee>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a48      	ldr	r2, [pc, #288]	; (8005614 <HAL_GPIO_Init+0x2ec>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00d      	beq.n	8005512 <HAL_GPIO_Init+0x1ea>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a47      	ldr	r2, [pc, #284]	; (8005618 <HAL_GPIO_Init+0x2f0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <HAL_GPIO_Init+0x1e6>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a46      	ldr	r2, [pc, #280]	; (800561c <HAL_GPIO_Init+0x2f4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_GPIO_Init+0x1e2>
 8005506:	2305      	movs	r3, #5
 8005508:	e00a      	b.n	8005520 <HAL_GPIO_Init+0x1f8>
 800550a:	2306      	movs	r3, #6
 800550c:	e008      	b.n	8005520 <HAL_GPIO_Init+0x1f8>
 800550e:	2304      	movs	r3, #4
 8005510:	e006      	b.n	8005520 <HAL_GPIO_Init+0x1f8>
 8005512:	2303      	movs	r3, #3
 8005514:	e004      	b.n	8005520 <HAL_GPIO_Init+0x1f8>
 8005516:	2302      	movs	r3, #2
 8005518:	e002      	b.n	8005520 <HAL_GPIO_Init+0x1f8>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_GPIO_Init+0x1f8>
 800551e:	2300      	movs	r3, #0
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	2103      	movs	r1, #3
 8005524:	400a      	ands	r2, r1
 8005526:	0092      	lsls	r2, r2, #2
 8005528:	4093      	lsls	r3, r2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005530:	4935      	ldr	r1, [pc, #212]	; (8005608 <HAL_GPIO_Init+0x2e0>)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	089b      	lsrs	r3, r3, #2
 8005536:	3302      	adds	r3, #2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800553e:	4b38      	ldr	r3, [pc, #224]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	43da      	mvns	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4013      	ands	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	025b      	lsls	r3, r3, #9
 8005556:	4013      	ands	r3, r2
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005562:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005568:	4b2d      	ldr	r3, [pc, #180]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	43da      	mvns	r2, r3
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	4013      	ands	r3, r2
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005592:	4b23      	ldr	r3, [pc, #140]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	43da      	mvns	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4013      	ands	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	035b      	lsls	r3, r3, #13
 80055aa:	4013      	ands	r3, r2
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80055bc:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	039b      	lsls	r3, r3, #14
 80055d4:	4013      	ands	r3, r2
 80055d6:	d003      	beq.n	80055e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <HAL_GPIO_Init+0x2f8>)
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	3301      	adds	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	40da      	lsrs	r2, r3
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	d000      	beq.n	80055fa <HAL_GPIO_Init+0x2d2>
 80055f8:	e6a2      	b.n	8005340 <HAL_GPIO_Init+0x18>
  }
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	46bd      	mov	sp, r7
 8005600:	b006      	add	sp, #24
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40021000 	.word	0x40021000
 8005608:	40010000 	.word	0x40010000
 800560c:	50000400 	.word	0x50000400
 8005610:	50000800 	.word	0x50000800
 8005614:	50000c00 	.word	0x50000c00
 8005618:	50001000 	.word	0x50001000
 800561c:	50001c00 	.word	0x50001c00
 8005620:	40010400 	.word	0x40010400

08005624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e082      	b.n	800573c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2241      	movs	r2, #65	; 0x41
 800563a:	5c9b      	ldrb	r3, [r3, r2]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0018      	movs	r0, r3
 800564e:	f7fd ff63 	bl	8003518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2241      	movs	r2, #65	; 0x41
 8005656:	2124      	movs	r1, #36	; 0x24
 8005658:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	438a      	bics	r2, r1
 8005668:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4934      	ldr	r1, [pc, #208]	; (8005744 <HAL_I2C_Init+0x120>)
 8005674:	400a      	ands	r2, r1
 8005676:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4931      	ldr	r1, [pc, #196]	; (8005748 <HAL_I2C_Init+0x124>)
 8005684:	400a      	ands	r2, r1
 8005686:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d108      	bne.n	80056a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	0209      	lsls	r1, r1, #8
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	e007      	b.n	80056b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2184      	movs	r1, #132	; 0x84
 80056ac:	0209      	lsls	r1, r1, #8
 80056ae:	430a      	orrs	r2, r1
 80056b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d104      	bne.n	80056c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	0112      	lsls	r2, r2, #4
 80056c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	491f      	ldr	r1, [pc, #124]	; (800574c <HAL_I2C_Init+0x128>)
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	491a      	ldr	r1, [pc, #104]	; (8005748 <HAL_I2C_Init+0x124>)
 80056e0:	400a      	ands	r2, r1
 80056e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69d9      	ldr	r1, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2241      	movs	r2, #65	; 0x41
 8005728:	2120      	movs	r1, #32
 800572a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2242      	movs	r2, #66	; 0x42
 8005736:	2100      	movs	r1, #0
 8005738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}
 8005744:	f0ffffff 	.word	0xf0ffffff
 8005748:	ffff7fff 	.word	0xffff7fff
 800574c:	02008000 	.word	0x02008000

08005750 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	0008      	movs	r0, r1
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	0019      	movs	r1, r3
 800575e:	230a      	movs	r3, #10
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	1c02      	adds	r2, r0, #0
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	2308      	movs	r3, #8
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	1c0a      	adds	r2, r1, #0
 800576c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2241      	movs	r2, #65	; 0x41
 8005772:	5c9b      	ldrb	r3, [r3, r2]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b20      	cmp	r3, #32
 8005778:	d000      	beq.n	800577c <HAL_I2C_Master_Transmit+0x2c>
 800577a:	e0e7      	b.n	800594c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	5c9b      	ldrb	r3, [r3, r2]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_I2C_Master_Transmit+0x3a>
 8005786:	2302      	movs	r3, #2
 8005788:	e0e1      	b.n	800594e <HAL_I2C_Master_Transmit+0x1fe>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2240      	movs	r2, #64	; 0x40
 800578e:	2101      	movs	r1, #1
 8005790:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005792:	f7ff fa1b 	bl	8004bcc <HAL_GetTick>
 8005796:	0003      	movs	r3, r0
 8005798:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	0219      	lsls	r1, r3, #8
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2319      	movs	r3, #25
 80057a6:	2201      	movs	r2, #1
 80057a8:	f000 fbac 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0cc      	b.n	800594e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2241      	movs	r2, #65	; 0x41
 80057b8:	2121      	movs	r1, #33	; 0x21
 80057ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2242      	movs	r2, #66	; 0x42
 80057c0:	2110      	movs	r1, #16
 80057c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2208      	movs	r2, #8
 80057d4:	18ba      	adds	r2, r7, r2
 80057d6:	8812      	ldrh	r2, [r2, #0]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2bff      	cmp	r3, #255	; 0xff
 80057e8:	d911      	bls.n	800580e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	045c      	lsls	r4, r3, #17
 80057fa:	230a      	movs	r3, #10
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	8819      	ldrh	r1, [r3, #0]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	4b55      	ldr	r3, [pc, #340]	; (8005958 <HAL_I2C_Master_Transmit+0x208>)
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	0023      	movs	r3, r4
 8005808:	f000 fcb0 	bl	800616c <I2C_TransferConfig>
 800580c:	e075      	b.n	80058fa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	b2da      	uxtb	r2, r3
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	049c      	lsls	r4, r3, #18
 8005822:	230a      	movs	r3, #10
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	8819      	ldrh	r1, [r3, #0]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	4b4b      	ldr	r3, [pc, #300]	; (8005958 <HAL_I2C_Master_Transmit+0x208>)
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	0023      	movs	r3, r4
 8005830:	f000 fc9c 	bl	800616c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005834:	e061      	b.n	80058fa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	0018      	movs	r0, r3
 800583e:	f000 fba0 	bl	8005f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8005842:	1e03      	subs	r3, r0, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e081      	b.n	800594e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03a      	beq.n	80058fa <HAL_I2C_Master_Transmit+0x1aa>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d136      	bne.n	80058fa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800588c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	0013      	movs	r3, r2
 8005896:	2200      	movs	r2, #0
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	f000 fb33 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e053      	b.n	800594e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2bff      	cmp	r3, #255	; 0xff
 80058ae:	d911      	bls.n	80058d4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	22ff      	movs	r2, #255	; 0xff
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	045c      	lsls	r4, r3, #17
 80058c0:	230a      	movs	r3, #10
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	8819      	ldrh	r1, [r3, #0]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	2300      	movs	r3, #0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	0023      	movs	r3, r4
 80058ce:	f000 fc4d 	bl	800616c <I2C_TransferConfig>
 80058d2:	e012      	b.n	80058fa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	049c      	lsls	r4, r3, #18
 80058e8:	230a      	movs	r3, #10
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	8819      	ldrh	r1, [r3, #0]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	2300      	movs	r3, #0
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	0023      	movs	r3, r4
 80058f6:	f000 fc39 	bl	800616c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d198      	bne.n	8005836 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	0018      	movs	r0, r3
 800590c:	f000 fb78 	bl	8006000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005910:	1e03      	subs	r3, r0, #0
 8005912:	d001      	beq.n	8005918 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e01a      	b.n	800594e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2220      	movs	r2, #32
 800591e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	490c      	ldr	r1, [pc, #48]	; (800595c <HAL_I2C_Master_Transmit+0x20c>)
 800592c:	400a      	ands	r2, r1
 800592e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2241      	movs	r2, #65	; 0x41
 8005934:	2120      	movs	r1, #32
 8005936:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2242      	movs	r2, #66	; 0x42
 800593c:	2100      	movs	r1, #0
 800593e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800594c:	2302      	movs	r3, #2
  }
}
 800594e:	0018      	movs	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	b007      	add	sp, #28
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	80002000 	.word	0x80002000
 800595c:	fe00e800 	.word	0xfe00e800

08005960 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	000c      	movs	r4, r1
 800596a:	0010      	movs	r0, r2
 800596c:	0019      	movs	r1, r3
 800596e:	230a      	movs	r3, #10
 8005970:	18fb      	adds	r3, r7, r3
 8005972:	1c22      	adds	r2, r4, #0
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	2308      	movs	r3, #8
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	1c02      	adds	r2, r0, #0
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	1dbb      	adds	r3, r7, #6
 8005980:	1c0a      	adds	r2, r1, #0
 8005982:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2241      	movs	r2, #65	; 0x41
 8005988:	5c9b      	ldrb	r3, [r3, r2]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b20      	cmp	r3, #32
 800598e:	d000      	beq.n	8005992 <HAL_I2C_Mem_Read+0x32>
 8005990:	e110      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_I2C_Mem_Read+0x42>
 8005998:	232c      	movs	r3, #44	; 0x2c
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	0092      	lsls	r2, r2, #2
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e103      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2240      	movs	r2, #64	; 0x40
 80059b2:	5c9b      	ldrb	r3, [r3, r2]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_I2C_Mem_Read+0x5c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e0fc      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2240      	movs	r2, #64	; 0x40
 80059c0:	2101      	movs	r1, #1
 80059c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059c4:	f7ff f902 	bl	8004bcc <HAL_GetTick>
 80059c8:	0003      	movs	r3, r0
 80059ca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059cc:	2380      	movs	r3, #128	; 0x80
 80059ce:	0219      	lsls	r1, r3, #8
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2319      	movs	r3, #25
 80059d8:	2201      	movs	r2, #1
 80059da:	f000 fa93 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80059de:	1e03      	subs	r3, r0, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0e7      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2241      	movs	r2, #65	; 0x41
 80059ea:	2122      	movs	r1, #34	; 0x22
 80059ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2242      	movs	r2, #66	; 0x42
 80059f2:	2140      	movs	r1, #64	; 0x40
 80059f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	222c      	movs	r2, #44	; 0x2c
 8005a06:	18ba      	adds	r2, r7, r2
 8005a08:	8812      	ldrh	r2, [r2, #0]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a12:	1dbb      	adds	r3, r7, #6
 8005a14:	881c      	ldrh	r4, [r3, #0]
 8005a16:	2308      	movs	r3, #8
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	881a      	ldrh	r2, [r3, #0]
 8005a1c:	230a      	movs	r3, #10
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	8819      	ldrh	r1, [r3, #0]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	0023      	movs	r3, r4
 8005a2e:	f000 f9e5 	bl	8005dfc <I2C_RequestMemoryRead>
 8005a32:	1e03      	subs	r3, r0, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2240      	movs	r2, #64	; 0x40
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0b9      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2bff      	cmp	r3, #255	; 0xff
 8005a4a:	d911      	bls.n	8005a70 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	22ff      	movs	r2, #255	; 0xff
 8005a50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	045c      	lsls	r4, r3, #17
 8005a5c:	230a      	movs	r3, #10
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	8819      	ldrh	r1, [r3, #0]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	4b56      	ldr	r3, [pc, #344]	; (8005bc0 <HAL_I2C_Mem_Read+0x260>)
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	0023      	movs	r3, r4
 8005a6a:	f000 fb7f 	bl	800616c <I2C_TransferConfig>
 8005a6e:	e012      	b.n	8005a96 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	049c      	lsls	r4, r3, #18
 8005a84:	230a      	movs	r3, #10
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	8819      	ldrh	r1, [r3, #0]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <HAL_I2C_Mem_Read+0x260>)
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	0023      	movs	r3, r4
 8005a92:	f000 fb6b 	bl	800616c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	0013      	movs	r3, r2
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	f000 fa2e 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e082      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d03a      	beq.n	8005b62 <HAL_I2C_Mem_Read+0x202>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d136      	bne.n	8005b62 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	0013      	movs	r3, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	f000 f9ff 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e053      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2bff      	cmp	r3, #255	; 0xff
 8005b16:	d911      	bls.n	8005b3c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	045c      	lsls	r4, r3, #17
 8005b28:	230a      	movs	r3, #10
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	8819      	ldrh	r1, [r3, #0]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	2300      	movs	r3, #0
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	0023      	movs	r3, r4
 8005b36:	f000 fb19 	bl	800616c <I2C_TransferConfig>
 8005b3a:	e012      	b.n	8005b62 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	049c      	lsls	r4, r3, #18
 8005b50:	230a      	movs	r3, #10
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	8819      	ldrh	r1, [r3, #0]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	0023      	movs	r3, r4
 8005b5e:	f000 fb05 	bl	800616c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d194      	bne.n	8005a96 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 fa44 	bl	8006000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b78:	1e03      	subs	r3, r0, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e01a      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2220      	movs	r2, #32
 8005b86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	490c      	ldr	r1, [pc, #48]	; (8005bc4 <HAL_I2C_Mem_Read+0x264>)
 8005b94:	400a      	ands	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2241      	movs	r2, #65	; 0x41
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2242      	movs	r2, #66	; 0x42
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2240      	movs	r2, #64	; 0x40
 8005bac:	2100      	movs	r1, #0
 8005bae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e000      	b.n	8005bb6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005bb4:	2302      	movs	r3, #2
  }
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b007      	add	sp, #28
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	80002400 	.word	0x80002400
 8005bc4:	fe00e800 	.word	0xfe00e800

08005bc8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	230a      	movs	r3, #10
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	1c0a      	adds	r2, r1, #0
 8005bda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2241      	movs	r2, #65	; 0x41
 8005be4:	5c9b      	ldrb	r3, [r3, r2]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d000      	beq.n	8005bee <HAL_I2C_IsDeviceReady+0x26>
 8005bec:	e0fe      	b.n	8005dec <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	401a      	ands	r2, r3
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0f3      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2240      	movs	r2, #64	; 0x40
 8005c0a:	5c9b      	ldrb	r3, [r3, r2]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_I2C_IsDeviceReady+0x4c>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e0ec      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2240      	movs	r2, #64	; 0x40
 8005c18:	2101      	movs	r1, #1
 8005c1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2241      	movs	r2, #65	; 0x41
 8005c20:	2124      	movs	r1, #36	; 0x24
 8005c22:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d107      	bne.n	8005c42 <HAL_I2C_IsDeviceReady+0x7a>
 8005c32:	230a      	movs	r3, #10
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	059b      	lsls	r3, r3, #22
 8005c3a:	0d9b      	lsrs	r3, r3, #22
 8005c3c:	4a6e      	ldr	r2, [pc, #440]	; (8005df8 <HAL_I2C_IsDeviceReady+0x230>)
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	e007      	b.n	8005c52 <HAL_I2C_IsDeviceReady+0x8a>
 8005c42:	230a      	movs	r3, #10
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	059b      	lsls	r3, r3, #22
 8005c4a:	0d9b      	lsrs	r3, r3, #22
 8005c4c:	22a0      	movs	r2, #160	; 0xa0
 8005c4e:	0192      	lsls	r2, r2, #6
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005c58:	f7fe ffb8 	bl	8004bcc <HAL_GetTick>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2220      	movs	r2, #32
 8005c68:	4013      	ands	r3, r2
 8005c6a:	3b20      	subs	r3, #32
 8005c6c:	425a      	negs	r2, r3
 8005c6e:	4153      	adcs	r3, r2
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	231f      	movs	r3, #31
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2210      	movs	r2, #16
 8005c80:	4013      	ands	r3, r2
 8005c82:	3b10      	subs	r3, #16
 8005c84:	425a      	negs	r2, r3
 8005c86:	4153      	adcs	r3, r2
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	231e      	movs	r3, #30
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c90:	e035      	b.n	8005cfe <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	d01a      	beq.n	8005cce <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fe ff98 	bl	8004bcc <HAL_GetTick>
 8005c9c:	0002      	movs	r2, r0
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <HAL_I2C_IsDeviceReady+0xe6>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10f      	bne.n	8005cce <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2241      	movs	r2, #65	; 0x41
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	2220      	movs	r2, #32
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2240      	movs	r2, #64	; 0x40
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e08f      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	3b20      	subs	r3, #32
 8005cda:	425a      	negs	r2, r3
 8005cdc:	4153      	adcs	r3, r2
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	231f      	movs	r3, #31
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2210      	movs	r2, #16
 8005cee:	4013      	ands	r3, r2
 8005cf0:	3b10      	subs	r3, #16
 8005cf2:	425a      	negs	r2, r3
 8005cf4:	4153      	adcs	r3, r2
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	231e      	movs	r3, #30
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005cfe:	231f      	movs	r3, #31
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d104      	bne.n	8005d12 <HAL_I2C_IsDeviceReady+0x14a>
 8005d08:	231e      	movs	r3, #30
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0bf      	beq.n	8005c92 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d01a      	beq.n	8005d56 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	0013      	movs	r3, r2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2120      	movs	r1, #32
 8005d2e:	f000 f8e9 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005d32:	1e03      	subs	r3, r0, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e059      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2241      	movs	r2, #65	; 0x41
 8005d46:	2120      	movs	r1, #32
 8005d48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2240      	movs	r2, #64	; 0x40
 8005d4e:	2100      	movs	r1, #0
 8005d50:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e04b      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	0013      	movs	r3, r2
 8005d60:	2200      	movs	r2, #0
 8005d62:	2120      	movs	r1, #32
 8005d64:	f000 f8ce 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005d68:	1e03      	subs	r3, r0, #0
 8005d6a:	d001      	beq.n	8005d70 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e03e      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2210      	movs	r2, #16
 8005d76:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d119      	bne.n	8005dbc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2180      	movs	r1, #128	; 0x80
 8005d94:	01c9      	lsls	r1, r1, #7
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	0013      	movs	r3, r2
 8005da4:	2200      	movs	r2, #0
 8005da6:	2120      	movs	r1, #32
 8005da8:	f000 f8ac 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005dac:	1e03      	subs	r3, r0, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e01c      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2220      	movs	r2, #32
 8005dba:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d900      	bls.n	8005dcc <HAL_I2C_IsDeviceReady+0x204>
 8005dca:	e72e      	b.n	8005c2a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2241      	movs	r2, #65	; 0x41
 8005dd0:	2120      	movs	r1, #32
 8005dd2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd8:	2220      	movs	r2, #32
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	0018      	movs	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b008      	add	sp, #32
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	02002000 	.word	0x02002000

08005dfc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	000c      	movs	r4, r1
 8005e06:	0010      	movs	r0, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	250a      	movs	r5, #10
 8005e0c:	197b      	adds	r3, r7, r5
 8005e0e:	1c22      	adds	r2, r4, #0
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	2308      	movs	r3, #8
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	1c02      	adds	r2, r0, #0
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	1dbb      	adds	r3, r7, #6
 8005e1c:	1c0a      	adds	r2, r1, #0
 8005e1e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e20:	1dbb      	adds	r3, r7, #6
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	197b      	adds	r3, r7, r5
 8005e28:	8819      	ldrh	r1, [r3, #0]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <I2C_RequestMemoryRead+0xc0>)
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	f000 f99b 	bl	800616c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	6a39      	ldr	r1, [r7, #32]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 f8a0 	bl	8005f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d001      	beq.n	8005e4a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e033      	b.n	8005eb2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e4a:	1dbb      	adds	r3, r7, #6
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d107      	bne.n	8005e62 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e52:	2308      	movs	r3, #8
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e60:	e019      	b.n	8005e96 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e62:	2308      	movs	r3, #8
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	0a1b      	lsrs	r3, r3, #8
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e76:	6a39      	ldr	r1, [r7, #32]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 f881 	bl	8005f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e80:	1e03      	subs	r3, r0, #0
 8005e82:	d001      	beq.n	8005e88 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e014      	b.n	8005eb2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e88:	2308      	movs	r3, #8
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	0013      	movs	r3, r2
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2140      	movs	r1, #64	; 0x40
 8005ea4:	f000 f82e 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005ea8:	1e03      	subs	r3, r0, #0
 8005eaa:	d001      	beq.n	8005eb0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	80002000 	.word	0x80002000

08005ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d103      	bne.n	8005ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2200      	movs	r2, #0
 8005edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d007      	beq.n	8005efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	619a      	str	r2, [r3, #24]
  }
}
 8005efc:	46c0      	nop			; (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	1dfb      	adds	r3, r7, #7
 8005f12:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f14:	e021      	b.n	8005f5a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	d01e      	beq.n	8005f5a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1c:	f7fe fe56 	bl	8004bcc <HAL_GetTick>
 8005f20:	0002      	movs	r2, r0
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d302      	bcc.n	8005f32 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d113      	bne.n	8005f5a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	2220      	movs	r2, #32
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2241      	movs	r2, #65	; 0x41
 8005f42:	2120      	movs	r1, #32
 8005f44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2242      	movs	r2, #66	; 0x42
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2240      	movs	r2, #64	; 0x40
 8005f52:	2100      	movs	r1, #0
 8005f54:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e00f      	b.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	425a      	negs	r2, r3
 8005f6a:	4153      	adcs	r3, r2
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	001a      	movs	r2, r3
 8005f70:	1dfb      	adds	r3, r7, #7
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d0ce      	beq.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b004      	add	sp, #16
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f8e:	e02b      	b.n	8005fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0018      	movs	r0, r3
 8005f98:	f000 f86e 	bl	8006078 <I2C_IsAcknowledgeFailed>
 8005f9c:	1e03      	subs	r3, r0, #0
 8005f9e:	d001      	beq.n	8005fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e029      	b.n	8005ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	d01e      	beq.n	8005fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005faa:	f7fe fe0f 	bl	8004bcc <HAL_GetTick>
 8005fae:	0002      	movs	r2, r0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d113      	bne.n	8005fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2241      	movs	r2, #65	; 0x41
 8005fd0:	2120      	movs	r1, #32
 8005fd2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2242      	movs	r2, #66	; 0x42
 8005fd8:	2100      	movs	r1, #0
 8005fda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2240      	movs	r2, #64	; 0x40
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e007      	b.n	8005ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d1cc      	bne.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b004      	add	sp, #16
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800600c:	e028      	b.n	8006060 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	0018      	movs	r0, r3
 8006016:	f000 f82f 	bl	8006078 <I2C_IsAcknowledgeFailed>
 800601a:	1e03      	subs	r3, r0, #0
 800601c:	d001      	beq.n	8006022 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e026      	b.n	8006070 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006022:	f7fe fdd3 	bl	8004bcc <HAL_GetTick>
 8006026:	0002      	movs	r2, r0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d113      	bne.n	8006060 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603c:	2220      	movs	r2, #32
 800603e:	431a      	orrs	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2241      	movs	r2, #65	; 0x41
 8006048:	2120      	movs	r1, #32
 800604a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2242      	movs	r2, #66	; 0x42
 8006050:	2100      	movs	r1, #0
 8006052:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	2100      	movs	r1, #0
 800605a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e007      	b.n	8006070 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2220      	movs	r2, #32
 8006068:	4013      	ands	r3, r2
 800606a:	2b20      	cmp	r3, #32
 800606c:	d1cf      	bne.n	800600e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b004      	add	sp, #16
 8006076:	bd80      	pop	{r7, pc}

08006078 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2210      	movs	r2, #16
 800608c:	4013      	ands	r3, r2
 800608e:	2b10      	cmp	r3, #16
 8006090:	d164      	bne.n	800615c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	049b      	lsls	r3, r3, #18
 800609c:	401a      	ands	r2, r3
 800609e:	2380      	movs	r3, #128	; 0x80
 80060a0:	049b      	lsls	r3, r3, #18
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d02b      	beq.n	80060fe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	01c9      	lsls	r1, r1, #7
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b8:	e021      	b.n	80060fe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	d01e      	beq.n	80060fe <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c0:	f7fe fd84 	bl	8004bcc <HAL_GetTick>
 80060c4:	0002      	movs	r2, r0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <I2C_IsAcknowledgeFailed+0x5e>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d113      	bne.n	80060fe <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	2220      	movs	r2, #32
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2241      	movs	r2, #65	; 0x41
 80060e6:	2120      	movs	r1, #32
 80060e8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2242      	movs	r2, #66	; 0x42
 80060ee:	2100      	movs	r1, #0
 80060f0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2240      	movs	r2, #64	; 0x40
 80060f6:	2100      	movs	r1, #0
 80060f8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e02f      	b.n	800615e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2220      	movs	r2, #32
 8006106:	4013      	ands	r3, r2
 8006108:	2b20      	cmp	r3, #32
 800610a:	d1d6      	bne.n	80060ba <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2210      	movs	r2, #16
 8006112:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2220      	movs	r2, #32
 800611a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	0018      	movs	r0, r3
 8006120:	f7ff fece 	bl	8005ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	490e      	ldr	r1, [pc, #56]	; (8006168 <I2C_IsAcknowledgeFailed+0xf0>)
 8006130:	400a      	ands	r2, r1
 8006132:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	2204      	movs	r2, #4
 800613a:	431a      	orrs	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2241      	movs	r2, #65	; 0x41
 8006144:	2120      	movs	r1, #32
 8006146:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2242      	movs	r2, #66	; 0x42
 800614c:	2100      	movs	r1, #0
 800614e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2240      	movs	r2, #64	; 0x40
 8006154:	2100      	movs	r1, #0
 8006156:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b004      	add	sp, #16
 8006164:	bd80      	pop	{r7, pc}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	fe00e800 	.word	0xfe00e800

0800616c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	0008      	movs	r0, r1
 8006176:	0011      	movs	r1, r2
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	240a      	movs	r4, #10
 800617c:	193b      	adds	r3, r7, r4
 800617e:	1c02      	adds	r2, r0, #0
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	2009      	movs	r0, #9
 8006184:	183b      	adds	r3, r7, r0
 8006186:	1c0a      	adds	r2, r1, #0
 8006188:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	6a3a      	ldr	r2, [r7, #32]
 8006192:	0d51      	lsrs	r1, r2, #21
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	00d2      	lsls	r2, r2, #3
 8006198:	400a      	ands	r2, r1
 800619a:	490e      	ldr	r1, [pc, #56]	; (80061d4 <I2C_TransferConfig+0x68>)
 800619c:	430a      	orrs	r2, r1
 800619e:	43d2      	mvns	r2, r2
 80061a0:	401a      	ands	r2, r3
 80061a2:	0011      	movs	r1, r2
 80061a4:	193b      	adds	r3, r7, r4
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	059b      	lsls	r3, r3, #22
 80061aa:	0d9a      	lsrs	r2, r3, #22
 80061ac:	183b      	adds	r3, r7, r0
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	0418      	lsls	r0, r3, #16
 80061b2:	23ff      	movs	r3, #255	; 0xff
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	4003      	ands	r3, r0
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	431a      	orrs	r2, r3
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b005      	add	sp, #20
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	03ff63ff 	.word	0x03ff63ff

080061d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2241      	movs	r2, #65	; 0x41
 80061e6:	5c9b      	ldrb	r3, [r3, r2]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d138      	bne.n	8006260 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	5c9b      	ldrb	r3, [r3, r2]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e032      	b.n	8006262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2240      	movs	r2, #64	; 0x40
 8006200:	2101      	movs	r1, #1
 8006202:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2241      	movs	r2, #65	; 0x41
 8006208:	2124      	movs	r1, #36	; 0x24
 800620a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2101      	movs	r1, #1
 8006218:	438a      	bics	r2, r1
 800621a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4911      	ldr	r1, [pc, #68]	; (800626c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006228:	400a      	ands	r2, r1
 800622a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2101      	movs	r1, #1
 8006248:	430a      	orrs	r2, r1
 800624a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2241      	movs	r2, #65	; 0x41
 8006250:	2120      	movs	r1, #32
 8006252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	2100      	movs	r1, #0
 800625a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	0018      	movs	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	b002      	add	sp, #8
 8006268:	bd80      	pop	{r7, pc}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	ffffefff 	.word	0xffffefff

08006270 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2241      	movs	r2, #65	; 0x41
 800627e:	5c9b      	ldrb	r3, [r3, r2]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b20      	cmp	r3, #32
 8006284:	d139      	bne.n	80062fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2240      	movs	r2, #64	; 0x40
 800628a:	5c9b      	ldrb	r3, [r3, r2]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006290:	2302      	movs	r3, #2
 8006292:	e033      	b.n	80062fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2240      	movs	r2, #64	; 0x40
 8006298:	2101      	movs	r1, #1
 800629a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2241      	movs	r2, #65	; 0x41
 80062a0:	2124      	movs	r1, #36	; 0x24
 80062a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2101      	movs	r1, #1
 80062b0:	438a      	bics	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2101      	movs	r1, #1
 80062e2:	430a      	orrs	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2241      	movs	r2, #65	; 0x41
 80062ea:	2120      	movs	r1, #32
 80062ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2240      	movs	r2, #64	; 0x40
 80062f2:	2100      	movs	r1, #0
 80062f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
  }
}
 80062fc:	0018      	movs	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	b004      	add	sp, #16
 8006302:	bd80      	pop	{r7, pc}
 8006304:	fffff0ff 	.word	0xfffff0ff

08006308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006308:	b5b0      	push	{r4, r5, r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f000 fb6c 	bl	80069f4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631c:	4bc8      	ldr	r3, [pc, #800]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	220c      	movs	r2, #12
 8006322:	4013      	ands	r3, r2
 8006324:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006326:	4bc6      	ldr	r3, [pc, #792]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	4013      	ands	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2201      	movs	r2, #1
 8006338:	4013      	ands	r3, r2
 800633a:	d100      	bne.n	800633e <HAL_RCC_OscConfig+0x36>
 800633c:	e07d      	b.n	800643a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b08      	cmp	r3, #8
 8006342:	d007      	beq.n	8006354 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d112      	bne.n	8006370 <HAL_RCC_OscConfig+0x68>
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	025b      	lsls	r3, r3, #9
 8006350:	429a      	cmp	r2, r3
 8006352:	d10d      	bne.n	8006370 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006354:	4bba      	ldr	r3, [pc, #744]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	4013      	ands	r3, r2
 800635e:	d100      	bne.n	8006362 <HAL_RCC_OscConfig+0x5a>
 8006360:	e06a      	b.n	8006438 <HAL_RCC_OscConfig+0x130>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d166      	bne.n	8006438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f000 fb42 	bl	80069f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	025b      	lsls	r3, r3, #9
 8006378:	429a      	cmp	r2, r3
 800637a:	d107      	bne.n	800638c <HAL_RCC_OscConfig+0x84>
 800637c:	4bb0      	ldr	r3, [pc, #704]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4baf      	ldr	r3, [pc, #700]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	0249      	lsls	r1, r1, #9
 8006386:	430a      	orrs	r2, r1
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	e027      	b.n	80063dc <HAL_RCC_OscConfig+0xd4>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	23a0      	movs	r3, #160	; 0xa0
 8006392:	02db      	lsls	r3, r3, #11
 8006394:	429a      	cmp	r2, r3
 8006396:	d10e      	bne.n	80063b6 <HAL_RCC_OscConfig+0xae>
 8006398:	4ba9      	ldr	r3, [pc, #676]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4ba8      	ldr	r3, [pc, #672]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800639e:	2180      	movs	r1, #128	; 0x80
 80063a0:	02c9      	lsls	r1, r1, #11
 80063a2:	430a      	orrs	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	4ba6      	ldr	r3, [pc, #664]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4ba5      	ldr	r3, [pc, #660]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	0249      	lsls	r1, r1, #9
 80063b0:	430a      	orrs	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e012      	b.n	80063dc <HAL_RCC_OscConfig+0xd4>
 80063b6:	4ba2      	ldr	r3, [pc, #648]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4ba1      	ldr	r3, [pc, #644]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063bc:	49a1      	ldr	r1, [pc, #644]	; (8006644 <HAL_RCC_OscConfig+0x33c>)
 80063be:	400a      	ands	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	4b9f      	ldr	r3, [pc, #636]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	025b      	lsls	r3, r3, #9
 80063ca:	4013      	ands	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4b9b      	ldr	r3, [pc, #620]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b9a      	ldr	r3, [pc, #616]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80063d6:	499c      	ldr	r1, [pc, #624]	; (8006648 <HAL_RCC_OscConfig+0x340>)
 80063d8:	400a      	ands	r2, r1
 80063da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d014      	beq.n	800640e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e4:	f7fe fbf2 	bl	8004bcc <HAL_GetTick>
 80063e8:	0003      	movs	r3, r0
 80063ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ee:	f7fe fbed 	bl	8004bcc <HAL_GetTick>
 80063f2:	0002      	movs	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b64      	cmp	r3, #100	; 0x64
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e2f9      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006400:	4b8f      	ldr	r3, [pc, #572]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	4013      	ands	r3, r2
 800640a:	d0f0      	beq.n	80063ee <HAL_RCC_OscConfig+0xe6>
 800640c:	e015      	b.n	800643a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640e:	f7fe fbdd 	bl	8004bcc <HAL_GetTick>
 8006412:	0003      	movs	r3, r0
 8006414:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006418:	f7fe fbd8 	bl	8004bcc <HAL_GetTick>
 800641c:	0002      	movs	r2, r0
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e2e4      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800642a:	4b85      	ldr	r3, [pc, #532]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	4013      	ands	r3, r2
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x110>
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006438:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2202      	movs	r2, #2
 8006440:	4013      	ands	r3, r2
 8006442:	d100      	bne.n	8006446 <HAL_RCC_OscConfig+0x13e>
 8006444:	e099      	b.n	800657a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2220      	movs	r2, #32
 8006450:	4013      	ands	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006454:	4b7a      	ldr	r3, [pc, #488]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b79      	ldr	r3, [pc, #484]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800645a:	2120      	movs	r1, #32
 800645c:	430a      	orrs	r2, r1
 800645e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	2220      	movs	r2, #32
 8006464:	4393      	bics	r3, r2
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d005      	beq.n	800647a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b0c      	cmp	r3, #12
 8006472:	d13e      	bne.n	80064f2 <HAL_RCC_OscConfig+0x1ea>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d13b      	bne.n	80064f2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800647a:	4b71      	ldr	r3, [pc, #452]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2204      	movs	r2, #4
 8006480:	4013      	ands	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_RCC_OscConfig+0x186>
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e2b2      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648e:	4b6c      	ldr	r3, [pc, #432]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4a6e      	ldr	r2, [pc, #440]	; (800664c <HAL_RCC_OscConfig+0x344>)
 8006494:	4013      	ands	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	021a      	lsls	r2, r3, #8
 800649e:	4b68      	ldr	r3, [pc, #416]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80064a4:	4b66      	ldr	r3, [pc, #408]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2209      	movs	r2, #9
 80064aa:	4393      	bics	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	4b64      	ldr	r3, [pc, #400]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80064b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b2:	430a      	orrs	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064b6:	f000 fbeb 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 80064ba:	0001      	movs	r1, r0
 80064bc:	4b60      	ldr	r3, [pc, #384]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	220f      	movs	r2, #15
 80064c4:	4013      	ands	r3, r2
 80064c6:	4a62      	ldr	r2, [pc, #392]	; (8006650 <HAL_RCC_OscConfig+0x348>)
 80064c8:	5cd3      	ldrb	r3, [r2, r3]
 80064ca:	000a      	movs	r2, r1
 80064cc:	40da      	lsrs	r2, r3
 80064ce:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_RCC_OscConfig+0x34c>)
 80064d0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80064d2:	4b61      	ldr	r3, [pc, #388]	; (8006658 <HAL_RCC_OscConfig+0x350>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2513      	movs	r5, #19
 80064d8:	197c      	adds	r4, r7, r5
 80064da:	0018      	movs	r0, r3
 80064dc:	f7fe fb30 	bl	8004b40 <HAL_InitTick>
 80064e0:	0003      	movs	r3, r0
 80064e2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80064e4:	197b      	adds	r3, r7, r5
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d046      	beq.n	800657a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80064ec:	197b      	adds	r3, r7, r5
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	e280      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d027      	beq.n	8006548 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80064f8:	4b51      	ldr	r3, [pc, #324]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2209      	movs	r2, #9
 80064fe:	4393      	bics	r3, r2
 8006500:	0019      	movs	r1, r3
 8006502:	4b4f      	ldr	r3, [pc, #316]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650a:	f7fe fb5f 	bl	8004bcc <HAL_GetTick>
 800650e:	0003      	movs	r3, r0
 8006510:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006514:	f7fe fb5a 	bl	8004bcc <HAL_GetTick>
 8006518:	0002      	movs	r2, r0
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e266      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006526:	4b46      	ldr	r3, [pc, #280]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2204      	movs	r2, #4
 800652c:	4013      	ands	r3, r2
 800652e:	d0f1      	beq.n	8006514 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006530:	4b43      	ldr	r3, [pc, #268]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a45      	ldr	r2, [pc, #276]	; (800664c <HAL_RCC_OscConfig+0x344>)
 8006536:	4013      	ands	r3, r2
 8006538:	0019      	movs	r1, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	e018      	b.n	800657a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006548:	4b3d      	ldr	r3, [pc, #244]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800654e:	2101      	movs	r1, #1
 8006550:	438a      	bics	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006554:	f7fe fb3a 	bl	8004bcc <HAL_GetTick>
 8006558:	0003      	movs	r3, r0
 800655a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800655e:	f7fe fb35 	bl	8004bcc <HAL_GetTick>
 8006562:	0002      	movs	r2, r0
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e241      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006570:	4b33      	ldr	r3, [pc, #204]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2204      	movs	r2, #4
 8006576:	4013      	ands	r3, r2
 8006578:	d1f1      	bne.n	800655e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2210      	movs	r2, #16
 8006580:	4013      	ands	r3, r2
 8006582:	d100      	bne.n	8006586 <HAL_RCC_OscConfig+0x27e>
 8006584:	e0a1      	b.n	80066ca <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d140      	bne.n	800660e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800658c:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4013      	ands	r3, r2
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_OscConfig+0x29c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e227      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065a4:	4b26      	ldr	r3, [pc, #152]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	; (800665c <HAL_RCC_OscConfig+0x354>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	0019      	movs	r1, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	4b23      	ldr	r3, [pc, #140]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	0a19      	lsrs	r1, r3, #8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	061a      	lsls	r2, r3, #24
 80065c6:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	0b5b      	lsrs	r3, r3, #13
 80065d2:	3301      	adds	r3, #1
 80065d4:	2280      	movs	r2, #128	; 0x80
 80065d6:	0212      	lsls	r2, r2, #8
 80065d8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80065da:	4b19      	ldr	r3, [pc, #100]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	091b      	lsrs	r3, r3, #4
 80065e0:	210f      	movs	r1, #15
 80065e2:	400b      	ands	r3, r1
 80065e4:	491a      	ldr	r1, [pc, #104]	; (8006650 <HAL_RCC_OscConfig+0x348>)
 80065e6:	5ccb      	ldrb	r3, [r1, r3]
 80065e8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <HAL_RCC_OscConfig+0x34c>)
 80065ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80065ee:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <HAL_RCC_OscConfig+0x350>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2513      	movs	r5, #19
 80065f4:	197c      	adds	r4, r7, r5
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7fe faa2 	bl	8004b40 <HAL_InitTick>
 80065fc:	0003      	movs	r3, r0
 80065fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006600:	197b      	adds	r3, r7, r5
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d060      	beq.n	80066ca <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8006608:	197b      	adds	r3, r7, r5
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	e1f2      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d03f      	beq.n	8006696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCC_OscConfig+0x338>)
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	0049      	lsls	r1, r1, #1
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fe fad2 	bl	8004bcc <HAL_GetTick>
 8006628:	0003      	movs	r3, r0
 800662a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800662c:	e018      	b.n	8006660 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800662e:	f7fe facd 	bl	8004bcc <HAL_GetTick>
 8006632:	0002      	movs	r2, r0
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d911      	bls.n	8006660 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e1d9      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
 8006640:	40021000 	.word	0x40021000
 8006644:	fffeffff 	.word	0xfffeffff
 8006648:	fffbffff 	.word	0xfffbffff
 800664c:	ffffe0ff 	.word	0xffffe0ff
 8006650:	0800af7c 	.word	0x0800af7c
 8006654:	20000004 	.word	0x20000004
 8006658:	20000008 	.word	0x20000008
 800665c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006660:	4bc9      	ldr	r3, [pc, #804]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4013      	ands	r3, r2
 800666a:	d0e0      	beq.n	800662e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800666c:	4bc6      	ldr	r3, [pc, #792]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4ac6      	ldr	r2, [pc, #792]	; (800698c <HAL_RCC_OscConfig+0x684>)
 8006672:	4013      	ands	r3, r2
 8006674:	0019      	movs	r1, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1a      	ldr	r2, [r3, #32]
 800667a:	4bc3      	ldr	r3, [pc, #780]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006680:	4bc1      	ldr	r3, [pc, #772]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	0a19      	lsrs	r1, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	061a      	lsls	r2, r3, #24
 800668e:	4bbe      	ldr	r3, [pc, #760]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	e019      	b.n	80066ca <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006696:	4bbc      	ldr	r3, [pc, #752]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4bbb      	ldr	r3, [pc, #748]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800669c:	49bc      	ldr	r1, [pc, #752]	; (8006990 <HAL_RCC_OscConfig+0x688>)
 800669e:	400a      	ands	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a2:	f7fe fa93 	bl	8004bcc <HAL_GetTick>
 80066a6:	0003      	movs	r3, r0
 80066a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066ac:	f7fe fa8e 	bl	8004bcc <HAL_GetTick>
 80066b0:	0002      	movs	r2, r0
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e19a      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80066be:	4bb2      	ldr	r3, [pc, #712]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4013      	ands	r3, r2
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2208      	movs	r2, #8
 80066d0:	4013      	ands	r3, r2
 80066d2:	d036      	beq.n	8006742 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066dc:	4baa      	ldr	r3, [pc, #680]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80066de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066e0:	4ba9      	ldr	r3, [pc, #676]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80066e2:	2101      	movs	r1, #1
 80066e4:	430a      	orrs	r2, r1
 80066e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e8:	f7fe fa70 	bl	8004bcc <HAL_GetTick>
 80066ec:	0003      	movs	r3, r0
 80066ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066f2:	f7fe fa6b 	bl	8004bcc <HAL_GetTick>
 80066f6:	0002      	movs	r2, r0
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e177      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006704:	4ba0      	ldr	r3, [pc, #640]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	2202      	movs	r2, #2
 800670a:	4013      	ands	r3, r2
 800670c:	d0f1      	beq.n	80066f2 <HAL_RCC_OscConfig+0x3ea>
 800670e:	e018      	b.n	8006742 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006710:	4b9d      	ldr	r3, [pc, #628]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006714:	4b9c      	ldr	r3, [pc, #624]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006716:	2101      	movs	r1, #1
 8006718:	438a      	bics	r2, r1
 800671a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671c:	f7fe fa56 	bl	8004bcc <HAL_GetTick>
 8006720:	0003      	movs	r3, r0
 8006722:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006726:	f7fe fa51 	bl	8004bcc <HAL_GetTick>
 800672a:	0002      	movs	r2, r0
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e15d      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006738:	4b93      	ldr	r3, [pc, #588]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	2202      	movs	r2, #2
 800673e:	4013      	ands	r3, r2
 8006740:	d1f1      	bne.n	8006726 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2204      	movs	r2, #4
 8006748:	4013      	ands	r3, r2
 800674a:	d100      	bne.n	800674e <HAL_RCC_OscConfig+0x446>
 800674c:	e0ae      	b.n	80068ac <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800674e:	2023      	movs	r0, #35	; 0x23
 8006750:	183b      	adds	r3, r7, r0
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006756:	4b8c      	ldr	r3, [pc, #560]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	055b      	lsls	r3, r3, #21
 800675e:	4013      	ands	r3, r2
 8006760:	d109      	bne.n	8006776 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006762:	4b89      	ldr	r3, [pc, #548]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006766:	4b88      	ldr	r3, [pc, #544]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	0549      	lsls	r1, r1, #21
 800676c:	430a      	orrs	r2, r1
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006770:	183b      	adds	r3, r7, r0
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006776:	4b87      	ldr	r3, [pc, #540]	; (8006994 <HAL_RCC_OscConfig+0x68c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	2380      	movs	r3, #128	; 0x80
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	4013      	ands	r3, r2
 8006780:	d11a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006782:	4b84      	ldr	r3, [pc, #528]	; (8006994 <HAL_RCC_OscConfig+0x68c>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b83      	ldr	r3, [pc, #524]	; (8006994 <HAL_RCC_OscConfig+0x68c>)
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	0049      	lsls	r1, r1, #1
 800678c:	430a      	orrs	r2, r1
 800678e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006790:	f7fe fa1c 	bl	8004bcc <HAL_GetTick>
 8006794:	0003      	movs	r3, r0
 8006796:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800679a:	f7fe fa17 	bl	8004bcc <HAL_GetTick>
 800679e:	0002      	movs	r2, r0
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b64      	cmp	r3, #100	; 0x64
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e123      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ac:	4b79      	ldr	r3, [pc, #484]	; (8006994 <HAL_RCC_OscConfig+0x68c>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4013      	ands	r3, r2
 80067b6:	d0f0      	beq.n	800679a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4cc>
 80067c4:	4b70      	ldr	r3, [pc, #448]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80067c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067c8:	4b6f      	ldr	r3, [pc, #444]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	0049      	lsls	r1, r1, #1
 80067ce:	430a      	orrs	r2, r1
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50
 80067d2:	e031      	b.n	8006838 <HAL_RCC_OscConfig+0x530>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10c      	bne.n	80067f6 <HAL_RCC_OscConfig+0x4ee>
 80067dc:	4b6a      	ldr	r3, [pc, #424]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80067de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067e0:	4b69      	ldr	r3, [pc, #420]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80067e2:	496b      	ldr	r1, [pc, #428]	; (8006990 <HAL_RCC_OscConfig+0x688>)
 80067e4:	400a      	ands	r2, r1
 80067e6:	651a      	str	r2, [r3, #80]	; 0x50
 80067e8:	4b67      	ldr	r3, [pc, #412]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80067ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ec:	4b66      	ldr	r3, [pc, #408]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80067ee:	496a      	ldr	r1, [pc, #424]	; (8006998 <HAL_RCC_OscConfig+0x690>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	651a      	str	r2, [r3, #80]	; 0x50
 80067f4:	e020      	b.n	8006838 <HAL_RCC_OscConfig+0x530>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	23a0      	movs	r3, #160	; 0xa0
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	429a      	cmp	r2, r3
 8006800:	d10e      	bne.n	8006820 <HAL_RCC_OscConfig+0x518>
 8006802:	4b61      	ldr	r3, [pc, #388]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006806:	4b60      	ldr	r3, [pc, #384]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	00c9      	lsls	r1, r1, #3
 800680c:	430a      	orrs	r2, r1
 800680e:	651a      	str	r2, [r3, #80]	; 0x50
 8006810:	4b5d      	ldr	r3, [pc, #372]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006814:	4b5c      	ldr	r3, [pc, #368]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006816:	2180      	movs	r1, #128	; 0x80
 8006818:	0049      	lsls	r1, r1, #1
 800681a:	430a      	orrs	r2, r1
 800681c:	651a      	str	r2, [r3, #80]	; 0x50
 800681e:	e00b      	b.n	8006838 <HAL_RCC_OscConfig+0x530>
 8006820:	4b59      	ldr	r3, [pc, #356]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006824:	4b58      	ldr	r3, [pc, #352]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006826:	495a      	ldr	r1, [pc, #360]	; (8006990 <HAL_RCC_OscConfig+0x688>)
 8006828:	400a      	ands	r2, r1
 800682a:	651a      	str	r2, [r3, #80]	; 0x50
 800682c:	4b56      	ldr	r3, [pc, #344]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800682e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006830:	4b55      	ldr	r3, [pc, #340]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006832:	4959      	ldr	r1, [pc, #356]	; (8006998 <HAL_RCC_OscConfig+0x690>)
 8006834:	400a      	ands	r2, r1
 8006836:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006840:	f7fe f9c4 	bl	8004bcc <HAL_GetTick>
 8006844:	0003      	movs	r3, r0
 8006846:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006848:	e009      	b.n	800685e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800684a:	f7fe f9bf 	bl	8004bcc <HAL_GetTick>
 800684e:	0002      	movs	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	4a51      	ldr	r2, [pc, #324]	; (800699c <HAL_RCC_OscConfig+0x694>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e0ca      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800685e:	4b4a      	ldr	r3, [pc, #296]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4013      	ands	r3, r2
 8006868:	d0ef      	beq.n	800684a <HAL_RCC_OscConfig+0x542>
 800686a:	e014      	b.n	8006896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800686c:	f7fe f9ae 	bl	8004bcc <HAL_GetTick>
 8006870:	0003      	movs	r3, r0
 8006872:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006874:	e009      	b.n	800688a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006876:	f7fe f9a9 	bl	8004bcc <HAL_GetTick>
 800687a:	0002      	movs	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	4a46      	ldr	r2, [pc, #280]	; (800699c <HAL_RCC_OscConfig+0x694>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e0b4      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800688a:	4b3f      	ldr	r3, [pc, #252]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800688c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4013      	ands	r3, r2
 8006894:	d1ef      	bne.n	8006876 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006896:	2323      	movs	r3, #35	; 0x23
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d105      	bne.n	80068ac <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a0:	4b39      	ldr	r3, [pc, #228]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80068a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a4:	4b38      	ldr	r3, [pc, #224]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80068a6:	493e      	ldr	r1, [pc, #248]	; (80069a0 <HAL_RCC_OscConfig+0x698>)
 80068a8:	400a      	ands	r2, r1
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d100      	bne.n	80068b6 <HAL_RCC_OscConfig+0x5ae>
 80068b4:	e09d      	b.n	80069f2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d100      	bne.n	80068be <HAL_RCC_OscConfig+0x5b6>
 80068bc:	e076      	b.n	80069ac <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d145      	bne.n	8006952 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c6:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b2f      	ldr	r3, [pc, #188]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80068cc:	4935      	ldr	r1, [pc, #212]	; (80069a4 <HAL_RCC_OscConfig+0x69c>)
 80068ce:	400a      	ands	r2, r1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fe f97b 	bl	8004bcc <HAL_GetTick>
 80068d6:	0003      	movs	r3, r0
 80068d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fe f976 	bl	8004bcc <HAL_GetTick>
 80068e0:	0002      	movs	r2, r0
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e082      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	049b      	lsls	r3, r3, #18
 80068f6:	4013      	ands	r3, r2
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	4a2a      	ldr	r2, [pc, #168]	; (80069a8 <HAL_RCC_OscConfig+0x6a0>)
 8006900:	4013      	ands	r3, r2
 8006902:	0019      	movs	r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	431a      	orrs	r2, r3
 8006914:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006916:	430a      	orrs	r2, r1
 8006918:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0449      	lsls	r1, r1, #17
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006928:	f7fe f950 	bl	8004bcc <HAL_GetTick>
 800692c:	0003      	movs	r3, r0
 800692e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006932:	f7fe f94b 	bl	8004bcc <HAL_GetTick>
 8006936:	0002      	movs	r2, r0
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e057      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	049b      	lsls	r3, r3, #18
 800694c:	4013      	ands	r3, r2
 800694e:	d0f0      	beq.n	8006932 <HAL_RCC_OscConfig+0x62a>
 8006950:	e04f      	b.n	80069f2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 8006958:	4912      	ldr	r1, [pc, #72]	; (80069a4 <HAL_RCC_OscConfig+0x69c>)
 800695a:	400a      	ands	r2, r1
 800695c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695e:	f7fe f935 	bl	8004bcc <HAL_GetTick>
 8006962:	0003      	movs	r3, r0
 8006964:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006968:	f7fe f930 	bl	8004bcc <HAL_GetTick>
 800696c:	0002      	movs	r2, r0
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e03c      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <HAL_RCC_OscConfig+0x680>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	049b      	lsls	r3, r3, #18
 8006982:	4013      	ands	r3, r2
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x660>
 8006986:	e034      	b.n	80069f2 <HAL_RCC_OscConfig+0x6ea>
 8006988:	40021000 	.word	0x40021000
 800698c:	ffff1fff 	.word	0xffff1fff
 8006990:	fffffeff 	.word	0xfffffeff
 8006994:	40007000 	.word	0x40007000
 8006998:	fffffbff 	.word	0xfffffbff
 800699c:	00001388 	.word	0x00001388
 80069a0:	efffffff 	.word	0xefffffff
 80069a4:	feffffff 	.word	0xfeffffff
 80069a8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e01d      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069b8:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_RCC_OscConfig+0x6f4>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	2380      	movs	r3, #128	; 0x80
 80069c2:	025b      	lsls	r3, r3, #9
 80069c4:	401a      	ands	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d10f      	bne.n	80069ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	23f0      	movs	r3, #240	; 0xf0
 80069d2:	039b      	lsls	r3, r3, #14
 80069d4:	401a      	ands	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069da:	429a      	cmp	r2, r3
 80069dc:	d107      	bne.n	80069ee <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	23c0      	movs	r3, #192	; 0xc0
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	401a      	ands	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d001      	beq.n	80069f2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b00a      	add	sp, #40	; 0x28
 80069fa:	bdb0      	pop	{r4, r5, r7, pc}
 80069fc:	40021000 	.word	0x40021000

08006a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a00:	b5b0      	push	{r4, r5, r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e128      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a14:	4b96      	ldr	r3, [pc, #600]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d91e      	bls.n	8006a60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a22:	4b93      	ldr	r3, [pc, #588]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	4393      	bics	r3, r2
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	4b90      	ldr	r3, [pc, #576]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a34:	f7fe f8ca 	bl	8004bcc <HAL_GetTick>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3c:	e009      	b.n	8006a52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3e:	f7fe f8c5 	bl	8004bcc <HAL_GetTick>
 8006a42:	0002      	movs	r2, r0
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	4a8a      	ldr	r2, [pc, #552]	; (8006c74 <HAL_RCC_ClockConfig+0x274>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e109      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a52:	4b87      	ldr	r3, [pc, #540]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	4013      	ands	r3, r2
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d1ee      	bne.n	8006a3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2202      	movs	r2, #2
 8006a66:	4013      	ands	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a6a:	4b83      	ldr	r3, [pc, #524]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	22f0      	movs	r2, #240	; 0xf0
 8006a70:	4393      	bics	r3, r2
 8006a72:	0019      	movs	r1, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	4b7f      	ldr	r3, [pc, #508]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2201      	movs	r2, #1
 8006a84:	4013      	ands	r3, r2
 8006a86:	d100      	bne.n	8006a8a <HAL_RCC_ClockConfig+0x8a>
 8006a88:	e089      	b.n	8006b9e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a92:	4b79      	ldr	r3, [pc, #484]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	029b      	lsls	r3, r3, #10
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d120      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e0e1      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aaa:	4b73      	ldr	r3, [pc, #460]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	049b      	lsls	r3, r3, #18
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d114      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e0d5      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac2:	4b6d      	ldr	r3, [pc, #436]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d109      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0ca      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006ad0:	4b69      	ldr	r3, [pc, #420]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d101      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0c2      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ae0:	4b65      	ldr	r3, [pc, #404]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	4393      	bics	r3, r2
 8006ae8:	0019      	movs	r1, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	4b62      	ldr	r3, [pc, #392]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006af0:	430a      	orrs	r2, r1
 8006af2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006af4:	f7fe f86a 	bl	8004bcc <HAL_GetTick>
 8006af8:	0003      	movs	r3, r0
 8006afa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d111      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b04:	e009      	b.n	8006b1a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b06:	f7fe f861 	bl	8004bcc <HAL_GetTick>
 8006b0a:	0002      	movs	r2, r0
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	4a58      	ldr	r2, [pc, #352]	; (8006c74 <HAL_RCC_ClockConfig+0x274>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0a5      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b1a:	4b57      	ldr	r3, [pc, #348]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	220c      	movs	r2, #12
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d1ef      	bne.n	8006b06 <HAL_RCC_ClockConfig+0x106>
 8006b26:	e03a      	b.n	8006b9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d111      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b30:	e009      	b.n	8006b46 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b32:	f7fe f84b 	bl	8004bcc <HAL_GetTick>
 8006b36:	0002      	movs	r2, r0
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	4a4d      	ldr	r2, [pc, #308]	; (8006c74 <HAL_RCC_ClockConfig+0x274>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e08f      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b46:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	220c      	movs	r2, #12
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b0c      	cmp	r3, #12
 8006b50:	d1ef      	bne.n	8006b32 <HAL_RCC_ClockConfig+0x132>
 8006b52:	e024      	b.n	8006b9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d11b      	bne.n	8006b94 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b5c:	e009      	b.n	8006b72 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5e:	f7fe f835 	bl	8004bcc <HAL_GetTick>
 8006b62:	0002      	movs	r2, r0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	4a42      	ldr	r2, [pc, #264]	; (8006c74 <HAL_RCC_ClockConfig+0x274>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e079      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b72:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	220c      	movs	r2, #12
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d1ef      	bne.n	8006b5e <HAL_RCC_ClockConfig+0x15e>
 8006b7e:	e00e      	b.n	8006b9e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b80:	f7fe f824 	bl	8004bcc <HAL_GetTick>
 8006b84:	0002      	movs	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	4a3a      	ldr	r2, [pc, #232]	; (8006c74 <HAL_RCC_ClockConfig+0x274>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e068      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b94:	4b38      	ldr	r3, [pc, #224]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	220c      	movs	r2, #12
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b9e:	4b34      	ldr	r3, [pc, #208]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d21e      	bcs.n	8006bea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bac:	4b30      	ldr	r3, [pc, #192]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	4393      	bics	r3, r2
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	4b2e      	ldr	r3, [pc, #184]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006bbe:	f7fe f805 	bl	8004bcc <HAL_GetTick>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc6:	e009      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc8:	f7fe f800 	bl	8004bcc <HAL_GetTick>
 8006bcc:	0002      	movs	r2, r0
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <HAL_RCC_ClockConfig+0x274>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e044      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bdc:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <HAL_RCC_ClockConfig+0x270>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	4013      	ands	r3, r2
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d1ee      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <HAL_RCC_ClockConfig+0x27c>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006c04:	430a      	orrs	r2, r1
 8006c06:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d00a      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c12:	4b19      	ldr	r3, [pc, #100]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <HAL_RCC_ClockConfig+0x280>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	00da      	lsls	r2, r3, #3
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006c24:	430a      	orrs	r2, r1
 8006c26:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c28:	f000 f832 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 8006c2c:	0001      	movs	r1, r0
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <HAL_RCC_ClockConfig+0x278>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	091b      	lsrs	r3, r3, #4
 8006c34:	220f      	movs	r2, #15
 8006c36:	4013      	ands	r3, r2
 8006c38:	4a12      	ldr	r2, [pc, #72]	; (8006c84 <HAL_RCC_ClockConfig+0x284>)
 8006c3a:	5cd3      	ldrb	r3, [r2, r3]
 8006c3c:	000a      	movs	r2, r1
 8006c3e:	40da      	lsrs	r2, r3
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <HAL_RCC_ClockConfig+0x288>)
 8006c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c44:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <HAL_RCC_ClockConfig+0x28c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	250b      	movs	r5, #11
 8006c4a:	197c      	adds	r4, r7, r5
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7fd ff77 	bl	8004b40 <HAL_InitTick>
 8006c52:	0003      	movs	r3, r0
 8006c54:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006c56:	197b      	adds	r3, r7, r5
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006c5e:	197b      	adds	r3, r7, r5
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	0018      	movs	r0, r3
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b004      	add	sp, #16
 8006c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	40022000 	.word	0x40022000
 8006c74:	00001388 	.word	0x00001388
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	fffff8ff 	.word	0xfffff8ff
 8006c80:	ffffc7ff 	.word	0xffffc7ff
 8006c84:	0800af7c 	.word	0x0800af7c
 8006c88:	20000004 	.word	0x20000004
 8006c8c:	20000008 	.word	0x20000008

08006c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c90:	b5b0      	push	{r4, r5, r7, lr}
 8006c92:	b08e      	sub	sp, #56	; 0x38
 8006c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006c96:	4b4c      	ldr	r3, [pc, #304]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d014      	beq.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ca6:	d900      	bls.n	8006caa <HAL_RCC_GetSysClockFreq+0x1a>
 8006ca8:	e07b      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x112>
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d002      	beq.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x24>
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d00b      	beq.n	8006cca <HAL_RCC_GetSysClockFreq+0x3a>
 8006cb2:	e076      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006cb4:	4b44      	ldr	r3, [pc, #272]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2210      	movs	r2, #16
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d002      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006cbe:	4b43      	ldr	r3, [pc, #268]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8006cc0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006cc2:	e07c      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006cc4:	4b42      	ldr	r3, [pc, #264]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006cc8:	e079      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cca:	4b42      	ldr	r3, [pc, #264]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8006ccc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006cce:	e076      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	0c9a      	lsrs	r2, r3, #18
 8006cd4:	230f      	movs	r3, #15
 8006cd6:	401a      	ands	r2, r3
 8006cd8:	4b3f      	ldr	r3, [pc, #252]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x148>)
 8006cda:	5c9b      	ldrb	r3, [r3, r2]
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	0d9a      	lsrs	r2, r3, #22
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cea:	4b37      	ldr	r3, [pc, #220]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	025b      	lsls	r3, r3, #9
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d01a      	beq.n	8006d2c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	69b8      	ldr	r0, [r7, #24]
 8006d04:	69f9      	ldr	r1, [r7, #28]
 8006d06:	f7f9 faf3 	bl	80002f0 <__aeabi_lmul>
 8006d0a:	0002      	movs	r2, r0
 8006d0c:	000b      	movs	r3, r1
 8006d0e:	0010      	movs	r0, r2
 8006d10:	0019      	movs	r1, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f7f9 fac7 	bl	80002b0 <__aeabi_uldivmod>
 8006d22:	0002      	movs	r2, r0
 8006d24:	000b      	movs	r3, r1
 8006d26:	0013      	movs	r3, r2
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2a:	e037      	b.n	8006d9c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006d2c:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2210      	movs	r2, #16
 8006d32:	4013      	ands	r3, r2
 8006d34:	d01a      	beq.n	8006d6c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4a23      	ldr	r2, [pc, #140]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8006d40:	2300      	movs	r3, #0
 8006d42:	68b8      	ldr	r0, [r7, #8]
 8006d44:	68f9      	ldr	r1, [r7, #12]
 8006d46:	f7f9 fad3 	bl	80002f0 <__aeabi_lmul>
 8006d4a:	0002      	movs	r2, r0
 8006d4c:	000b      	movs	r3, r1
 8006d4e:	0010      	movs	r0, r2
 8006d50:	0019      	movs	r1, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f7f9 faa7 	bl	80002b0 <__aeabi_uldivmod>
 8006d62:	0002      	movs	r2, r0
 8006d64:	000b      	movs	r3, r1
 8006d66:	0013      	movs	r3, r2
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6a:	e017      	b.n	8006d9c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	0018      	movs	r0, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	0019      	movs	r1, r3
 8006d74:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8006d76:	2300      	movs	r3, #0
 8006d78:	f7f9 faba 	bl	80002f0 <__aeabi_lmul>
 8006d7c:	0002      	movs	r2, r0
 8006d7e:	000b      	movs	r3, r1
 8006d80:	0010      	movs	r0, r2
 8006d82:	0019      	movs	r1, r3
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	001c      	movs	r4, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	001d      	movs	r5, r3
 8006d8c:	0022      	movs	r2, r4
 8006d8e:	002b      	movs	r3, r5
 8006d90:	f7f9 fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8006d94:	0002      	movs	r2, r0
 8006d96:	000b      	movs	r3, r1
 8006d98:	0013      	movs	r3, r2
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006da0:	e00d      	b.n	8006dbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	0b5b      	lsrs	r3, r3, #13
 8006da8:	2207      	movs	r2, #7
 8006daa:	4013      	ands	r3, r2
 8006dac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	3301      	adds	r3, #1
 8006db2:	2280      	movs	r2, #128	; 0x80
 8006db4:	0212      	lsls	r2, r2, #8
 8006db6:	409a      	lsls	r2, r3
 8006db8:	0013      	movs	r3, r2
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006dbc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b00e      	add	sp, #56	; 0x38
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	003d0900 	.word	0x003d0900
 8006dd0:	00f42400 	.word	0x00f42400
 8006dd4:	007a1200 	.word	0x007a1200
 8006dd8:	0800af94 	.word	0x0800af94

08006ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de0:	4b02      	ldr	r3, [pc, #8]	; (8006dec <HAL_RCC_GetHCLKFreq+0x10>)
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	20000004 	.word	0x20000004

08006df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006df4:	f7ff fff2 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006df8:	0001      	movs	r1, r0
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	2207      	movs	r2, #7
 8006e02:	4013      	ands	r3, r2
 8006e04:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e06:	5cd3      	ldrb	r3, [r2, r3]
 8006e08:	40d9      	lsrs	r1, r3
 8006e0a:	000b      	movs	r3, r1
}
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	40021000 	.word	0x40021000
 8006e18:	0800af8c 	.word	0x0800af8c

08006e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e20:	f7ff ffdc 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006e24:	0001      	movs	r1, r0
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	0adb      	lsrs	r3, r3, #11
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	4013      	ands	r3, r2
 8006e30:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e32:	5cd3      	ldrb	r3, [r2, r3]
 8006e34:	40d9      	lsrs	r1, r3
 8006e36:	000b      	movs	r3, r1
}
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	40021000 	.word	0x40021000
 8006e44:	0800af8c 	.word	0x0800af8c

08006e48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006e50:	2017      	movs	r0, #23
 8006e52:	183b      	adds	r3, r7, r0
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d100      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006e62:	e0c2      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e64:	4b91      	ldr	r3, [pc, #580]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	055b      	lsls	r3, r3, #21
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d109      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	4b8e      	ldr	r3, [pc, #568]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e74:	4b8d      	ldr	r3, [pc, #564]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	0549      	lsls	r1, r1, #21
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	2201      	movs	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e84:	4b8a      	ldr	r3, [pc, #552]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d11a      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e90:	4b87      	ldr	r3, [pc, #540]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4b86      	ldr	r3, [pc, #536]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	0049      	lsls	r1, r1, #1
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e9e:	f7fd fe95 	bl	8004bcc <HAL_GetTick>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea6:	e008      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea8:	f7fd fe90 	bl	8004bcc <HAL_GetTick>
 8006eac:	0002      	movs	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b64      	cmp	r3, #100	; 0x64
 8006eb4:	d901      	bls.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e0f3      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eba:	4b7d      	ldr	r3, [pc, #500]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	2380      	movs	r3, #128	; 0x80
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006ec6:	4b79      	ldr	r3, [pc, #484]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	23c0      	movs	r3, #192	; 0xc0
 8006ecc:	039b      	lsls	r3, r3, #14
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	23c0      	movs	r3, #192	; 0xc0
 8006ed8:	039b      	lsls	r3, r3, #14
 8006eda:	4013      	ands	r3, r2
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d013      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	23c0      	movs	r3, #192	; 0xc0
 8006ee8:	029b      	lsls	r3, r3, #10
 8006eea:	401a      	ands	r2, r3
 8006eec:	23c0      	movs	r3, #192	; 0xc0
 8006eee:	029b      	lsls	r3, r3, #10
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d10a      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ef4:	4b6d      	ldr	r3, [pc, #436]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	029b      	lsls	r3, r3, #10
 8006efc:	401a      	ands	r2, r3
 8006efe:	2380      	movs	r3, #128	; 0x80
 8006f00:	029b      	lsls	r3, r3, #10
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d101      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e0cb      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006f0a:	4b68      	ldr	r3, [pc, #416]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f0e:	23c0      	movs	r3, #192	; 0xc0
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	4013      	ands	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d03b      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	23c0      	movs	r3, #192	; 0xc0
 8006f22:	029b      	lsls	r3, r3, #10
 8006f24:	4013      	ands	r3, r2
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d033      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2220      	movs	r2, #32
 8006f32:	4013      	ands	r3, r2
 8006f34:	d02e      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006f36:	4b5d      	ldr	r3, [pc, #372]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3a:	4a5e      	ldr	r2, [pc, #376]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f40:	4b5a      	ldr	r3, [pc, #360]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f44:	4b59      	ldr	r3, [pc, #356]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	0309      	lsls	r1, r1, #12
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4e:	4b57      	ldr	r3, [pc, #348]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f52:	4b56      	ldr	r3, [pc, #344]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f54:	4958      	ldr	r1, [pc, #352]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006f56:	400a      	ands	r2, r1
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006f5a:	4b54      	ldr	r3, [pc, #336]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	2380      	movs	r3, #128	; 0x80
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4013      	ands	r3, r2
 8006f68:	d014      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6a:	f7fd fe2f 	bl	8004bcc <HAL_GetTick>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f72:	e009      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f74:	f7fd fe2a 	bl	8004bcc <HAL_GetTick>
 8006f78:	0002      	movs	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	4a4f      	ldr	r2, [pc, #316]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e08c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f88:	4b48      	ldr	r3, [pc, #288]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4013      	ands	r3, r2
 8006f92:	d0ef      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	23c0      	movs	r3, #192	; 0xc0
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	401a      	ands	r2, r3
 8006f9e:	23c0      	movs	r3, #192	; 0xc0
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8006fa6:	4b41      	ldr	r3, [pc, #260]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a45      	ldr	r2, [pc, #276]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	0019      	movs	r1, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	23c0      	movs	r3, #192	; 0xc0
 8006fb6:	039b      	lsls	r3, r3, #14
 8006fb8:	401a      	ands	r2, r3
 8006fba:	4b3c      	ldr	r3, [pc, #240]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	4b3a      	ldr	r3, [pc, #232]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fc2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	23c0      	movs	r3, #192	; 0xc0
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	401a      	ands	r2, r3
 8006fce:	4b37      	ldr	r3, [pc, #220]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fd4:	2317      	movs	r3, #23
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fde:	4b33      	ldr	r3, [pc, #204]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe2:	4b32      	ldr	r3, [pc, #200]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fe4:	4937      	ldr	r1, [pc, #220]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ff4:	4b2d      	ldr	r3, [pc, #180]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	4393      	bics	r3, r2
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007004:	430a      	orrs	r2, r1
 8007006:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2202      	movs	r2, #2
 800700e:	4013      	ands	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007016:	220c      	movs	r2, #12
 8007018:	4393      	bics	r3, r2
 800701a:	0019      	movs	r1, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	4b22      	ldr	r3, [pc, #136]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007022:	430a      	orrs	r2, r1
 8007024:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2204      	movs	r2, #4
 800702c:	4013      	ands	r3, r2
 800702e:	d009      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007034:	4a24      	ldr	r2, [pc, #144]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007036:	4013      	ands	r3, r2
 8007038:	0019      	movs	r1, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007040:	430a      	orrs	r2, r1
 8007042:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2208      	movs	r2, #8
 800704a:	4013      	ands	r3, r2
 800704c:	d009      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800704e:	4b17      	ldr	r3, [pc, #92]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007054:	4013      	ands	r3, r2
 8007056:	0019      	movs	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800705e:	430a      	orrs	r2, r1
 8007060:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4013      	ands	r3, r2
 800706c:	d009      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007072:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007074:	4013      	ands	r3, r2
 8007076:	0019      	movs	r1, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800707e:	430a      	orrs	r2, r1
 8007080:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	4013      	ands	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007092:	4013      	ands	r3, r2
 8007094:	0019      	movs	r1, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69da      	ldr	r2, [r3, #28]
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800709c:	430a      	orrs	r2, r1
 800709e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	0018      	movs	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b006      	add	sp, #24
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40007000 	.word	0x40007000
 80070b4:	fffcffff 	.word	0xfffcffff
 80070b8:	fff7ffff 	.word	0xfff7ffff
 80070bc:	00001388 	.word	0x00001388
 80070c0:	ffcfffff 	.word	0xffcfffff
 80070c4:	efffffff 	.word	0xefffffff
 80070c8:	fffff3ff 	.word	0xfffff3ff
 80070cc:	ffffcfff 	.word	0xffffcfff
 80070d0:	fff3ffff 	.word	0xfff3ffff

080070d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e032      	b.n	800714c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2239      	movs	r2, #57	; 0x39
 80070ea:	5c9b      	ldrb	r3, [r3, r2]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d107      	bne.n	8007102 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2238      	movs	r2, #56	; 0x38
 80070f6:	2100      	movs	r1, #0
 80070f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f7fd fb29 	bl	8004754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2239      	movs	r2, #57	; 0x39
 8007106:	2102      	movs	r1, #2
 8007108:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	0019      	movs	r1, r3
 8007114:	0010      	movs	r0, r2
 8007116:	f000 fbeb 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	223e      	movs	r2, #62	; 0x3e
 800711e:	2101      	movs	r1, #1
 8007120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	223a      	movs	r2, #58	; 0x3a
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	223b      	movs	r2, #59	; 0x3b
 800712e:	2101      	movs	r1, #1
 8007130:	5499      	strb	r1, [r3, r2]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	223c      	movs	r2, #60	; 0x3c
 8007136:	2101      	movs	r1, #1
 8007138:	5499      	strb	r1, [r3, r2]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	223d      	movs	r2, #61	; 0x3d
 800713e:	2101      	movs	r1, #1
 8007140:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2239      	movs	r2, #57	; 0x39
 8007146:	2101      	movs	r1, #1
 8007148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	0018      	movs	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2239      	movs	r2, #57	; 0x39
 8007160:	5c9b      	ldrb	r3, [r3, r2]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d001      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e03b      	b.n	80071e4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2239      	movs	r2, #57	; 0x39
 8007170:	2102      	movs	r1, #2
 8007172:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2101      	movs	r1, #1
 8007180:	430a      	orrs	r2, r1
 8007182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	05db      	lsls	r3, r3, #23
 800718c:	429a      	cmp	r2, r3
 800718e:	d00e      	beq.n	80071ae <HAL_TIM_Base_Start_IT+0x5a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <HAL_TIM_Base_Start_IT+0x98>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_TIM_Base_Start_IT+0x5a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <HAL_TIM_Base_Start_IT+0x9c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_TIM_Base_Start_IT+0x5a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d111      	bne.n	80071d2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2207      	movs	r2, #7
 80071b6:	4013      	ands	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d010      	beq.n	80071e2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2101      	movs	r1, #1
 80071cc:	430a      	orrs	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	e007      	b.n	80071e2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2101      	movs	r1, #1
 80071de:	430a      	orrs	r2, r1
 80071e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b004      	add	sp, #16
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40010800 	.word	0x40010800
 80071f4:	40011400 	.word	0x40011400

080071f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e032      	b.n	8007270 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2239      	movs	r2, #57	; 0x39
 800720e:	5c9b      	ldrb	r3, [r3, r2]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2238      	movs	r2, #56	; 0x38
 800721a:	2100      	movs	r1, #0
 800721c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	0018      	movs	r0, r3
 8007222:	f000 f829 	bl	8007278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2239      	movs	r2, #57	; 0x39
 800722a:	2102      	movs	r1, #2
 800722c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	0019      	movs	r1, r3
 8007238:	0010      	movs	r0, r2
 800723a:	f000 fb59 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223e      	movs	r2, #62	; 0x3e
 8007242:	2101      	movs	r1, #1
 8007244:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	223a      	movs	r2, #58	; 0x3a
 800724a:	2101      	movs	r1, #1
 800724c:	5499      	strb	r1, [r3, r2]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	223b      	movs	r2, #59	; 0x3b
 8007252:	2101      	movs	r1, #1
 8007254:	5499      	strb	r1, [r3, r2]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	223c      	movs	r2, #60	; 0x3c
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	223d      	movs	r2, #61	; 0x3d
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2239      	movs	r2, #57	; 0x39
 800726a:	2101      	movs	r1, #1
 800726c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	0018      	movs	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	b002      	add	sp, #8
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	b002      	add	sp, #8
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d108      	bne.n	80072aa <HAL_TIM_PWM_Start+0x22>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	223a      	movs	r2, #58	; 0x3a
 800729c:	5c9b      	ldrb	r3, [r3, r2]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	1e5a      	subs	r2, r3, #1
 80072a4:	4193      	sbcs	r3, r2
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	e01f      	b.n	80072ea <HAL_TIM_PWM_Start+0x62>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d108      	bne.n	80072c2 <HAL_TIM_PWM_Start+0x3a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	223b      	movs	r2, #59	; 0x3b
 80072b4:	5c9b      	ldrb	r3, [r3, r2]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	1e5a      	subs	r2, r3, #1
 80072bc:	4193      	sbcs	r3, r2
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	e013      	b.n	80072ea <HAL_TIM_PWM_Start+0x62>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d108      	bne.n	80072da <HAL_TIM_PWM_Start+0x52>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	223c      	movs	r2, #60	; 0x3c
 80072cc:	5c9b      	ldrb	r3, [r3, r2]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	1e5a      	subs	r2, r3, #1
 80072d4:	4193      	sbcs	r3, r2
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	e007      	b.n	80072ea <HAL_TIM_PWM_Start+0x62>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	223d      	movs	r2, #61	; 0x3d
 80072de:	5c9b      	ldrb	r3, [r3, r2]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	4193      	sbcs	r3, r2
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e052      	b.n	8007398 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0x7a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	223a      	movs	r2, #58	; 0x3a
 80072fc:	2102      	movs	r1, #2
 80072fe:	5499      	strb	r1, [r3, r2]
 8007300:	e013      	b.n	800732a <HAL_TIM_PWM_Start+0xa2>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d104      	bne.n	8007312 <HAL_TIM_PWM_Start+0x8a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	223b      	movs	r2, #59	; 0x3b
 800730c:	2102      	movs	r1, #2
 800730e:	5499      	strb	r1, [r3, r2]
 8007310:	e00b      	b.n	800732a <HAL_TIM_PWM_Start+0xa2>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d104      	bne.n	8007322 <HAL_TIM_PWM_Start+0x9a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	223c      	movs	r2, #60	; 0x3c
 800731c:	2102      	movs	r1, #2
 800731e:	5499      	strb	r1, [r3, r2]
 8007320:	e003      	b.n	800732a <HAL_TIM_PWM_Start+0xa2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	223d      	movs	r2, #61	; 0x3d
 8007326:	2102      	movs	r1, #2
 8007328:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	2201      	movs	r2, #1
 8007332:	0018      	movs	r0, r3
 8007334:	f000 fcd8 	bl	8007ce8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	2380      	movs	r3, #128	; 0x80
 800733e:	05db      	lsls	r3, r3, #23
 8007340:	429a      	cmp	r2, r3
 8007342:	d00e      	beq.n	8007362 <HAL_TIM_PWM_Start+0xda>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <HAL_TIM_PWM_Start+0x118>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d009      	beq.n	8007362 <HAL_TIM_PWM_Start+0xda>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a14      	ldr	r2, [pc, #80]	; (80073a4 <HAL_TIM_PWM_Start+0x11c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_TIM_PWM_Start+0xda>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a12      	ldr	r2, [pc, #72]	; (80073a8 <HAL_TIM_PWM_Start+0x120>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d111      	bne.n	8007386 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2207      	movs	r2, #7
 800736a:	4013      	ands	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d010      	beq.n	8007396 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2101      	movs	r1, #1
 8007380:	430a      	orrs	r2, r1
 8007382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007384:	e007      	b.n	8007396 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2101      	movs	r1, #1
 8007392:	430a      	orrs	r2, r1
 8007394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	0018      	movs	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	b004      	add	sp, #16
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40010800 	.word	0x40010800
 80073a8:	40011400 	.word	0x40011400

080073ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2202      	movs	r2, #2
 80073bc:	4013      	ands	r3, r2
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d124      	bne.n	800740c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2202      	movs	r2, #2
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d11d      	bne.n	800740c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2203      	movs	r2, #3
 80073d6:	4252      	negs	r2, r2
 80073d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2203      	movs	r2, #3
 80073e8:	4013      	ands	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 fa66 	bl	80078c0 <HAL_TIM_IC_CaptureCallback>
 80073f4:	e007      	b.n	8007406 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 fa59 	bl	80078b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	0018      	movs	r0, r3
 8007402:	f000 fa65 	bl	80078d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2204      	movs	r2, #4
 8007414:	4013      	ands	r3, r2
 8007416:	2b04      	cmp	r3, #4
 8007418:	d125      	bne.n	8007466 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2204      	movs	r2, #4
 8007422:	4013      	ands	r3, r2
 8007424:	2b04      	cmp	r3, #4
 8007426:	d11e      	bne.n	8007466 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2205      	movs	r2, #5
 800742e:	4252      	negs	r2, r2
 8007430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	23c0      	movs	r3, #192	; 0xc0
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4013      	ands	r3, r2
 8007444:	d004      	beq.n	8007450 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	0018      	movs	r0, r3
 800744a:	f000 fa39 	bl	80078c0 <HAL_TIM_IC_CaptureCallback>
 800744e:	e007      	b.n	8007460 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	0018      	movs	r0, r3
 8007454:	f000 fa2c 	bl	80078b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	0018      	movs	r0, r3
 800745c:	f000 fa38 	bl	80078d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2208      	movs	r2, #8
 800746e:	4013      	ands	r3, r2
 8007470:	2b08      	cmp	r3, #8
 8007472:	d124      	bne.n	80074be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2208      	movs	r2, #8
 800747c:	4013      	ands	r3, r2
 800747e:	2b08      	cmp	r3, #8
 8007480:	d11d      	bne.n	80074be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2209      	movs	r2, #9
 8007488:	4252      	negs	r2, r2
 800748a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2204      	movs	r2, #4
 8007490:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	2203      	movs	r2, #3
 800749a:	4013      	ands	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 fa0d 	bl	80078c0 <HAL_TIM_IC_CaptureCallback>
 80074a6:	e007      	b.n	80074b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	0018      	movs	r0, r3
 80074ac:	f000 fa00 	bl	80078b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 fa0c 	bl	80078d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2210      	movs	r2, #16
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d125      	bne.n	8007518 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2210      	movs	r2, #16
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d11e      	bne.n	8007518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2211      	movs	r2, #17
 80074e0:	4252      	negs	r2, r2
 80074e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2208      	movs	r2, #8
 80074e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	23c0      	movs	r3, #192	; 0xc0
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4013      	ands	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 f9e0 	bl	80078c0 <HAL_TIM_IC_CaptureCallback>
 8007500:	e007      	b.n	8007512 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	0018      	movs	r0, r3
 8007506:	f000 f9d3 	bl	80078b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	0018      	movs	r0, r3
 800750e:	f000 f9df 	bl	80078d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2201      	movs	r2, #1
 8007520:	4013      	ands	r3, r2
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10f      	bne.n	8007546 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	4013      	ands	r3, r2
 8007530:	2b01      	cmp	r3, #1
 8007532:	d108      	bne.n	8007546 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2202      	movs	r2, #2
 800753a:	4252      	negs	r2, r2
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	0018      	movs	r0, r3
 8007542:	f7fc ff9d 	bl	8004480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2240      	movs	r2, #64	; 0x40
 800754e:	4013      	ands	r3, r2
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d10f      	bne.n	8007574 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	4013      	ands	r3, r2
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d108      	bne.n	8007574 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2241      	movs	r2, #65	; 0x41
 8007568:	4252      	negs	r2, r2
 800756a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	0018      	movs	r0, r3
 8007570:	f000 f9b6 	bl	80078e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	b002      	add	sp, #8
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007588:	2317      	movs	r3, #23
 800758a:	18fb      	adds	r3, r7, r3
 800758c:	2200      	movs	r2, #0
 800758e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2238      	movs	r2, #56	; 0x38
 8007594:	5c9b      	ldrb	r3, [r3, r2]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_TIM_PWM_ConfigChannel+0x22>
 800759a:	2302      	movs	r3, #2
 800759c:	e0ad      	b.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2238      	movs	r2, #56	; 0x38
 80075a2:	2101      	movs	r1, #1
 80075a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d100      	bne.n	80075ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80075ac:	e076      	b.n	800769c <HAL_TIM_PWM_ConfigChannel+0x120>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d900      	bls.n	80075b6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80075b4:	e095      	b.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d04e      	beq.n	800765a <HAL_TIM_PWM_ConfigChannel+0xde>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d900      	bls.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80075c2:	e08e      	b.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d021      	beq.n	8007614 <HAL_TIM_PWM_ConfigChannel+0x98>
 80075d0:	e087      	b.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	0011      	movs	r1, r2
 80075da:	0018      	movs	r0, r3
 80075dc:	f000 f9e6 	bl	80079ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2108      	movs	r1, #8
 80075ec:	430a      	orrs	r2, r1
 80075ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2104      	movs	r1, #4
 80075fc:	438a      	bics	r2, r1
 80075fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	619a      	str	r2, [r3, #24]
      break;
 8007612:	e06b      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	0011      	movs	r1, r2
 800761c:	0018      	movs	r0, r3
 800761e:	f000 fa01 	bl	8007a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2180      	movs	r1, #128	; 0x80
 800762e:	0109      	lsls	r1, r1, #4
 8007630:	430a      	orrs	r2, r1
 8007632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4931      	ldr	r1, [pc, #196]	; (8007704 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007640:	400a      	ands	r2, r1
 8007642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6999      	ldr	r1, [r3, #24]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	021a      	lsls	r2, r3, #8
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	619a      	str	r2, [r3, #24]
      break;
 8007658:	e048      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0011      	movs	r1, r2
 8007662:	0018      	movs	r0, r3
 8007664:	f000 fa20 	bl	8007aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69da      	ldr	r2, [r3, #28]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2108      	movs	r1, #8
 8007674:	430a      	orrs	r2, r1
 8007676:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69da      	ldr	r2, [r3, #28]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2104      	movs	r1, #4
 8007684:	438a      	bics	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69d9      	ldr	r1, [r3, #28]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	61da      	str	r2, [r3, #28]
      break;
 800769a:	e027      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	0011      	movs	r1, r2
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 fa3f 	bl	8007b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	0109      	lsls	r1, r1, #4
 80076b8:	430a      	orrs	r2, r1
 80076ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	490f      	ldr	r1, [pc, #60]	; (8007704 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80076c8:	400a      	ands	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69d9      	ldr	r1, [r3, #28]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	61da      	str	r2, [r3, #28]
      break;
 80076e0:	e004      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80076e2:	2317      	movs	r3, #23
 80076e4:	18fb      	adds	r3, r7, r3
 80076e6:	2201      	movs	r2, #1
 80076e8:	701a      	strb	r2, [r3, #0]
      break;
 80076ea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2238      	movs	r2, #56	; 0x38
 80076f0:	2100      	movs	r1, #0
 80076f2:	5499      	strb	r1, [r3, r2]

  return status;
 80076f4:	2317      	movs	r3, #23
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	781b      	ldrb	r3, [r3, #0]
}
 80076fa:	0018      	movs	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b006      	add	sp, #24
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	fffffbff 	.word	0xfffffbff

08007708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	230f      	movs	r3, #15
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2238      	movs	r2, #56	; 0x38
 800771e:	5c9b      	ldrb	r3, [r3, r2]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_TIM_ConfigClockSource+0x20>
 8007724:	2302      	movs	r3, #2
 8007726:	e0bc      	b.n	80078a2 <HAL_TIM_ConfigClockSource+0x19a>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2238      	movs	r2, #56	; 0x38
 800772c:	2101      	movs	r1, #1
 800772e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2239      	movs	r2, #57	; 0x39
 8007734:	2102      	movs	r1, #2
 8007736:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2277      	movs	r2, #119	; 0x77
 8007744:	4393      	bics	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a58      	ldr	r2, [pc, #352]	; (80078ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800774c:	4013      	ands	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2280      	movs	r2, #128	; 0x80
 800775e:	0192      	lsls	r2, r2, #6
 8007760:	4293      	cmp	r3, r2
 8007762:	d040      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0xde>
 8007764:	2280      	movs	r2, #128	; 0x80
 8007766:	0192      	lsls	r2, r2, #6
 8007768:	4293      	cmp	r3, r2
 800776a:	d900      	bls.n	800776e <HAL_TIM_ConfigClockSource+0x66>
 800776c:	e088      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 800776e:	2280      	movs	r2, #128	; 0x80
 8007770:	0152      	lsls	r2, r2, #5
 8007772:	4293      	cmp	r3, r2
 8007774:	d100      	bne.n	8007778 <HAL_TIM_ConfigClockSource+0x70>
 8007776:	e088      	b.n	800788a <HAL_TIM_ConfigClockSource+0x182>
 8007778:	2280      	movs	r2, #128	; 0x80
 800777a:	0152      	lsls	r2, r2, #5
 800777c:	4293      	cmp	r3, r2
 800777e:	d900      	bls.n	8007782 <HAL_TIM_ConfigClockSource+0x7a>
 8007780:	e07e      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 8007782:	2b70      	cmp	r3, #112	; 0x70
 8007784:	d018      	beq.n	80077b8 <HAL_TIM_ConfigClockSource+0xb0>
 8007786:	d900      	bls.n	800778a <HAL_TIM_ConfigClockSource+0x82>
 8007788:	e07a      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 800778a:	2b60      	cmp	r3, #96	; 0x60
 800778c:	d04f      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x126>
 800778e:	d900      	bls.n	8007792 <HAL_TIM_ConfigClockSource+0x8a>
 8007790:	e076      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 8007792:	2b50      	cmp	r3, #80	; 0x50
 8007794:	d03b      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x106>
 8007796:	d900      	bls.n	800779a <HAL_TIM_ConfigClockSource+0x92>
 8007798:	e072      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d057      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x146>
 800779e:	d900      	bls.n	80077a2 <HAL_TIM_ConfigClockSource+0x9a>
 80077a0:	e06e      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 80077a2:	2b30      	cmp	r3, #48	; 0x30
 80077a4:	d063      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x166>
 80077a6:	d86b      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d060      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x166>
 80077ac:	d868      	bhi.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d05d      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x166>
 80077b2:	2b10      	cmp	r3, #16
 80077b4:	d05b      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x166>
 80077b6:	e063      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6899      	ldr	r1, [r3, #8]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f000 fa6e 	bl	8007ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2277      	movs	r2, #119	; 0x77
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
      break;
 80077e4:	e052      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	6899      	ldr	r1, [r3, #8]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f000 fa57 	bl	8007ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	01c9      	lsls	r1, r1, #7
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
      break;
 800780c:	e03e      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6859      	ldr	r1, [r3, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	001a      	movs	r2, r3
 800781c:	f000 f9ca 	bl	8007bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2150      	movs	r1, #80	; 0x50
 8007826:	0018      	movs	r0, r3
 8007828:	f000 fa24 	bl	8007c74 <TIM_ITRx_SetConfig>
      break;
 800782c:	e02e      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6859      	ldr	r1, [r3, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	001a      	movs	r2, r3
 800783c:	f000 f9e8 	bl	8007c10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2160      	movs	r1, #96	; 0x60
 8007846:	0018      	movs	r0, r3
 8007848:	f000 fa14 	bl	8007c74 <TIM_ITRx_SetConfig>
      break;
 800784c:	e01e      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	6859      	ldr	r1, [r3, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	001a      	movs	r2, r3
 800785c:	f000 f9aa 	bl	8007bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2140      	movs	r1, #64	; 0x40
 8007866:	0018      	movs	r0, r3
 8007868:	f000 fa04 	bl	8007c74 <TIM_ITRx_SetConfig>
      break;
 800786c:	e00e      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	0019      	movs	r1, r3
 8007878:	0010      	movs	r0, r2
 800787a:	f000 f9fb 	bl	8007c74 <TIM_ITRx_SetConfig>
      break;
 800787e:	e005      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007880:	230f      	movs	r3, #15
 8007882:	18fb      	adds	r3, r7, r3
 8007884:	2201      	movs	r2, #1
 8007886:	701a      	strb	r2, [r3, #0]
      break;
 8007888:	e000      	b.n	800788c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800788a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2239      	movs	r2, #57	; 0x39
 8007890:	2101      	movs	r1, #1
 8007892:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2238      	movs	r2, #56	; 0x38
 8007898:	2100      	movs	r1, #0
 800789a:	5499      	strb	r1, [r3, r2]

  return status;
 800789c:	230f      	movs	r3, #15
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	781b      	ldrb	r3, [r3, #0]
}
 80078a2:	0018      	movs	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b004      	add	sp, #16
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	ffff00ff 	.word	0xffff00ff

080078b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078b8:	46c0      	nop			; (mov r8, r8)
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b002      	add	sp, #8
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078c8:	46c0      	nop			; (mov r8, r8)
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b002      	add	sp, #8
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078d8:	46c0      	nop			; (mov r8, r8)
 80078da:	46bd      	mov	sp, r7
 80078dc:	b002      	add	sp, #8
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b002      	add	sp, #8
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	2380      	movs	r3, #128	; 0x80
 8007904:	05db      	lsls	r3, r3, #23
 8007906:	429a      	cmp	r2, r3
 8007908:	d00b      	beq.n	8007922 <TIM_Base_SetConfig+0x32>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a23      	ldr	r2, [pc, #140]	; (800799c <TIM_Base_SetConfig+0xac>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_Base_SetConfig+0x32>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a22      	ldr	r2, [pc, #136]	; (80079a0 <TIM_Base_SetConfig+0xb0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_Base_SetConfig+0x32>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a21      	ldr	r2, [pc, #132]	; (80079a4 <TIM_Base_SetConfig+0xb4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d108      	bne.n	8007934 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2270      	movs	r2, #112	; 0x70
 8007926:	4393      	bics	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	2380      	movs	r3, #128	; 0x80
 8007938:	05db      	lsls	r3, r3, #23
 800793a:	429a      	cmp	r2, r3
 800793c:	d00b      	beq.n	8007956 <TIM_Base_SetConfig+0x66>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a16      	ldr	r2, [pc, #88]	; (800799c <TIM_Base_SetConfig+0xac>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d007      	beq.n	8007956 <TIM_Base_SetConfig+0x66>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <TIM_Base_SetConfig+0xb0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d003      	beq.n	8007956 <TIM_Base_SetConfig+0x66>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a14      	ldr	r2, [pc, #80]	; (80079a4 <TIM_Base_SetConfig+0xb4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d108      	bne.n	8007968 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <TIM_Base_SetConfig+0xb8>)
 800795a:	4013      	ands	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2280      	movs	r2, #128	; 0x80
 800796c:	4393      	bics	r3, r2
 800796e:	001a      	movs	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	615a      	str	r2, [r3, #20]
}
 8007994:	46c0      	nop			; (mov r8, r8)
 8007996:	46bd      	mov	sp, r7
 8007998:	b004      	add	sp, #16
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40000400 	.word	0x40000400
 80079a0:	40010800 	.word	0x40010800
 80079a4:	40011400 	.word	0x40011400
 80079a8:	fffffcff 	.word	0xfffffcff

080079ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	2201      	movs	r2, #1
 80079bc:	4393      	bics	r3, r2
 80079be:	001a      	movs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2270      	movs	r2, #112	; 0x70
 80079da:	4393      	bics	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2203      	movs	r2, #3
 80079e2:	4393      	bics	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2202      	movs	r2, #2
 80079f4:	4393      	bics	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	621a      	str	r2, [r3, #32]
}
 8007a1c:	46c0      	nop			; (mov r8, r8)
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b006      	add	sp, #24
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	2210      	movs	r2, #16
 8007a34:	4393      	bics	r3, r2
 8007a36:	001a      	movs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <TIM_OC2_SetConfig+0x7c>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4a12      	ldr	r2, [pc, #72]	; (8007aa4 <TIM_OC2_SetConfig+0x80>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	4393      	bics	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	621a      	str	r2, [r3, #32]
}
 8007a98:	46c0      	nop			; (mov r8, r8)
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b006      	add	sp, #24
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	ffff8fff 	.word	0xffff8fff
 8007aa4:	fffffcff 	.word	0xfffffcff

08007aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <TIM_OC3_SetConfig+0x78>)
 8007ab8:	401a      	ands	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2270      	movs	r2, #112	; 0x70
 8007ad4:	4393      	bics	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2203      	movs	r2, #3
 8007adc:	4393      	bics	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	4a0d      	ldr	r2, [pc, #52]	; (8007b24 <TIM_OC3_SetConfig+0x7c>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	621a      	str	r2, [r3, #32]
}
 8007b18:	46c0      	nop			; (mov r8, r8)
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b006      	add	sp, #24
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	fffffeff 	.word	0xfffffeff
 8007b24:	fffffdff 	.word	0xfffffdff

08007b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <TIM_OC4_SetConfig+0x7c>)
 8007b38:	401a      	ands	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <TIM_OC4_SetConfig+0x80>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a14      	ldr	r2, [pc, #80]	; (8007bac <TIM_OC4_SetConfig+0x84>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <TIM_OC4_SetConfig+0x88>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	031b      	lsls	r3, r3, #12
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	b006      	add	sp, #24
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	ffffefff 	.word	0xffffefff
 8007ba8:	ffff8fff 	.word	0xffff8fff
 8007bac:	fffffcff 	.word	0xfffffcff
 8007bb0:	ffffdfff 	.word	0xffffdfff

08007bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4393      	bics	r3, r2
 8007bce:	001a      	movs	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	22f0      	movs	r2, #240	; 0xf0
 8007bde:	4393      	bics	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	220a      	movs	r2, #10
 8007bf0:	4393      	bics	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	621a      	str	r2, [r3, #32]
}
 8007c08:	46c0      	nop			; (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b006      	add	sp, #24
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	2210      	movs	r2, #16
 8007c22:	4393      	bics	r3, r2
 8007c24:	001a      	movs	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4a0d      	ldr	r2, [pc, #52]	; (8007c70 <TIM_TI2_ConfigInputStage+0x60>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	031b      	lsls	r3, r3, #12
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	22a0      	movs	r2, #160	; 0xa0
 8007c4c:	4393      	bics	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	621a      	str	r2, [r3, #32]
}
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b006      	add	sp, #24
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	46c0      	nop			; (mov r8, r8)
 8007c70:	ffff0fff 	.word	0xffff0fff

08007c74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2270      	movs	r2, #112	; 0x70
 8007c88:	4393      	bics	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	2207      	movs	r2, #7
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	609a      	str	r2, [r3, #8]
}
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b004      	add	sp, #16
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <TIM_ETR_SetConfig+0x3c>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	021a      	lsls	r2, r3, #8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	609a      	str	r2, [r3, #8]
}
 8007cdc:	46c0      	nop			; (mov r8, r8)
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	b006      	add	sp, #24
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	ffff00ff 	.word	0xffff00ff

08007ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	221f      	movs	r2, #31
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	409a      	lsls	r2, r3
 8007cfe:	0013      	movs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	43d2      	mvns	r2, r2
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	211f      	movs	r1, #31
 8007d18:	400b      	ands	r3, r1
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	4099      	lsls	r1, r3
 8007d1e:	000b      	movs	r3, r1
 8007d20:	431a      	orrs	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	b006      	add	sp, #24
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2238      	movs	r2, #56	; 0x38
 8007d3e:	5c9b      	ldrb	r3, [r3, r2]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e047      	b.n	8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2238      	movs	r2, #56	; 0x38
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2239      	movs	r2, #57	; 0x39
 8007d54:	2102      	movs	r1, #2
 8007d56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2270      	movs	r2, #112	; 0x70
 8007d6c:	4393      	bics	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	2380      	movs	r3, #128	; 0x80
 8007d88:	05db      	lsls	r3, r3, #23
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d00e      	beq.n	8007dac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d009      	beq.n	8007dac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d10c      	bne.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2280      	movs	r2, #128	; 0x80
 8007db0:	4393      	bics	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2239      	movs	r2, #57	; 0x39
 8007dca:	2101      	movs	r1, #1
 8007dcc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2238      	movs	r2, #56	; 0x38
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	0018      	movs	r0, r3
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b004      	add	sp, #16
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40010800 	.word	0x40010800
 8007de8:	40011400 	.word	0x40011400

08007dec <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2238      	movs	r2, #56	; 0x38
 8007dfa:	5c9b      	ldrb	r3, [r3, r2]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIMEx_RemapConfig+0x18>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e00c      	b.n	8007e1e <HAL_TIMEx_RemapConfig+0x32>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2238      	movs	r2, #56	; 0x38
 8007e08:	2101      	movs	r1, #1
 8007e0a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2238      	movs	r2, #56	; 0x38
 8007e18:	2100      	movs	r1, #0
 8007e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	0018      	movs	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b002      	add	sp, #8
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e044      	b.n	8007ec4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d107      	bne.n	8007e52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2274      	movs	r2, #116	; 0x74
 8007e46:	2100      	movs	r1, #0
 8007e48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7fc fda5 	bl	800499c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2224      	movs	r2, #36	; 0x24
 8007e56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2101      	movs	r1, #1
 8007e64:	438a      	bics	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f000 fc36 	bl	80086dc <UART_SetConfig>
 8007e70:	0003      	movs	r3, r0
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e024      	b.n	8007ec4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	0018      	movs	r0, r3
 8007e86:	f000 fee7 	bl	8008c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	490d      	ldr	r1, [pc, #52]	; (8007ecc <HAL_UART_Init+0xa4>)
 8007e96:	400a      	ands	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	212a      	movs	r1, #42	; 0x2a
 8007ea6:	438a      	bics	r2, r1
 8007ea8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	f000 ff7f 	bl	8008dc0 <UART_CheckIdleState>
 8007ec2:	0003      	movs	r3, r0
}
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b002      	add	sp, #8
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	ffffb7ff 	.word	0xffffb7ff

08007ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08a      	sub	sp, #40	; 0x28
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	1dbb      	adds	r3, r7, #6
 8007ede:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d000      	beq.n	8007eea <HAL_UART_Transmit+0x1a>
 8007ee8:	e095      	b.n	8008016 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_UART_Transmit+0x28>
 8007ef0:	1dbb      	adds	r3, r7, #6
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e08d      	b.n	8008018 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	2380      	movs	r3, #128	; 0x80
 8007f02:	015b      	lsls	r3, r3, #5
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d109      	bne.n	8007f1c <HAL_UART_Transmit+0x4c>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2201      	movs	r2, #1
 8007f14:	4013      	ands	r3, r2
 8007f16:	d001      	beq.n	8007f1c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e07d      	b.n	8008018 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2274      	movs	r2, #116	; 0x74
 8007f20:	5c9b      	ldrb	r3, [r3, r2]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_UART_Transmit+0x5a>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e076      	b.n	8008018 <HAL_UART_Transmit+0x148>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2274      	movs	r2, #116	; 0x74
 8007f2e:	2101      	movs	r1, #1
 8007f30:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2280      	movs	r2, #128	; 0x80
 8007f36:	2100      	movs	r1, #0
 8007f38:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2221      	movs	r2, #33	; 0x21
 8007f3e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f40:	f7fc fe44 	bl	8004bcc <HAL_GetTick>
 8007f44:	0003      	movs	r3, r0
 8007f46:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	1dba      	adds	r2, r7, #6
 8007f4c:	2150      	movs	r1, #80	; 0x50
 8007f4e:	8812      	ldrh	r2, [r2, #0]
 8007f50:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1dba      	adds	r2, r7, #6
 8007f56:	2152      	movs	r1, #82	; 0x52
 8007f58:	8812      	ldrh	r2, [r2, #0]
 8007f5a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	015b      	lsls	r3, r3, #5
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d108      	bne.n	8007f7a <HAL_UART_Transmit+0xaa>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e003      	b.n	8007f82 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2274      	movs	r2, #116	; 0x74
 8007f86:	2100      	movs	r1, #0
 8007f88:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007f8a:	e02c      	b.n	8007fe6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	0013      	movs	r3, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	2180      	movs	r1, #128	; 0x80
 8007f9a:	f000 ff59 	bl	8008e50 <UART_WaitOnFlagUntilTimeout>
 8007f9e:	1e03      	subs	r3, r0, #0
 8007fa0:	d001      	beq.n	8007fa6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e038      	b.n	8008018 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10b      	bne.n	8007fc4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	001a      	movs	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	05d2      	lsls	r2, r2, #23
 8007fb8:	0dd2      	lsrs	r2, r2, #23
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	3302      	adds	r3, #2
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	e007      	b.n	8007fd4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2252      	movs	r2, #82	; 0x52
 8007fd8:	5a9b      	ldrh	r3, [r3, r2]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b299      	uxth	r1, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2252      	movs	r2, #82	; 0x52
 8007fe4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2252      	movs	r2, #82	; 0x52
 8007fea:	5a9b      	ldrh	r3, [r3, r2]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1cc      	bne.n	8007f8c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	0013      	movs	r3, r2
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2140      	movs	r1, #64	; 0x40
 8008000:	f000 ff26 	bl	8008e50 <UART_WaitOnFlagUntilTimeout>
 8008004:	1e03      	subs	r3, r0, #0
 8008006:	d001      	beq.n	800800c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e005      	b.n	8008018 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e000      	b.n	8008018 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8008016:	2302      	movs	r3, #2
  }
}
 8008018:	0018      	movs	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	b008      	add	sp, #32
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	1dbb      	adds	r3, r7, #6
 800802c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008032:	2b20      	cmp	r3, #32
 8008034:	d155      	bne.n	80080e2 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_UART_Receive_IT+0x24>
 800803c:	1dbb      	adds	r3, r7, #6
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e04d      	b.n	80080e4 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	015b      	lsls	r3, r3, #5
 8008050:	429a      	cmp	r2, r3
 8008052:	d109      	bne.n	8008068 <HAL_UART_Receive_IT+0x48>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2201      	movs	r2, #1
 8008060:	4013      	ands	r3, r2
 8008062:	d001      	beq.n	8008068 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e03d      	b.n	80080e4 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2274      	movs	r2, #116	; 0x74
 800806c:	5c9b      	ldrb	r3, [r3, r2]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_UART_Receive_IT+0x56>
 8008072:	2302      	movs	r3, #2
 8008074:	e036      	b.n	80080e4 <HAL_UART_Receive_IT+0xc4>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2274      	movs	r2, #116	; 0x74
 800807a:	2101      	movs	r1, #1
 800807c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a18      	ldr	r2, [pc, #96]	; (80080ec <HAL_UART_Receive_IT+0xcc>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d020      	beq.n	80080d0 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	4013      	ands	r3, r2
 800809a:	d019      	beq.n	80080d0 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809c:	f3ef 8310 	mrs	r3, PRIMASK
 80080a0:	613b      	str	r3, [r7, #16]
  return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	2301      	movs	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f383 8810 	msr	PRIMASK, r3
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2180      	movs	r1, #128	; 0x80
 80080be:	04c9      	lsls	r1, r1, #19
 80080c0:	430a      	orrs	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f383 8810 	msr	PRIMASK, r3
}
 80080ce:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080d0:	1dbb      	adds	r3, r7, #6
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	0018      	movs	r0, r3
 80080da:	f000 ff7d 	bl	8008fd8 <UART_Start_Receive_IT>
 80080de:	0003      	movs	r3, r0
 80080e0:	e000      	b.n	80080e4 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	0018      	movs	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b008      	add	sp, #32
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	40004800 	.word	0x40004800

080080f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080f0:	b590      	push	{r4, r7, lr}
 80080f2:	b0ab      	sub	sp, #172	; 0xac
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	22a4      	movs	r2, #164	; 0xa4
 8008100:	18b9      	adds	r1, r7, r2
 8008102:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	20a0      	movs	r0, #160	; 0xa0
 800810c:	1839      	adds	r1, r7, r0
 800810e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	219c      	movs	r1, #156	; 0x9c
 8008118:	1879      	adds	r1, r7, r1
 800811a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800811c:	0011      	movs	r1, r2
 800811e:	18bb      	adds	r3, r7, r2
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a99      	ldr	r2, [pc, #612]	; (8008388 <HAL_UART_IRQHandler+0x298>)
 8008124:	4013      	ands	r3, r2
 8008126:	2298      	movs	r2, #152	; 0x98
 8008128:	18bc      	adds	r4, r7, r2
 800812a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800812c:	18bb      	adds	r3, r7, r2
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d114      	bne.n	800815e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008134:	187b      	adds	r3, r7, r1
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2220      	movs	r2, #32
 800813a:	4013      	ands	r3, r2
 800813c:	d00f      	beq.n	800815e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800813e:	183b      	adds	r3, r7, r0
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2220      	movs	r2, #32
 8008144:	4013      	ands	r3, r2
 8008146:	d00a      	beq.n	800815e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814c:	2b00      	cmp	r3, #0
 800814e:	d100      	bne.n	8008152 <HAL_UART_IRQHandler+0x62>
 8008150:	e298      	b.n	8008684 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	0010      	movs	r0, r2
 800815a:	4798      	blx	r3
      }
      return;
 800815c:	e292      	b.n	8008684 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800815e:	2398      	movs	r3, #152	; 0x98
 8008160:	18fb      	adds	r3, r7, r3
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d100      	bne.n	800816a <HAL_UART_IRQHandler+0x7a>
 8008168:	e114      	b.n	8008394 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800816a:	239c      	movs	r3, #156	; 0x9c
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2201      	movs	r2, #1
 8008172:	4013      	ands	r3, r2
 8008174:	d106      	bne.n	8008184 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008176:	23a0      	movs	r3, #160	; 0xa0
 8008178:	18fb      	adds	r3, r7, r3
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a83      	ldr	r2, [pc, #524]	; (800838c <HAL_UART_IRQHandler+0x29c>)
 800817e:	4013      	ands	r3, r2
 8008180:	d100      	bne.n	8008184 <HAL_UART_IRQHandler+0x94>
 8008182:	e107      	b.n	8008394 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008184:	23a4      	movs	r3, #164	; 0xa4
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2201      	movs	r2, #1
 800818c:	4013      	ands	r3, r2
 800818e:	d012      	beq.n	80081b6 <HAL_UART_IRQHandler+0xc6>
 8008190:	23a0      	movs	r3, #160	; 0xa0
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	2380      	movs	r3, #128	; 0x80
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4013      	ands	r3, r2
 800819c:	d00b      	beq.n	80081b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2201      	movs	r2, #1
 80081a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2280      	movs	r2, #128	; 0x80
 80081aa:	589b      	ldr	r3, [r3, r2]
 80081ac:	2201      	movs	r2, #1
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2180      	movs	r1, #128	; 0x80
 80081b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b6:	23a4      	movs	r3, #164	; 0xa4
 80081b8:	18fb      	adds	r3, r7, r3
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2202      	movs	r2, #2
 80081be:	4013      	ands	r3, r2
 80081c0:	d011      	beq.n	80081e6 <HAL_UART_IRQHandler+0xf6>
 80081c2:	239c      	movs	r3, #156	; 0x9c
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	4013      	ands	r3, r2
 80081cc:	d00b      	beq.n	80081e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2202      	movs	r2, #2
 80081d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2280      	movs	r2, #128	; 0x80
 80081da:	589b      	ldr	r3, [r3, r2]
 80081dc:	2204      	movs	r2, #4
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2180      	movs	r1, #128	; 0x80
 80081e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081e6:	23a4      	movs	r3, #164	; 0xa4
 80081e8:	18fb      	adds	r3, r7, r3
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2204      	movs	r2, #4
 80081ee:	4013      	ands	r3, r2
 80081f0:	d011      	beq.n	8008216 <HAL_UART_IRQHandler+0x126>
 80081f2:	239c      	movs	r3, #156	; 0x9c
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	4013      	ands	r3, r2
 80081fc:	d00b      	beq.n	8008216 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2204      	movs	r2, #4
 8008204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2280      	movs	r2, #128	; 0x80
 800820a:	589b      	ldr	r3, [r3, r2]
 800820c:	2202      	movs	r2, #2
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008216:	23a4      	movs	r3, #164	; 0xa4
 8008218:	18fb      	adds	r3, r7, r3
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2208      	movs	r2, #8
 800821e:	4013      	ands	r3, r2
 8008220:	d017      	beq.n	8008252 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008222:	23a0      	movs	r3, #160	; 0xa0
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2220      	movs	r2, #32
 800822a:	4013      	ands	r3, r2
 800822c:	d105      	bne.n	800823a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800822e:	239c      	movs	r3, #156	; 0x9c
 8008230:	18fb      	adds	r3, r7, r3
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2201      	movs	r2, #1
 8008236:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008238:	d00b      	beq.n	8008252 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2208      	movs	r2, #8
 8008240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2280      	movs	r2, #128	; 0x80
 8008246:	589b      	ldr	r3, [r3, r2]
 8008248:	2208      	movs	r2, #8
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008252:	23a4      	movs	r3, #164	; 0xa4
 8008254:	18fb      	adds	r3, r7, r3
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	4013      	ands	r3, r2
 800825e:	d013      	beq.n	8008288 <HAL_UART_IRQHandler+0x198>
 8008260:	23a0      	movs	r3, #160	; 0xa0
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	2380      	movs	r3, #128	; 0x80
 8008268:	04db      	lsls	r3, r3, #19
 800826a:	4013      	ands	r3, r2
 800826c:	d00c      	beq.n	8008288 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	0112      	lsls	r2, r2, #4
 8008276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	589b      	ldr	r3, [r3, r2]
 800827e:	2220      	movs	r2, #32
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2180      	movs	r1, #128	; 0x80
 8008286:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2280      	movs	r2, #128	; 0x80
 800828c:	589b      	ldr	r3, [r3, r2]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d100      	bne.n	8008294 <HAL_UART_IRQHandler+0x1a4>
 8008292:	e1f9      	b.n	8008688 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008294:	23a4      	movs	r3, #164	; 0xa4
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2220      	movs	r2, #32
 800829c:	4013      	ands	r3, r2
 800829e:	d00e      	beq.n	80082be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082a0:	23a0      	movs	r3, #160	; 0xa0
 80082a2:	18fb      	adds	r3, r7, r3
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2220      	movs	r2, #32
 80082a8:	4013      	ands	r3, r2
 80082aa:	d008      	beq.n	80082be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	0010      	movs	r0, r2
 80082bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	589b      	ldr	r3, [r3, r2]
 80082c4:	2194      	movs	r1, #148	; 0x94
 80082c6:	187a      	adds	r2, r7, r1
 80082c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2240      	movs	r2, #64	; 0x40
 80082d2:	4013      	ands	r3, r2
 80082d4:	2b40      	cmp	r3, #64	; 0x40
 80082d6:	d004      	beq.n	80082e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2228      	movs	r2, #40	; 0x28
 80082de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082e0:	d047      	beq.n	8008372 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 ff27 	bl	8009138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2240      	movs	r2, #64	; 0x40
 80082f2:	4013      	ands	r3, r2
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d137      	bne.n	8008368 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f8:	f3ef 8310 	mrs	r3, PRIMASK
 80082fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80082fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008300:	2090      	movs	r0, #144	; 0x90
 8008302:	183a      	adds	r2, r7, r0
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	2301      	movs	r3, #1
 8008308:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800830c:	f383 8810 	msr	PRIMASK, r3
}
 8008310:	46c0      	nop			; (mov r8, r8)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2140      	movs	r1, #64	; 0x40
 800831e:	438a      	bics	r2, r1
 8008320:	609a      	str	r2, [r3, #8]
 8008322:	183b      	adds	r3, r7, r0
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800832a:	f383 8810 	msr	PRIMASK, r3
}
 800832e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	2b00      	cmp	r3, #0
 8008336:	d012      	beq.n	800835e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	4a14      	ldr	r2, [pc, #80]	; (8008390 <HAL_UART_IRQHandler+0x2a0>)
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008344:	0018      	movs	r0, r3
 8008346:	f7fc ffa7 	bl	8005298 <HAL_DMA_Abort_IT>
 800834a:	1e03      	subs	r3, r0, #0
 800834c:	d01a      	beq.n	8008384 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008358:	0018      	movs	r0, r3
 800835a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	e012      	b.n	8008384 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	0018      	movs	r0, r3
 8008362:	f000 f9a7 	bl	80086b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008366:	e00d      	b.n	8008384 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	0018      	movs	r0, r3
 800836c:	f000 f9a2 	bl	80086b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008370:	e008      	b.n	8008384 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	0018      	movs	r0, r3
 8008376:	f000 f99d 	bl	80086b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2280      	movs	r2, #128	; 0x80
 800837e:	2100      	movs	r1, #0
 8008380:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008382:	e181      	b.n	8008688 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	46c0      	nop			; (mov r8, r8)
    return;
 8008386:	e17f      	b.n	8008688 <HAL_UART_IRQHandler+0x598>
 8008388:	0000080f 	.word	0x0000080f
 800838c:	04000120 	.word	0x04000120
 8008390:	080091fd 	.word	0x080091fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008398:	2b01      	cmp	r3, #1
 800839a:	d000      	beq.n	800839e <HAL_UART_IRQHandler+0x2ae>
 800839c:	e133      	b.n	8008606 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800839e:	23a4      	movs	r3, #164	; 0xa4
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2210      	movs	r2, #16
 80083a6:	4013      	ands	r3, r2
 80083a8:	d100      	bne.n	80083ac <HAL_UART_IRQHandler+0x2bc>
 80083aa:	e12c      	b.n	8008606 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083ac:	23a0      	movs	r3, #160	; 0xa0
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2210      	movs	r2, #16
 80083b4:	4013      	ands	r3, r2
 80083b6:	d100      	bne.n	80083ba <HAL_UART_IRQHandler+0x2ca>
 80083b8:	e125      	b.n	8008606 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2210      	movs	r2, #16
 80083c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	2240      	movs	r2, #64	; 0x40
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d000      	beq.n	80083d2 <HAL_UART_IRQHandler+0x2e2>
 80083d0:	e09d      	b.n	800850e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	217e      	movs	r1, #126	; 0x7e
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80083e0:	187b      	adds	r3, r7, r1
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d100      	bne.n	80083ea <HAL_UART_IRQHandler+0x2fa>
 80083e8:	e150      	b.n	800868c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2258      	movs	r2, #88	; 0x58
 80083ee:	5a9b      	ldrh	r3, [r3, r2]
 80083f0:	187a      	adds	r2, r7, r1
 80083f2:	8812      	ldrh	r2, [r2, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d300      	bcc.n	80083fa <HAL_UART_IRQHandler+0x30a>
 80083f8:	e148      	b.n	800868c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	187a      	adds	r2, r7, r1
 80083fe:	215a      	movs	r1, #90	; 0x5a
 8008400:	8812      	ldrh	r2, [r2, #0]
 8008402:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2220      	movs	r2, #32
 800840e:	4013      	ands	r3, r2
 8008410:	d16e      	bne.n	80084f0 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008412:	f3ef 8310 	mrs	r3, PRIMASK
 8008416:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841a:	67bb      	str	r3, [r7, #120]	; 0x78
 800841c:	2301      	movs	r3, #1
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008422:	f383 8810 	msr	PRIMASK, r3
}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	499a      	ldr	r1, [pc, #616]	; (800869c <HAL_UART_IRQHandler+0x5ac>)
 8008434:	400a      	ands	r2, r1
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800843a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	f383 8810 	msr	PRIMASK, r3
}
 8008442:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008444:	f3ef 8310 	mrs	r3, PRIMASK
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800844a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844c:	677b      	str	r3, [r7, #116]	; 0x74
 800844e:	2301      	movs	r3, #1
 8008450:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008454:	f383 8810 	msr	PRIMASK, r3
}
 8008458:	46c0      	nop			; (mov r8, r8)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2101      	movs	r1, #1
 8008466:	438a      	bics	r2, r1
 8008468:	609a      	str	r2, [r3, #8]
 800846a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800846c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008470:	f383 8810 	msr	PRIMASK, r3
}
 8008474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008476:	f3ef 8310 	mrs	r3, PRIMASK
 800847a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800847c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847e:	673b      	str	r3, [r7, #112]	; 0x70
 8008480:	2301      	movs	r3, #1
 8008482:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008486:	f383 8810 	msr	PRIMASK, r3
}
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2140      	movs	r1, #64	; 0x40
 8008498:	438a      	bics	r2, r1
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800849e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a2:	f383 8810 	msr	PRIMASK, r3
}
 80084a6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b4:	f3ef 8310 	mrs	r3, PRIMASK
 80084b8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80084ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084be:	2301      	movs	r3, #1
 80084c0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c4:	f383 8810 	msr	PRIMASK, r3
}
 80084c8:	46c0      	nop			; (mov r8, r8)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2110      	movs	r1, #16
 80084d6:	438a      	bics	r2, r1
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e0:	f383 8810 	msr	PRIMASK, r3
}
 80084e4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	0018      	movs	r0, r3
 80084ec:	f7fc fe94 	bl	8005218 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2258      	movs	r2, #88	; 0x58
 80084f4:	5a9a      	ldrh	r2, [r3, r2]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	215a      	movs	r1, #90	; 0x5a
 80084fa:	5a5b      	ldrh	r3, [r3, r1]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	b29a      	uxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	0011      	movs	r1, r2
 8008506:	0018      	movs	r0, r3
 8008508:	f000 f8dc 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800850c:	e0be      	b.n	800868c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2258      	movs	r2, #88	; 0x58
 8008512:	5a99      	ldrh	r1, [r3, r2]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	225a      	movs	r2, #90	; 0x5a
 8008518:	5a9b      	ldrh	r3, [r3, r2]
 800851a:	b29a      	uxth	r2, r3
 800851c:	208e      	movs	r0, #142	; 0x8e
 800851e:	183b      	adds	r3, r7, r0
 8008520:	1a8a      	subs	r2, r1, r2
 8008522:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	225a      	movs	r2, #90	; 0x5a
 8008528:	5a9b      	ldrh	r3, [r3, r2]
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d100      	bne.n	8008532 <HAL_UART_IRQHandler+0x442>
 8008530:	e0ae      	b.n	8008690 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8008532:	183b      	adds	r3, r7, r0
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d100      	bne.n	800853c <HAL_UART_IRQHandler+0x44c>
 800853a:	e0a9      	b.n	8008690 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853c:	f3ef 8310 	mrs	r3, PRIMASK
 8008540:	60fb      	str	r3, [r7, #12]
  return(result);
 8008542:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008544:	2488      	movs	r4, #136	; 0x88
 8008546:	193a      	adds	r2, r7, r4
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	2301      	movs	r3, #1
 800854c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f383 8810 	msr	PRIMASK, r3
}
 8008554:	46c0      	nop			; (mov r8, r8)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	494f      	ldr	r1, [pc, #316]	; (80086a0 <HAL_UART_IRQHandler+0x5b0>)
 8008562:	400a      	ands	r2, r1
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	193b      	adds	r3, r7, r4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f383 8810 	msr	PRIMASK, r3
}
 8008572:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008574:	f3ef 8310 	mrs	r3, PRIMASK
 8008578:	61bb      	str	r3, [r7, #24]
  return(result);
 800857a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857c:	2484      	movs	r4, #132	; 0x84
 800857e:	193a      	adds	r2, r7, r4
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	2301      	movs	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f383 8810 	msr	PRIMASK, r3
}
 800858c:	46c0      	nop			; (mov r8, r8)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2101      	movs	r1, #1
 800859a:	438a      	bics	r2, r1
 800859c:	609a      	str	r2, [r3, #8]
 800859e:	193b      	adds	r3, r7, r4
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	f383 8810 	msr	PRIMASK, r3
}
 80085aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085be:	f3ef 8310 	mrs	r3, PRIMASK
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c6:	2480      	movs	r4, #128	; 0x80
 80085c8:	193a      	adds	r2, r7, r4
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	2301      	movs	r3, #1
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	f383 8810 	msr	PRIMASK, r3
}
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2110      	movs	r1, #16
 80085e4:	438a      	bics	r2, r1
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	193b      	adds	r3, r7, r4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	f383 8810 	msr	PRIMASK, r3
}
 80085f4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085f6:	183b      	adds	r3, r7, r0
 80085f8:	881a      	ldrh	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	0011      	movs	r1, r2
 80085fe:	0018      	movs	r0, r3
 8008600:	f000 f860 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008604:	e044      	b.n	8008690 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008606:	23a4      	movs	r3, #164	; 0xa4
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	035b      	lsls	r3, r3, #13
 8008610:	4013      	ands	r3, r2
 8008612:	d010      	beq.n	8008636 <HAL_UART_IRQHandler+0x546>
 8008614:	239c      	movs	r3, #156	; 0x9c
 8008616:	18fb      	adds	r3, r7, r3
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	2380      	movs	r3, #128	; 0x80
 800861c:	03db      	lsls	r3, r3, #15
 800861e:	4013      	ands	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2280      	movs	r2, #128	; 0x80
 8008628:	0352      	lsls	r2, r2, #13
 800862a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	0018      	movs	r0, r3
 8008630:	f000 ff8e 	bl	8009550 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008634:	e02f      	b.n	8008696 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008636:	23a4      	movs	r3, #164	; 0xa4
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2280      	movs	r2, #128	; 0x80
 800863e:	4013      	ands	r3, r2
 8008640:	d00f      	beq.n	8008662 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008642:	23a0      	movs	r3, #160	; 0xa0
 8008644:	18fb      	adds	r3, r7, r3
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2280      	movs	r2, #128	; 0x80
 800864a:	4013      	ands	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01e      	beq.n	8008694 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	0010      	movs	r0, r2
 800865e:	4798      	blx	r3
    }
    return;
 8008660:	e018      	b.n	8008694 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008662:	23a4      	movs	r3, #164	; 0xa4
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2240      	movs	r2, #64	; 0x40
 800866a:	4013      	ands	r3, r2
 800866c:	d013      	beq.n	8008696 <HAL_UART_IRQHandler+0x5a6>
 800866e:	23a0      	movs	r3, #160	; 0xa0
 8008670:	18fb      	adds	r3, r7, r3
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2240      	movs	r2, #64	; 0x40
 8008676:	4013      	ands	r3, r2
 8008678:	d00d      	beq.n	8008696 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	0018      	movs	r0, r3
 800867e:	f000 fdd4 	bl	800922a <UART_EndTransmit_IT>
    return;
 8008682:	e008      	b.n	8008696 <HAL_UART_IRQHandler+0x5a6>
      return;
 8008684:	46c0      	nop			; (mov r8, r8)
 8008686:	e006      	b.n	8008696 <HAL_UART_IRQHandler+0x5a6>
    return;
 8008688:	46c0      	nop			; (mov r8, r8)
 800868a:	e004      	b.n	8008696 <HAL_UART_IRQHandler+0x5a6>
      return;
 800868c:	46c0      	nop			; (mov r8, r8)
 800868e:	e002      	b.n	8008696 <HAL_UART_IRQHandler+0x5a6>
      return;
 8008690:	46c0      	nop			; (mov r8, r8)
 8008692:	e000      	b.n	8008696 <HAL_UART_IRQHandler+0x5a6>
    return;
 8008694:	46c0      	nop			; (mov r8, r8)
  }

}
 8008696:	46bd      	mov	sp, r7
 8008698:	b02b      	add	sp, #172	; 0xac
 800869a:	bd90      	pop	{r4, r7, pc}
 800869c:	fffffeff 	.word	0xfffffeff
 80086a0:	fffffedf 	.word	0xfffffedf

080086a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086ac:	46c0      	nop			; (mov r8, r8)
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b002      	add	sp, #8
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086bc:	46c0      	nop			; (mov r8, r8)
 80086be:	46bd      	mov	sp, r7
 80086c0:	b002      	add	sp, #8
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	000a      	movs	r2, r1
 80086ce:	1cbb      	adds	r3, r7, #2
 80086d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b002      	add	sp, #8
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086dc:	b5b0      	push	{r4, r5, r7, lr}
 80086de:	b08e      	sub	sp, #56	; 0x38
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086e4:	231a      	movs	r3, #26
 80086e6:	2218      	movs	r2, #24
 80086e8:	4694      	mov	ip, r2
 80086ea:	44bc      	add	ip, r7
 80086ec:	4463      	add	r3, ip
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	431a      	orrs	r2, r3
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	4313      	orrs	r3, r2
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4ab0      	ldr	r2, [pc, #704]	; (80089d4 <UART_SetConfig+0x2f8>)
 8008712:	4013      	ands	r3, r2
 8008714:	0019      	movs	r1, r3
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800871c:	430a      	orrs	r2, r1
 800871e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	4aac      	ldr	r2, [pc, #688]	; (80089d8 <UART_SetConfig+0x2fc>)
 8008728:	4013      	ands	r3, r2
 800872a:	0019      	movs	r1, r3
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4aa6      	ldr	r2, [pc, #664]	; (80089dc <UART_SetConfig+0x300>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d004      	beq.n	8008752 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800874e:	4313      	orrs	r3, r2
 8008750:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4aa1      	ldr	r2, [pc, #644]	; (80089e0 <UART_SetConfig+0x304>)
 800875a:	4013      	ands	r3, r2
 800875c:	0019      	movs	r1, r3
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008764:	430a      	orrs	r2, r1
 8008766:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a9d      	ldr	r2, [pc, #628]	; (80089e4 <UART_SetConfig+0x308>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d136      	bne.n	80087e0 <UART_SetConfig+0x104>
 8008772:	4b9d      	ldr	r3, [pc, #628]	; (80089e8 <UART_SetConfig+0x30c>)
 8008774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008776:	2203      	movs	r2, #3
 8008778:	4013      	ands	r3, r2
 800877a:	2b03      	cmp	r3, #3
 800877c:	d020      	beq.n	80087c0 <UART_SetConfig+0xe4>
 800877e:	d827      	bhi.n	80087d0 <UART_SetConfig+0xf4>
 8008780:	2b02      	cmp	r3, #2
 8008782:	d00d      	beq.n	80087a0 <UART_SetConfig+0xc4>
 8008784:	d824      	bhi.n	80087d0 <UART_SetConfig+0xf4>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <UART_SetConfig+0xb4>
 800878a:	2b01      	cmp	r3, #1
 800878c:	d010      	beq.n	80087b0 <UART_SetConfig+0xd4>
 800878e:	e01f      	b.n	80087d0 <UART_SetConfig+0xf4>
 8008790:	231b      	movs	r3, #27
 8008792:	2218      	movs	r2, #24
 8008794:	4694      	mov	ip, r2
 8008796:	44bc      	add	ip, r7
 8008798:	4463      	add	r3, ip
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e0c5      	b.n	800892c <UART_SetConfig+0x250>
 80087a0:	231b      	movs	r3, #27
 80087a2:	2218      	movs	r2, #24
 80087a4:	4694      	mov	ip, r2
 80087a6:	44bc      	add	ip, r7
 80087a8:	4463      	add	r3, ip
 80087aa:	2202      	movs	r2, #2
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	e0bd      	b.n	800892c <UART_SetConfig+0x250>
 80087b0:	231b      	movs	r3, #27
 80087b2:	2218      	movs	r2, #24
 80087b4:	4694      	mov	ip, r2
 80087b6:	44bc      	add	ip, r7
 80087b8:	4463      	add	r3, ip
 80087ba:	2204      	movs	r2, #4
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e0b5      	b.n	800892c <UART_SetConfig+0x250>
 80087c0:	231b      	movs	r3, #27
 80087c2:	2218      	movs	r2, #24
 80087c4:	4694      	mov	ip, r2
 80087c6:	44bc      	add	ip, r7
 80087c8:	4463      	add	r3, ip
 80087ca:	2208      	movs	r2, #8
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	e0ad      	b.n	800892c <UART_SetConfig+0x250>
 80087d0:	231b      	movs	r3, #27
 80087d2:	2218      	movs	r2, #24
 80087d4:	4694      	mov	ip, r2
 80087d6:	44bc      	add	ip, r7
 80087d8:	4463      	add	r3, ip
 80087da:	2210      	movs	r2, #16
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	e0a5      	b.n	800892c <UART_SetConfig+0x250>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a81      	ldr	r2, [pc, #516]	; (80089ec <UART_SetConfig+0x310>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d136      	bne.n	8008858 <UART_SetConfig+0x17c>
 80087ea:	4b7f      	ldr	r3, [pc, #508]	; (80089e8 <UART_SetConfig+0x30c>)
 80087ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ee:	220c      	movs	r2, #12
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d020      	beq.n	8008838 <UART_SetConfig+0x15c>
 80087f6:	d827      	bhi.n	8008848 <UART_SetConfig+0x16c>
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d00d      	beq.n	8008818 <UART_SetConfig+0x13c>
 80087fc:	d824      	bhi.n	8008848 <UART_SetConfig+0x16c>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <UART_SetConfig+0x12c>
 8008802:	2b04      	cmp	r3, #4
 8008804:	d010      	beq.n	8008828 <UART_SetConfig+0x14c>
 8008806:	e01f      	b.n	8008848 <UART_SetConfig+0x16c>
 8008808:	231b      	movs	r3, #27
 800880a:	2218      	movs	r2, #24
 800880c:	4694      	mov	ip, r2
 800880e:	44bc      	add	ip, r7
 8008810:	4463      	add	r3, ip
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e089      	b.n	800892c <UART_SetConfig+0x250>
 8008818:	231b      	movs	r3, #27
 800881a:	2218      	movs	r2, #24
 800881c:	4694      	mov	ip, r2
 800881e:	44bc      	add	ip, r7
 8008820:	4463      	add	r3, ip
 8008822:	2202      	movs	r2, #2
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e081      	b.n	800892c <UART_SetConfig+0x250>
 8008828:	231b      	movs	r3, #27
 800882a:	2218      	movs	r2, #24
 800882c:	4694      	mov	ip, r2
 800882e:	44bc      	add	ip, r7
 8008830:	4463      	add	r3, ip
 8008832:	2204      	movs	r2, #4
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e079      	b.n	800892c <UART_SetConfig+0x250>
 8008838:	231b      	movs	r3, #27
 800883a:	2218      	movs	r2, #24
 800883c:	4694      	mov	ip, r2
 800883e:	44bc      	add	ip, r7
 8008840:	4463      	add	r3, ip
 8008842:	2208      	movs	r2, #8
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	e071      	b.n	800892c <UART_SetConfig+0x250>
 8008848:	231b      	movs	r3, #27
 800884a:	2218      	movs	r2, #24
 800884c:	4694      	mov	ip, r2
 800884e:	44bc      	add	ip, r7
 8008850:	4463      	add	r3, ip
 8008852:	2210      	movs	r2, #16
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	e069      	b.n	800892c <UART_SetConfig+0x250>
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a64      	ldr	r2, [pc, #400]	; (80089f0 <UART_SetConfig+0x314>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d107      	bne.n	8008872 <UART_SetConfig+0x196>
 8008862:	231b      	movs	r3, #27
 8008864:	2218      	movs	r2, #24
 8008866:	4694      	mov	ip, r2
 8008868:	44bc      	add	ip, r7
 800886a:	4463      	add	r3, ip
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e05c      	b.n	800892c <UART_SetConfig+0x250>
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a5f      	ldr	r2, [pc, #380]	; (80089f4 <UART_SetConfig+0x318>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d107      	bne.n	800888c <UART_SetConfig+0x1b0>
 800887c:	231b      	movs	r3, #27
 800887e:	2218      	movs	r2, #24
 8008880:	4694      	mov	ip, r2
 8008882:	44bc      	add	ip, r7
 8008884:	4463      	add	r3, ip
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
 800888a:	e04f      	b.n	800892c <UART_SetConfig+0x250>
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a52      	ldr	r2, [pc, #328]	; (80089dc <UART_SetConfig+0x300>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d143      	bne.n	800891e <UART_SetConfig+0x242>
 8008896:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <UART_SetConfig+0x30c>)
 8008898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800889a:	23c0      	movs	r3, #192	; 0xc0
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	4013      	ands	r3, r2
 80088a0:	22c0      	movs	r2, #192	; 0xc0
 80088a2:	0112      	lsls	r2, r2, #4
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02a      	beq.n	80088fe <UART_SetConfig+0x222>
 80088a8:	22c0      	movs	r2, #192	; 0xc0
 80088aa:	0112      	lsls	r2, r2, #4
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d82e      	bhi.n	800890e <UART_SetConfig+0x232>
 80088b0:	2280      	movs	r2, #128	; 0x80
 80088b2:	0112      	lsls	r2, r2, #4
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d012      	beq.n	80088de <UART_SetConfig+0x202>
 80088b8:	2280      	movs	r2, #128	; 0x80
 80088ba:	0112      	lsls	r2, r2, #4
 80088bc:	4293      	cmp	r3, r2
 80088be:	d826      	bhi.n	800890e <UART_SetConfig+0x232>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <UART_SetConfig+0x1f2>
 80088c4:	2280      	movs	r2, #128	; 0x80
 80088c6:	00d2      	lsls	r2, r2, #3
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d010      	beq.n	80088ee <UART_SetConfig+0x212>
 80088cc:	e01f      	b.n	800890e <UART_SetConfig+0x232>
 80088ce:	231b      	movs	r3, #27
 80088d0:	2218      	movs	r2, #24
 80088d2:	4694      	mov	ip, r2
 80088d4:	44bc      	add	ip, r7
 80088d6:	4463      	add	r3, ip
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
 80088dc:	e026      	b.n	800892c <UART_SetConfig+0x250>
 80088de:	231b      	movs	r3, #27
 80088e0:	2218      	movs	r2, #24
 80088e2:	4694      	mov	ip, r2
 80088e4:	44bc      	add	ip, r7
 80088e6:	4463      	add	r3, ip
 80088e8:	2202      	movs	r2, #2
 80088ea:	701a      	strb	r2, [r3, #0]
 80088ec:	e01e      	b.n	800892c <UART_SetConfig+0x250>
 80088ee:	231b      	movs	r3, #27
 80088f0:	2218      	movs	r2, #24
 80088f2:	4694      	mov	ip, r2
 80088f4:	44bc      	add	ip, r7
 80088f6:	4463      	add	r3, ip
 80088f8:	2204      	movs	r2, #4
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e016      	b.n	800892c <UART_SetConfig+0x250>
 80088fe:	231b      	movs	r3, #27
 8008900:	2218      	movs	r2, #24
 8008902:	4694      	mov	ip, r2
 8008904:	44bc      	add	ip, r7
 8008906:	4463      	add	r3, ip
 8008908:	2208      	movs	r2, #8
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	e00e      	b.n	800892c <UART_SetConfig+0x250>
 800890e:	231b      	movs	r3, #27
 8008910:	2218      	movs	r2, #24
 8008912:	4694      	mov	ip, r2
 8008914:	44bc      	add	ip, r7
 8008916:	4463      	add	r3, ip
 8008918:	2210      	movs	r2, #16
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e006      	b.n	800892c <UART_SetConfig+0x250>
 800891e:	231b      	movs	r3, #27
 8008920:	2218      	movs	r2, #24
 8008922:	4694      	mov	ip, r2
 8008924:	44bc      	add	ip, r7
 8008926:	4463      	add	r3, ip
 8008928:	2210      	movs	r2, #16
 800892a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a2a      	ldr	r2, [pc, #168]	; (80089dc <UART_SetConfig+0x300>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d000      	beq.n	8008938 <UART_SetConfig+0x25c>
 8008936:	e09e      	b.n	8008a76 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008938:	231b      	movs	r3, #27
 800893a:	2218      	movs	r2, #24
 800893c:	4694      	mov	ip, r2
 800893e:	44bc      	add	ip, r7
 8008940:	4463      	add	r3, ip
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d01d      	beq.n	8008984 <UART_SetConfig+0x2a8>
 8008948:	dc20      	bgt.n	800898c <UART_SetConfig+0x2b0>
 800894a:	2b04      	cmp	r3, #4
 800894c:	d015      	beq.n	800897a <UART_SetConfig+0x29e>
 800894e:	dc1d      	bgt.n	800898c <UART_SetConfig+0x2b0>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <UART_SetConfig+0x27e>
 8008954:	2b02      	cmp	r3, #2
 8008956:	d005      	beq.n	8008964 <UART_SetConfig+0x288>
 8008958:	e018      	b.n	800898c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800895a:	f7fe fa49 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 800895e:	0003      	movs	r3, r0
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008962:	e01d      	b.n	80089a0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008964:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <UART_SetConfig+0x30c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2210      	movs	r2, #16
 800896a:	4013      	ands	r3, r2
 800896c:	d002      	beq.n	8008974 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800896e:	4b22      	ldr	r3, [pc, #136]	; (80089f8 <UART_SetConfig+0x31c>)
 8008970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008972:	e015      	b.n	80089a0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <UART_SetConfig+0x320>)
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008978:	e012      	b.n	80089a0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fe f989 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 800897e:	0003      	movs	r3, r0
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008982:	e00d      	b.n	80089a0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800898a:	e009      	b.n	80089a0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008990:	231a      	movs	r3, #26
 8008992:	2218      	movs	r2, #24
 8008994:	4694      	mov	ip, r2
 8008996:	44bc      	add	ip, r7
 8008998:	4463      	add	r3, ip
 800899a:	2201      	movs	r2, #1
 800899c:	701a      	strb	r2, [r3, #0]
        break;
 800899e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d100      	bne.n	80089a8 <UART_SetConfig+0x2cc>
 80089a6:	e13c      	b.n	8008c22 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	0013      	movs	r3, r2
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	189b      	adds	r3, r3, r2
 80089b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d305      	bcc.n	80089c4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d91d      	bls.n	8008a00 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80089c4:	231a      	movs	r3, #26
 80089c6:	2218      	movs	r2, #24
 80089c8:	4694      	mov	ip, r2
 80089ca:	44bc      	add	ip, r7
 80089cc:	4463      	add	r3, ip
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e126      	b.n	8008c22 <UART_SetConfig+0x546>
 80089d4:	efff69f3 	.word	0xefff69f3
 80089d8:	ffffcfff 	.word	0xffffcfff
 80089dc:	40004800 	.word	0x40004800
 80089e0:	fffff4ff 	.word	0xfffff4ff
 80089e4:	40013800 	.word	0x40013800
 80089e8:	40021000 	.word	0x40021000
 80089ec:	40004400 	.word	0x40004400
 80089f0:	40004c00 	.word	0x40004c00
 80089f4:	40005000 	.word	0x40005000
 80089f8:	003d0900 	.word	0x003d0900
 80089fc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	6939      	ldr	r1, [r7, #16]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	000b      	movs	r3, r1
 8008a0e:	0e1b      	lsrs	r3, r3, #24
 8008a10:	0010      	movs	r0, r2
 8008a12:	0205      	lsls	r5, r0, #8
 8008a14:	431d      	orrs	r5, r3
 8008a16:	000b      	movs	r3, r1
 8008a18:	021c      	lsls	r4, r3, #8
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
 8008a26:	68b8      	ldr	r0, [r7, #8]
 8008a28:	68f9      	ldr	r1, [r7, #12]
 8008a2a:	1900      	adds	r0, r0, r4
 8008a2c:	4169      	adcs	r1, r5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f7f7 fc38 	bl	80002b0 <__aeabi_uldivmod>
 8008a40:	0002      	movs	r2, r0
 8008a42:	000b      	movs	r3, r1
 8008a44:	0013      	movs	r3, r2
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4a:	23c0      	movs	r3, #192	; 0xc0
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d309      	bcc.n	8008a66 <UART_SetConfig+0x38a>
 8008a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	035b      	lsls	r3, r3, #13
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d204      	bcs.n	8008a66 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e0dd      	b.n	8008c22 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8008a66:	231a      	movs	r3, #26
 8008a68:	2218      	movs	r2, #24
 8008a6a:	4694      	mov	ip, r2
 8008a6c:	44bc      	add	ip, r7
 8008a6e:	4463      	add	r3, ip
 8008a70:	2201      	movs	r2, #1
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	e0d5      	b.n	8008c22 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	69da      	ldr	r2, [r3, #28]
 8008a7a:	2380      	movs	r3, #128	; 0x80
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d000      	beq.n	8008a84 <UART_SetConfig+0x3a8>
 8008a82:	e074      	b.n	8008b6e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8008a84:	231b      	movs	r3, #27
 8008a86:	2218      	movs	r2, #24
 8008a88:	4694      	mov	ip, r2
 8008a8a:	44bc      	add	ip, r7
 8008a8c:	4463      	add	r3, ip
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d822      	bhi.n	8008ada <UART_SetConfig+0x3fe>
 8008a94:	009a      	lsls	r2, r3, #2
 8008a96:	4b6b      	ldr	r3, [pc, #428]	; (8008c44 <UART_SetConfig+0x568>)
 8008a98:	18d3      	adds	r3, r2, r3
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a9e:	f7fe f9a7 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aa6:	e022      	b.n	8008aee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aa8:	f7fe f9b8 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 8008aac:	0003      	movs	r3, r0
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ab0:	e01d      	b.n	8008aee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab2:	4b65      	ldr	r3, [pc, #404]	; (8008c48 <UART_SetConfig+0x56c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d002      	beq.n	8008ac2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008abc:	4b63      	ldr	r3, [pc, #396]	; (8008c4c <UART_SetConfig+0x570>)
 8008abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac0:	e015      	b.n	8008aee <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8008ac2:	4b63      	ldr	r3, [pc, #396]	; (8008c50 <UART_SetConfig+0x574>)
 8008ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ac6:	e012      	b.n	8008aee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ac8:	f7fe f8e2 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 8008acc:	0003      	movs	r3, r0
 8008ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ad0:	e00d      	b.n	8008aee <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ad8:	e009      	b.n	8008aee <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ade:	231a      	movs	r3, #26
 8008ae0:	2218      	movs	r2, #24
 8008ae2:	4694      	mov	ip, r2
 8008ae4:	44bc      	add	ip, r7
 8008ae6:	4463      	add	r3, ip
 8008ae8:	2201      	movs	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
        break;
 8008aec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d100      	bne.n	8008af6 <UART_SetConfig+0x41a>
 8008af4:	e095      	b.n	8008c22 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	005a      	lsls	r2, r3, #1
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	18d2      	adds	r2, r2, r3
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	0019      	movs	r1, r3
 8008b08:	0010      	movs	r0, r2
 8008b0a:	f7f7 fb07 	bl	800011c <__udivsi3>
 8008b0e:	0003      	movs	r3, r0
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	2b0f      	cmp	r3, #15
 8008b18:	d921      	bls.n	8008b5e <UART_SetConfig+0x482>
 8008b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1c:	2380      	movs	r3, #128	; 0x80
 8008b1e:	025b      	lsls	r3, r3, #9
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d21c      	bcs.n	8008b5e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	200e      	movs	r0, #14
 8008b2a:	2418      	movs	r4, #24
 8008b2c:	193b      	adds	r3, r7, r4
 8008b2e:	181b      	adds	r3, r3, r0
 8008b30:	210f      	movs	r1, #15
 8008b32:	438a      	bics	r2, r1
 8008b34:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	085b      	lsrs	r3, r3, #1
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	2207      	movs	r2, #7
 8008b3e:	4013      	ands	r3, r2
 8008b40:	b299      	uxth	r1, r3
 8008b42:	193b      	adds	r3, r7, r4
 8008b44:	181b      	adds	r3, r3, r0
 8008b46:	193a      	adds	r2, r7, r4
 8008b48:	1812      	adds	r2, r2, r0
 8008b4a:	8812      	ldrh	r2, [r2, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	193a      	adds	r2, r7, r4
 8008b56:	1812      	adds	r2, r2, r0
 8008b58:	8812      	ldrh	r2, [r2, #0]
 8008b5a:	60da      	str	r2, [r3, #12]
 8008b5c:	e061      	b.n	8008c22 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008b5e:	231a      	movs	r3, #26
 8008b60:	2218      	movs	r2, #24
 8008b62:	4694      	mov	ip, r2
 8008b64:	44bc      	add	ip, r7
 8008b66:	4463      	add	r3, ip
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	e059      	b.n	8008c22 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b6e:	231b      	movs	r3, #27
 8008b70:	2218      	movs	r2, #24
 8008b72:	4694      	mov	ip, r2
 8008b74:	44bc      	add	ip, r7
 8008b76:	4463      	add	r3, ip
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d822      	bhi.n	8008bc4 <UART_SetConfig+0x4e8>
 8008b7e:	009a      	lsls	r2, r3, #2
 8008b80:	4b34      	ldr	r3, [pc, #208]	; (8008c54 <UART_SetConfig+0x578>)
 8008b82:	18d3      	adds	r3, r2, r3
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b88:	f7fe f932 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 8008b8c:	0003      	movs	r3, r0
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b90:	e022      	b.n	8008bd8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b92:	f7fe f943 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 8008b96:	0003      	movs	r3, r0
 8008b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b9a:	e01d      	b.n	8008bd8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b9c:	4b2a      	ldr	r3, [pc, #168]	; (8008c48 <UART_SetConfig+0x56c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2210      	movs	r2, #16
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	d002      	beq.n	8008bac <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008ba6:	4b29      	ldr	r3, [pc, #164]	; (8008c4c <UART_SetConfig+0x570>)
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008baa:	e015      	b.n	8008bd8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8008bac:	4b28      	ldr	r3, [pc, #160]	; (8008c50 <UART_SetConfig+0x574>)
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bb0:	e012      	b.n	8008bd8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb2:	f7fe f86d 	bl	8006c90 <HAL_RCC_GetSysClockFreq>
 8008bb6:	0003      	movs	r3, r0
 8008bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bba:	e00d      	b.n	8008bd8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bbc:	2380      	movs	r3, #128	; 0x80
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bc2:	e009      	b.n	8008bd8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008bc8:	231a      	movs	r3, #26
 8008bca:	2218      	movs	r2, #24
 8008bcc:	4694      	mov	ip, r2
 8008bce:	44bc      	add	ip, r7
 8008bd0:	4463      	add	r3, ip
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	701a      	strb	r2, [r3, #0]
        break;
 8008bd6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d021      	beq.n	8008c22 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	085a      	lsrs	r2, r3, #1
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	18d2      	adds	r2, r2, r3
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	0019      	movs	r1, r3
 8008bee:	0010      	movs	r0, r2
 8008bf0:	f7f7 fa94 	bl	800011c <__udivsi3>
 8008bf4:	0003      	movs	r3, r0
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2b0f      	cmp	r3, #15
 8008bfe:	d909      	bls.n	8008c14 <UART_SetConfig+0x538>
 8008c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c02:	2380      	movs	r3, #128	; 0x80
 8008c04:	025b      	lsls	r3, r3, #9
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d204      	bcs.n	8008c14 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e006      	b.n	8008c22 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008c14:	231a      	movs	r3, #26
 8008c16:	2218      	movs	r2, #24
 8008c18:	4694      	mov	ip, r2
 8008c1a:	44bc      	add	ip, r7
 8008c1c:	4463      	add	r3, ip
 8008c1e:	2201      	movs	r2, #1
 8008c20:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	2200      	movs	r2, #0
 8008c26:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c2e:	231a      	movs	r3, #26
 8008c30:	2218      	movs	r2, #24
 8008c32:	4694      	mov	ip, r2
 8008c34:	44bc      	add	ip, r7
 8008c36:	4463      	add	r3, ip
 8008c38:	781b      	ldrb	r3, [r3, #0]
}
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b00e      	add	sp, #56	; 0x38
 8008c40:	bdb0      	pop	{r4, r5, r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	0800afa0 	.word	0x0800afa0
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	003d0900 	.word	0x003d0900
 8008c50:	00f42400 	.word	0x00f42400
 8008c54:	0800afc4 	.word	0x0800afc4

08008c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2201      	movs	r2, #1
 8008c66:	4013      	ands	r3, r2
 8008c68:	d00b      	beq.n	8008c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4a4a      	ldr	r2, [pc, #296]	; (8008d9c <UART_AdvFeatureConfig+0x144>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	0019      	movs	r1, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2202      	movs	r2, #2
 8008c88:	4013      	ands	r3, r2
 8008c8a:	d00b      	beq.n	8008ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	4a43      	ldr	r2, [pc, #268]	; (8008da0 <UART_AdvFeatureConfig+0x148>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	0019      	movs	r1, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2204      	movs	r2, #4
 8008caa:	4013      	ands	r3, r2
 8008cac:	d00b      	beq.n	8008cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a3b      	ldr	r2, [pc, #236]	; (8008da4 <UART_AdvFeatureConfig+0x14c>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	0019      	movs	r1, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	2208      	movs	r2, #8
 8008ccc:	4013      	ands	r3, r2
 8008cce:	d00b      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	4a34      	ldr	r2, [pc, #208]	; (8008da8 <UART_AdvFeatureConfig+0x150>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	0019      	movs	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2210      	movs	r2, #16
 8008cee:	4013      	ands	r3, r2
 8008cf0:	d00b      	beq.n	8008d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	; (8008dac <UART_AdvFeatureConfig+0x154>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	0019      	movs	r1, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	2220      	movs	r2, #32
 8008d10:	4013      	ands	r3, r2
 8008d12:	d00b      	beq.n	8008d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <UART_AdvFeatureConfig+0x158>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	0019      	movs	r1, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2240      	movs	r2, #64	; 0x40
 8008d32:	4013      	ands	r3, r2
 8008d34:	d01d      	beq.n	8008d72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a1d      	ldr	r2, [pc, #116]	; (8008db4 <UART_AdvFeatureConfig+0x15c>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	0019      	movs	r1, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d52:	2380      	movs	r3, #128	; 0x80
 8008d54:	035b      	lsls	r3, r3, #13
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d10b      	bne.n	8008d72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4a15      	ldr	r2, [pc, #84]	; (8008db8 <UART_AdvFeatureConfig+0x160>)
 8008d62:	4013      	ands	r3, r2
 8008d64:	0019      	movs	r1, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2280      	movs	r2, #128	; 0x80
 8008d78:	4013      	ands	r3, r2
 8008d7a:	d00b      	beq.n	8008d94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	4a0e      	ldr	r2, [pc, #56]	; (8008dbc <UART_AdvFeatureConfig+0x164>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	0019      	movs	r1, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }
}
 8008d94:	46c0      	nop			; (mov r8, r8)
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	fffdffff 	.word	0xfffdffff
 8008da0:	fffeffff 	.word	0xfffeffff
 8008da4:	fffbffff 	.word	0xfffbffff
 8008da8:	ffff7fff 	.word	0xffff7fff
 8008dac:	ffffefff 	.word	0xffffefff
 8008db0:	ffffdfff 	.word	0xffffdfff
 8008db4:	ffefffff 	.word	0xffefffff
 8008db8:	ff9fffff 	.word	0xff9fffff
 8008dbc:	fff7ffff 	.word	0xfff7ffff

08008dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2280      	movs	r2, #128	; 0x80
 8008dcc:	2100      	movs	r1, #0
 8008dce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd0:	f7fb fefc 	bl	8004bcc <HAL_GetTick>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2208      	movs	r2, #8
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d10c      	bne.n	8008e00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2280      	movs	r2, #128	; 0x80
 8008dea:	0391      	lsls	r1, r2, #14
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <UART_CheckIdleState+0x8c>)
 8008df0:	9200      	str	r2, [sp, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f000 f82c 	bl	8008e50 <UART_WaitOnFlagUntilTimeout>
 8008df8:	1e03      	subs	r3, r0, #0
 8008dfa:	d001      	beq.n	8008e00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e021      	b.n	8008e44 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2204      	movs	r2, #4
 8008e08:	4013      	ands	r3, r2
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d10c      	bne.n	8008e28 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	03d1      	lsls	r1, r2, #15
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	4a0d      	ldr	r2, [pc, #52]	; (8008e4c <UART_CheckIdleState+0x8c>)
 8008e18:	9200      	str	r2, [sp, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f000 f818 	bl	8008e50 <UART_WaitOnFlagUntilTimeout>
 8008e20:	1e03      	subs	r3, r0, #0
 8008e22:	d001      	beq.n	8008e28 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e00d      	b.n	8008e44 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2274      	movs	r2, #116	; 0x74
 8008e3e:	2100      	movs	r1, #0
 8008e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	0018      	movs	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	b004      	add	sp, #16
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	01ffffff 	.word	0x01ffffff

08008e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b094      	sub	sp, #80	; 0x50
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	1dfb      	adds	r3, r7, #7
 8008e5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e60:	e0a3      	b.n	8008faa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e64:	3301      	adds	r3, #1
 8008e66:	d100      	bne.n	8008e6a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008e68:	e09f      	b.n	8008faa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6a:	f7fb feaf 	bl	8004bcc <HAL_GetTick>
 8008e6e:	0002      	movs	r2, r0
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d302      	bcc.n	8008e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d13d      	bne.n	8008efc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e80:	f3ef 8310 	mrs	r3, PRIMASK
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e88:	647b      	str	r3, [r7, #68]	; 0x44
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	f383 8810 	msr	PRIMASK, r3
}
 8008e94:	46c0      	nop			; (mov r8, r8)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	494c      	ldr	r1, [pc, #304]	; (8008fd4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008ea2:	400a      	ands	r2, r1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	f383 8810 	msr	PRIMASK, r3
}
 8008eb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eba:	643b      	str	r3, [r7, #64]	; 0x40
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	f383 8810 	msr	PRIMASK, r3
}
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	438a      	bics	r2, r1
 8008ed6:	609a      	str	r2, [r3, #8]
 8008ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ede:	f383 8810 	msr	PRIMASK, r3
}
 8008ee2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2220      	movs	r2, #32
 8008eee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2274      	movs	r2, #116	; 0x74
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e067      	b.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2204      	movs	r2, #4
 8008f04:	4013      	ands	r3, r2
 8008f06:	d050      	beq.n	8008faa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69da      	ldr	r2, [r3, #28]
 8008f0e:	2380      	movs	r3, #128	; 0x80
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	401a      	ands	r2, r3
 8008f14:	2380      	movs	r3, #128	; 0x80
 8008f16:	011b      	lsls	r3, r3, #4
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d146      	bne.n	8008faa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2280      	movs	r2, #128	; 0x80
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f26:	f3ef 8310 	mrs	r3, PRIMASK
 8008f2a:	613b      	str	r3, [r7, #16]
  return(result);
 8008f2c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f30:	2301      	movs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f383 8810 	msr	PRIMASK, r3
}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4923      	ldr	r1, [pc, #140]	; (8008fd4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008f48:	400a      	ands	r2, r1
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	f383 8810 	msr	PRIMASK, r3
}
 8008f56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f58:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f5e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f62:	2301      	movs	r3, #1
 8008f64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	f383 8810 	msr	PRIMASK, r3
}
 8008f6c:	46c0      	nop			; (mov r8, r8)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2101      	movs	r1, #1
 8008f7a:	438a      	bics	r2, r1
 8008f7c:	609a      	str	r2, [r3, #8]
 8008f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	f383 8810 	msr	PRIMASK, r3
}
 8008f88:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2220      	movs	r2, #32
 8008f94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2280      	movs	r2, #128	; 0x80
 8008f9a:	2120      	movs	r1, #32
 8008f9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2274      	movs	r2, #116	; 0x74
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e010      	b.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	425a      	negs	r2, r3
 8008fba:	4153      	adcs	r3, r2
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	001a      	movs	r2, r3
 8008fc0:	1dfb      	adds	r3, r7, #7
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d100      	bne.n	8008fca <UART_WaitOnFlagUntilTimeout+0x17a>
 8008fc8:	e74b      	b.n	8008e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	0018      	movs	r0, r3
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	b014      	add	sp, #80	; 0x50
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	fffffe5f 	.word	0xfffffe5f

08008fd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08c      	sub	sp, #48	; 0x30
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	1dbb      	adds	r3, r7, #6
 8008fe4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	1dba      	adds	r2, r7, #6
 8008ff0:	2158      	movs	r1, #88	; 0x58
 8008ff2:	8812      	ldrh	r2, [r2, #0]
 8008ff4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	1dba      	adds	r2, r7, #6
 8008ffa:	215a      	movs	r1, #90	; 0x5a
 8008ffc:	8812      	ldrh	r2, [r2, #0]
 8008ffe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	2380      	movs	r3, #128	; 0x80
 800900c:	015b      	lsls	r3, r3, #5
 800900e:	429a      	cmp	r2, r3
 8009010:	d10d      	bne.n	800902e <UART_Start_Receive_IT+0x56>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <UART_Start_Receive_IT+0x4c>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	225c      	movs	r2, #92	; 0x5c
 800901e:	4943      	ldr	r1, [pc, #268]	; (800912c <UART_Start_Receive_IT+0x154>)
 8009020:	5299      	strh	r1, [r3, r2]
 8009022:	e02e      	b.n	8009082 <UART_Start_Receive_IT+0xaa>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	225c      	movs	r2, #92	; 0x5c
 8009028:	21ff      	movs	r1, #255	; 0xff
 800902a:	5299      	strh	r1, [r3, r2]
 800902c:	e029      	b.n	8009082 <UART_Start_Receive_IT+0xaa>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10d      	bne.n	8009052 <UART_Start_Receive_IT+0x7a>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <UART_Start_Receive_IT+0x70>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	225c      	movs	r2, #92	; 0x5c
 8009042:	21ff      	movs	r1, #255	; 0xff
 8009044:	5299      	strh	r1, [r3, r2]
 8009046:	e01c      	b.n	8009082 <UART_Start_Receive_IT+0xaa>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	225c      	movs	r2, #92	; 0x5c
 800904c:	217f      	movs	r1, #127	; 0x7f
 800904e:	5299      	strh	r1, [r3, r2]
 8009050:	e017      	b.n	8009082 <UART_Start_Receive_IT+0xaa>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	055b      	lsls	r3, r3, #21
 800905a:	429a      	cmp	r2, r3
 800905c:	d10d      	bne.n	800907a <UART_Start_Receive_IT+0xa2>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <UART_Start_Receive_IT+0x98>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	225c      	movs	r2, #92	; 0x5c
 800906a:	217f      	movs	r1, #127	; 0x7f
 800906c:	5299      	strh	r1, [r3, r2]
 800906e:	e008      	b.n	8009082 <UART_Start_Receive_IT+0xaa>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	225c      	movs	r2, #92	; 0x5c
 8009074:	213f      	movs	r1, #63	; 0x3f
 8009076:	5299      	strh	r1, [r3, r2]
 8009078:	e003      	b.n	8009082 <UART_Start_Receive_IT+0xaa>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	225c      	movs	r2, #92	; 0x5c
 800907e:	2100      	movs	r1, #0
 8009080:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2280      	movs	r2, #128	; 0x80
 8009086:	2100      	movs	r1, #0
 8009088:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2222      	movs	r2, #34	; 0x22
 800908e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009090:	f3ef 8310 	mrs	r3, PRIMASK
 8009094:	61fb      	str	r3, [r7, #28]
  return(result);
 8009096:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800909a:	2301      	movs	r3, #1
 800909c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	46c0      	nop			; (mov r8, r8)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2101      	movs	r1, #1
 80090b2:	430a      	orrs	r2, r1
 80090b4:	609a      	str	r2, [r3, #8]
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	f383 8810 	msr	PRIMASK, r3
}
 80090c0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	2380      	movs	r3, #128	; 0x80
 80090c8:	015b      	lsls	r3, r3, #5
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d107      	bne.n	80090de <UART_Start_Receive_IT+0x106>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d103      	bne.n	80090de <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4a15      	ldr	r2, [pc, #84]	; (8009130 <UART_Start_Receive_IT+0x158>)
 80090da:	665a      	str	r2, [r3, #100]	; 0x64
 80090dc:	e002      	b.n	80090e4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	4a14      	ldr	r2, [pc, #80]	; (8009134 <UART_Start_Receive_IT+0x15c>)
 80090e2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2274      	movs	r2, #116	; 0x74
 80090e8:	2100      	movs	r1, #0
 80090ea:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ec:	f3ef 8310 	mrs	r3, PRIMASK
 80090f0:	613b      	str	r3, [r7, #16]
  return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80090f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090f6:	2301      	movs	r3, #1
 80090f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f383 8810 	msr	PRIMASK, r3
}
 8009100:	46c0      	nop			; (mov r8, r8)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2190      	movs	r1, #144	; 0x90
 800910e:	0049      	lsls	r1, r1, #1
 8009110:	430a      	orrs	r2, r1
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f383 8810 	msr	PRIMASK, r3
}
 800911e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	0018      	movs	r0, r3
 8009124:	46bd      	mov	sp, r7
 8009126:	b00c      	add	sp, #48	; 0x30
 8009128:	bd80      	pop	{r7, pc}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	000001ff 	.word	0x000001ff
 8009130:	080093e9 	.word	0x080093e9
 8009134:	08009281 	.word	0x08009281

08009138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08e      	sub	sp, #56	; 0x38
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009140:	f3ef 8310 	mrs	r3, PRIMASK
 8009144:	617b      	str	r3, [r7, #20]
  return(result);
 8009146:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
 800914a:	2301      	movs	r3, #1
 800914c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	f383 8810 	msr	PRIMASK, r3
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4925      	ldr	r1, [pc, #148]	; (80091f8 <UART_EndRxTransfer+0xc0>)
 8009162:	400a      	ands	r2, r1
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f383 8810 	msr	PRIMASK, r3
}
 8009170:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009172:	f3ef 8310 	mrs	r3, PRIMASK
 8009176:	623b      	str	r3, [r7, #32]
  return(result);
 8009178:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	633b      	str	r3, [r7, #48]	; 0x30
 800917c:	2301      	movs	r3, #1
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	f383 8810 	msr	PRIMASK, r3
}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2101      	movs	r1, #1
 8009194:	438a      	bics	r2, r1
 8009196:	609a      	str	r2, [r3, #8]
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	f383 8810 	msr	PRIMASK, r3
}
 80091a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d118      	bne.n	80091de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ac:	f3ef 8310 	mrs	r3, PRIMASK
 80091b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80091b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b6:	2301      	movs	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f383 8810 	msr	PRIMASK, r3
}
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2110      	movs	r1, #16
 80091ce:	438a      	bics	r2, r1
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f383 8810 	msr	PRIMASK, r3
}
 80091dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80091f0:	46c0      	nop			; (mov r8, r8)
 80091f2:	46bd      	mov	sp, r7
 80091f4:	b00e      	add	sp, #56	; 0x38
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	fffffedf 	.word	0xfffffedf

080091fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	225a      	movs	r2, #90	; 0x5a
 800920e:	2100      	movs	r1, #0
 8009210:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2252      	movs	r2, #82	; 0x52
 8009216:	2100      	movs	r1, #0
 8009218:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff fa49 	bl	80086b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	46bd      	mov	sp, r7
 8009226:	b004      	add	sp, #16
 8009228:	bd80      	pop	{r7, pc}

0800922a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b086      	sub	sp, #24
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009232:	f3ef 8310 	mrs	r3, PRIMASK
 8009236:	60bb      	str	r3, [r7, #8]
  return(result);
 8009238:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	2301      	movs	r3, #1
 800923e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f383 8810 	msr	PRIMASK, r3
}
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2140      	movs	r1, #64	; 0x40
 8009254:	438a      	bics	r2, r1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f383 8810 	msr	PRIMASK, r3
}
 8009262:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	0018      	movs	r0, r3
 8009274:	f7ff fa16 	bl	80086a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009278:	46c0      	nop			; (mov r8, r8)
 800927a:	46bd      	mov	sp, r7
 800927c:	b006      	add	sp, #24
 800927e:	bd80      	pop	{r7, pc}

08009280 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b090      	sub	sp, #64	; 0x40
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009288:	203e      	movs	r0, #62	; 0x3e
 800928a:	183b      	adds	r3, r7, r0
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	215c      	movs	r1, #92	; 0x5c
 8009290:	5a52      	ldrh	r2, [r2, r1]
 8009292:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009298:	2b22      	cmp	r3, #34	; 0x22
 800929a:	d000      	beq.n	800929e <UART_RxISR_8BIT+0x1e>
 800929c:	e095      	b.n	80093ca <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092a4:	213c      	movs	r1, #60	; 0x3c
 80092a6:	187b      	adds	r3, r7, r1
 80092a8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092aa:	187b      	adds	r3, r7, r1
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	183b      	adds	r3, r7, r0
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b2d9      	uxtb	r1, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ba:	400a      	ands	r2, r1
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	225a      	movs	r2, #90	; 0x5a
 80092ce:	5a9b      	ldrh	r3, [r3, r2]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b299      	uxth	r1, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	225a      	movs	r2, #90	; 0x5a
 80092da:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	225a      	movs	r2, #90	; 0x5a
 80092e0:	5a9b      	ldrh	r3, [r3, r2]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d178      	bne.n	80093da <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e8:	f3ef 8310 	mrs	r3, PRIMASK
 80092ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80092ee:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f2:	2301      	movs	r3, #1
 80092f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	f383 8810 	msr	PRIMASK, r3
}
 80092fc:	46c0      	nop			; (mov r8, r8)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4936      	ldr	r1, [pc, #216]	; (80093e4 <UART_RxISR_8BIT+0x164>)
 800930a:	400a      	ands	r2, r1
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	f383 8810 	msr	PRIMASK, r3
}
 8009318:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800931a:	f3ef 8310 	mrs	r3, PRIMASK
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009322:	637b      	str	r3, [r7, #52]	; 0x34
 8009324:	2301      	movs	r3, #1
 8009326:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	f383 8810 	msr	PRIMASK, r3
}
 800932e:	46c0      	nop			; (mov r8, r8)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2101      	movs	r1, #1
 800933c:	438a      	bics	r2, r1
 800933e:	609a      	str	r2, [r3, #8]
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009346:	f383 8810 	msr	PRIMASK, r3
}
 800934a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935c:	2b01      	cmp	r3, #1
 800935e:	d12f      	bne.n	80093c0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009366:	f3ef 8310 	mrs	r3, PRIMASK
 800936a:	60fb      	str	r3, [r7, #12]
  return(result);
 800936c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936e:	633b      	str	r3, [r7, #48]	; 0x30
 8009370:	2301      	movs	r3, #1
 8009372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f383 8810 	msr	PRIMASK, r3
}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2110      	movs	r1, #16
 8009388:	438a      	bics	r2, r1
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f383 8810 	msr	PRIMASK, r3
}
 8009396:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	2210      	movs	r2, #16
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b10      	cmp	r3, #16
 80093a4:	d103      	bne.n	80093ae <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2210      	movs	r2, #16
 80093ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2258      	movs	r2, #88	; 0x58
 80093b2:	5a9a      	ldrh	r2, [r3, r2]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	0011      	movs	r1, r2
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7ff f983 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093be:	e00c      	b.n	80093da <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	0018      	movs	r0, r3
 80093c4:	f7fa f9d4 	bl	8003770 <HAL_UART_RxCpltCallback>
}
 80093c8:	e007      	b.n	80093da <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2108      	movs	r1, #8
 80093d6:	430a      	orrs	r2, r1
 80093d8:	619a      	str	r2, [r3, #24]
}
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	46bd      	mov	sp, r7
 80093de:	b010      	add	sp, #64	; 0x40
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	fffffedf 	.word	0xfffffedf

080093e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b090      	sub	sp, #64	; 0x40
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093f0:	203e      	movs	r0, #62	; 0x3e
 80093f2:	183b      	adds	r3, r7, r0
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	215c      	movs	r1, #92	; 0x5c
 80093f8:	5a52      	ldrh	r2, [r2, r1]
 80093fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009400:	2b22      	cmp	r3, #34	; 0x22
 8009402:	d000      	beq.n	8009406 <UART_RxISR_16BIT+0x1e>
 8009404:	e095      	b.n	8009532 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800940c:	213c      	movs	r1, #60	; 0x3c
 800940e:	187b      	adds	r3, r7, r1
 8009410:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8009418:	187b      	adds	r3, r7, r1
 800941a:	183a      	adds	r2, r7, r0
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	8812      	ldrh	r2, [r2, #0]
 8009420:	4013      	ands	r3, r2
 8009422:	b29a      	uxth	r2, r3
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	225a      	movs	r2, #90	; 0x5a
 8009436:	5a9b      	ldrh	r3, [r3, r2]
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b299      	uxth	r1, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	225a      	movs	r2, #90	; 0x5a
 8009442:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	225a      	movs	r2, #90	; 0x5a
 8009448:	5a9b      	ldrh	r3, [r3, r2]
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d178      	bne.n	8009542 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009450:	f3ef 8310 	mrs	r3, PRIMASK
 8009454:	617b      	str	r3, [r7, #20]
  return(result);
 8009456:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009458:	637b      	str	r3, [r7, #52]	; 0x34
 800945a:	2301      	movs	r3, #1
 800945c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	f383 8810 	msr	PRIMASK, r3
}
 8009464:	46c0      	nop			; (mov r8, r8)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4936      	ldr	r1, [pc, #216]	; (800954c <UART_RxISR_16BIT+0x164>)
 8009472:	400a      	ands	r2, r1
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009478:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	f383 8810 	msr	PRIMASK, r3
}
 8009480:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009482:	f3ef 8310 	mrs	r3, PRIMASK
 8009486:	623b      	str	r3, [r7, #32]
  return(result);
 8009488:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948a:	633b      	str	r3, [r7, #48]	; 0x30
 800948c:	2301      	movs	r3, #1
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	f383 8810 	msr	PRIMASK, r3
}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2101      	movs	r1, #1
 80094a4:	438a      	bics	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	f383 8810 	msr	PRIMASK, r3
}
 80094b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d12f      	bne.n	8009528 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ce:	f3ef 8310 	mrs	r3, PRIMASK
 80094d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80094d4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094d8:	2301      	movs	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f383 8810 	msr	PRIMASK, r3
}
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2110      	movs	r1, #16
 80094f0:	438a      	bics	r2, r1
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f383 8810 	msr	PRIMASK, r3
}
 80094fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	2210      	movs	r2, #16
 8009508:	4013      	ands	r3, r2
 800950a:	2b10      	cmp	r3, #16
 800950c:	d103      	bne.n	8009516 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2210      	movs	r2, #16
 8009514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2258      	movs	r2, #88	; 0x58
 800951a:	5a9a      	ldrh	r2, [r3, r2]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	0011      	movs	r1, r2
 8009520:	0018      	movs	r0, r3
 8009522:	f7ff f8cf 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009526:	e00c      	b.n	8009542 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	0018      	movs	r0, r3
 800952c:	f7fa f920 	bl	8003770 <HAL_UART_RxCpltCallback>
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2108      	movs	r1, #8
 800953e:	430a      	orrs	r2, r1
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b010      	add	sp, #64	; 0x40
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	fffffedf 	.word	0xfffffedf

08009550 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009558:	46c0      	nop			; (mov r8, r8)
 800955a:	46bd      	mov	sp, r7
 800955c:	b002      	add	sp, #8
 800955e:	bd80      	pop	{r7, pc}

08009560 <__errno>:
 8009560:	4b01      	ldr	r3, [pc, #4]	; (8009568 <__errno+0x8>)
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	4770      	bx	lr
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	20000010 	.word	0x20000010

0800956c <__libc_init_array>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	2600      	movs	r6, #0
 8009570:	4d0c      	ldr	r5, [pc, #48]	; (80095a4 <__libc_init_array+0x38>)
 8009572:	4c0d      	ldr	r4, [pc, #52]	; (80095a8 <__libc_init_array+0x3c>)
 8009574:	1b64      	subs	r4, r4, r5
 8009576:	10a4      	asrs	r4, r4, #2
 8009578:	42a6      	cmp	r6, r4
 800957a:	d109      	bne.n	8009590 <__libc_init_array+0x24>
 800957c:	2600      	movs	r6, #0
 800957e:	f001 fbd3 	bl	800ad28 <_init>
 8009582:	4d0a      	ldr	r5, [pc, #40]	; (80095ac <__libc_init_array+0x40>)
 8009584:	4c0a      	ldr	r4, [pc, #40]	; (80095b0 <__libc_init_array+0x44>)
 8009586:	1b64      	subs	r4, r4, r5
 8009588:	10a4      	asrs	r4, r4, #2
 800958a:	42a6      	cmp	r6, r4
 800958c:	d105      	bne.n	800959a <__libc_init_array+0x2e>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	00b3      	lsls	r3, r6, #2
 8009592:	58eb      	ldr	r3, [r5, r3]
 8009594:	4798      	blx	r3
 8009596:	3601      	adds	r6, #1
 8009598:	e7ee      	b.n	8009578 <__libc_init_array+0xc>
 800959a:	00b3      	lsls	r3, r6, #2
 800959c:	58eb      	ldr	r3, [r5, r3]
 800959e:	4798      	blx	r3
 80095a0:	3601      	adds	r6, #1
 80095a2:	e7f2      	b.n	800958a <__libc_init_array+0x1e>
 80095a4:	0800b068 	.word	0x0800b068
 80095a8:	0800b068 	.word	0x0800b068
 80095ac:	0800b068 	.word	0x0800b068
 80095b0:	0800b06c 	.word	0x0800b06c

080095b4 <memset>:
 80095b4:	0003      	movs	r3, r0
 80095b6:	1882      	adds	r2, r0, r2
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d100      	bne.n	80095be <memset+0xa>
 80095bc:	4770      	bx	lr
 80095be:	7019      	strb	r1, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	e7f9      	b.n	80095b8 <memset+0x4>

080095c4 <siprintf>:
 80095c4:	b40e      	push	{r1, r2, r3}
 80095c6:	b500      	push	{lr}
 80095c8:	490b      	ldr	r1, [pc, #44]	; (80095f8 <siprintf+0x34>)
 80095ca:	b09c      	sub	sp, #112	; 0x70
 80095cc:	ab1d      	add	r3, sp, #116	; 0x74
 80095ce:	9002      	str	r0, [sp, #8]
 80095d0:	9006      	str	r0, [sp, #24]
 80095d2:	9107      	str	r1, [sp, #28]
 80095d4:	9104      	str	r1, [sp, #16]
 80095d6:	4809      	ldr	r0, [pc, #36]	; (80095fc <siprintf+0x38>)
 80095d8:	4909      	ldr	r1, [pc, #36]	; (8009600 <siprintf+0x3c>)
 80095da:	cb04      	ldmia	r3!, {r2}
 80095dc:	9105      	str	r1, [sp, #20]
 80095de:	6800      	ldr	r0, [r0, #0]
 80095e0:	a902      	add	r1, sp, #8
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	f000 f882 	bl	80096ec <_svfiprintf_r>
 80095e8:	2300      	movs	r3, #0
 80095ea:	9a02      	ldr	r2, [sp, #8]
 80095ec:	7013      	strb	r3, [r2, #0]
 80095ee:	b01c      	add	sp, #112	; 0x70
 80095f0:	bc08      	pop	{r3}
 80095f2:	b003      	add	sp, #12
 80095f4:	4718      	bx	r3
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	7fffffff 	.word	0x7fffffff
 80095fc:	20000010 	.word	0x20000010
 8009600:	ffff0208 	.word	0xffff0208

08009604 <strncmp>:
 8009604:	b530      	push	{r4, r5, lr}
 8009606:	0005      	movs	r5, r0
 8009608:	1e10      	subs	r0, r2, #0
 800960a:	d00b      	beq.n	8009624 <strncmp+0x20>
 800960c:	2400      	movs	r4, #0
 800960e:	3a01      	subs	r2, #1
 8009610:	5d2b      	ldrb	r3, [r5, r4]
 8009612:	5d08      	ldrb	r0, [r1, r4]
 8009614:	4283      	cmp	r3, r0
 8009616:	d104      	bne.n	8009622 <strncmp+0x1e>
 8009618:	4294      	cmp	r4, r2
 800961a:	d002      	beq.n	8009622 <strncmp+0x1e>
 800961c:	3401      	adds	r4, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f6      	bne.n	8009610 <strncmp+0xc>
 8009622:	1a18      	subs	r0, r3, r0
 8009624:	bd30      	pop	{r4, r5, pc}
	...

08009628 <__ssputs_r>:
 8009628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962a:	688e      	ldr	r6, [r1, #8]
 800962c:	b085      	sub	sp, #20
 800962e:	0007      	movs	r7, r0
 8009630:	000c      	movs	r4, r1
 8009632:	9203      	str	r2, [sp, #12]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	429e      	cmp	r6, r3
 8009638:	d83c      	bhi.n	80096b4 <__ssputs_r+0x8c>
 800963a:	2390      	movs	r3, #144	; 0x90
 800963c:	898a      	ldrh	r2, [r1, #12]
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	421a      	tst	r2, r3
 8009642:	d034      	beq.n	80096ae <__ssputs_r+0x86>
 8009644:	2503      	movs	r5, #3
 8009646:	6909      	ldr	r1, [r1, #16]
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	1a5b      	subs	r3, r3, r1
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	9802      	ldr	r0, [sp, #8]
 8009652:	435d      	muls	r5, r3
 8009654:	0feb      	lsrs	r3, r5, #31
 8009656:	195d      	adds	r5, r3, r5
 8009658:	9b01      	ldr	r3, [sp, #4]
 800965a:	106d      	asrs	r5, r5, #1
 800965c:	3301      	adds	r3, #1
 800965e:	181b      	adds	r3, r3, r0
 8009660:	42ab      	cmp	r3, r5
 8009662:	d900      	bls.n	8009666 <__ssputs_r+0x3e>
 8009664:	001d      	movs	r5, r3
 8009666:	0553      	lsls	r3, r2, #21
 8009668:	d532      	bpl.n	80096d0 <__ssputs_r+0xa8>
 800966a:	0029      	movs	r1, r5
 800966c:	0038      	movs	r0, r7
 800966e:	f000 fb31 	bl	8009cd4 <_malloc_r>
 8009672:	1e06      	subs	r6, r0, #0
 8009674:	d109      	bne.n	800968a <__ssputs_r+0x62>
 8009676:	230c      	movs	r3, #12
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	2340      	movs	r3, #64	; 0x40
 800967c:	2001      	movs	r0, #1
 800967e:	89a2      	ldrh	r2, [r4, #12]
 8009680:	4240      	negs	r0, r0
 8009682:	4313      	orrs	r3, r2
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	b005      	add	sp, #20
 8009688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968a:	9a02      	ldr	r2, [sp, #8]
 800968c:	6921      	ldr	r1, [r4, #16]
 800968e:	f000 faba 	bl	8009c06 <memcpy>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	4a14      	ldr	r2, [pc, #80]	; (80096e8 <__ssputs_r+0xc0>)
 8009696:	401a      	ands	r2, r3
 8009698:	2380      	movs	r3, #128	; 0x80
 800969a:	4313      	orrs	r3, r2
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	6126      	str	r6, [r4, #16]
 80096a2:	18f6      	adds	r6, r6, r3
 80096a4:	6026      	str	r6, [r4, #0]
 80096a6:	6165      	str	r5, [r4, #20]
 80096a8:	9e01      	ldr	r6, [sp, #4]
 80096aa:	1aed      	subs	r5, r5, r3
 80096ac:	60a5      	str	r5, [r4, #8]
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	429e      	cmp	r6, r3
 80096b2:	d900      	bls.n	80096b6 <__ssputs_r+0x8e>
 80096b4:	9e01      	ldr	r6, [sp, #4]
 80096b6:	0032      	movs	r2, r6
 80096b8:	9903      	ldr	r1, [sp, #12]
 80096ba:	6820      	ldr	r0, [r4, #0]
 80096bc:	f000 faac 	bl	8009c18 <memmove>
 80096c0:	68a3      	ldr	r3, [r4, #8]
 80096c2:	2000      	movs	r0, #0
 80096c4:	1b9b      	subs	r3, r3, r6
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	199e      	adds	r6, r3, r6
 80096cc:	6026      	str	r6, [r4, #0]
 80096ce:	e7da      	b.n	8009686 <__ssputs_r+0x5e>
 80096d0:	002a      	movs	r2, r5
 80096d2:	0038      	movs	r0, r7
 80096d4:	f000 fb5c 	bl	8009d90 <_realloc_r>
 80096d8:	1e06      	subs	r6, r0, #0
 80096da:	d1e0      	bne.n	800969e <__ssputs_r+0x76>
 80096dc:	0038      	movs	r0, r7
 80096de:	6921      	ldr	r1, [r4, #16]
 80096e0:	f000 faae 	bl	8009c40 <_free_r>
 80096e4:	e7c7      	b.n	8009676 <__ssputs_r+0x4e>
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	fffffb7f 	.word	0xfffffb7f

080096ec <_svfiprintf_r>:
 80096ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ee:	b0a1      	sub	sp, #132	; 0x84
 80096f0:	9003      	str	r0, [sp, #12]
 80096f2:	001d      	movs	r5, r3
 80096f4:	898b      	ldrh	r3, [r1, #12]
 80096f6:	000f      	movs	r7, r1
 80096f8:	0016      	movs	r6, r2
 80096fa:	061b      	lsls	r3, r3, #24
 80096fc:	d511      	bpl.n	8009722 <_svfiprintf_r+0x36>
 80096fe:	690b      	ldr	r3, [r1, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10e      	bne.n	8009722 <_svfiprintf_r+0x36>
 8009704:	2140      	movs	r1, #64	; 0x40
 8009706:	f000 fae5 	bl	8009cd4 <_malloc_r>
 800970a:	6038      	str	r0, [r7, #0]
 800970c:	6138      	str	r0, [r7, #16]
 800970e:	2800      	cmp	r0, #0
 8009710:	d105      	bne.n	800971e <_svfiprintf_r+0x32>
 8009712:	230c      	movs	r3, #12
 8009714:	9a03      	ldr	r2, [sp, #12]
 8009716:	3801      	subs	r0, #1
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	b021      	add	sp, #132	; 0x84
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971e:	2340      	movs	r3, #64	; 0x40
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	2300      	movs	r3, #0
 8009724:	ac08      	add	r4, sp, #32
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	3320      	adds	r3, #32
 800972a:	7663      	strb	r3, [r4, #25]
 800972c:	3310      	adds	r3, #16
 800972e:	76a3      	strb	r3, [r4, #26]
 8009730:	9507      	str	r5, [sp, #28]
 8009732:	0035      	movs	r5, r6
 8009734:	782b      	ldrb	r3, [r5, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <_svfiprintf_r+0x52>
 800973a:	2b25      	cmp	r3, #37	; 0x25
 800973c:	d147      	bne.n	80097ce <_svfiprintf_r+0xe2>
 800973e:	1bab      	subs	r3, r5, r6
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	42b5      	cmp	r5, r6
 8009744:	d00c      	beq.n	8009760 <_svfiprintf_r+0x74>
 8009746:	0032      	movs	r2, r6
 8009748:	0039      	movs	r1, r7
 800974a:	9803      	ldr	r0, [sp, #12]
 800974c:	f7ff ff6c 	bl	8009628 <__ssputs_r>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d100      	bne.n	8009756 <_svfiprintf_r+0x6a>
 8009754:	e0ae      	b.n	80098b4 <_svfiprintf_r+0x1c8>
 8009756:	6962      	ldr	r2, [r4, #20]
 8009758:	9b05      	ldr	r3, [sp, #20]
 800975a:	4694      	mov	ip, r2
 800975c:	4463      	add	r3, ip
 800975e:	6163      	str	r3, [r4, #20]
 8009760:	782b      	ldrb	r3, [r5, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d100      	bne.n	8009768 <_svfiprintf_r+0x7c>
 8009766:	e0a5      	b.n	80098b4 <_svfiprintf_r+0x1c8>
 8009768:	2201      	movs	r2, #1
 800976a:	2300      	movs	r3, #0
 800976c:	4252      	negs	r2, r2
 800976e:	6062      	str	r2, [r4, #4]
 8009770:	a904      	add	r1, sp, #16
 8009772:	3254      	adds	r2, #84	; 0x54
 8009774:	1852      	adds	r2, r2, r1
 8009776:	1c6e      	adds	r6, r5, #1
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	60e3      	str	r3, [r4, #12]
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	7013      	strb	r3, [r2, #0]
 8009780:	65a3      	str	r3, [r4, #88]	; 0x58
 8009782:	2205      	movs	r2, #5
 8009784:	7831      	ldrb	r1, [r6, #0]
 8009786:	4854      	ldr	r0, [pc, #336]	; (80098d8 <_svfiprintf_r+0x1ec>)
 8009788:	f000 fa32 	bl	8009bf0 <memchr>
 800978c:	1c75      	adds	r5, r6, #1
 800978e:	2800      	cmp	r0, #0
 8009790:	d11f      	bne.n	80097d2 <_svfiprintf_r+0xe6>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	06d3      	lsls	r3, r2, #27
 8009796:	d504      	bpl.n	80097a2 <_svfiprintf_r+0xb6>
 8009798:	2353      	movs	r3, #83	; 0x53
 800979a:	a904      	add	r1, sp, #16
 800979c:	185b      	adds	r3, r3, r1
 800979e:	2120      	movs	r1, #32
 80097a0:	7019      	strb	r1, [r3, #0]
 80097a2:	0713      	lsls	r3, r2, #28
 80097a4:	d504      	bpl.n	80097b0 <_svfiprintf_r+0xc4>
 80097a6:	2353      	movs	r3, #83	; 0x53
 80097a8:	a904      	add	r1, sp, #16
 80097aa:	185b      	adds	r3, r3, r1
 80097ac:	212b      	movs	r1, #43	; 0x2b
 80097ae:	7019      	strb	r1, [r3, #0]
 80097b0:	7833      	ldrb	r3, [r6, #0]
 80097b2:	2b2a      	cmp	r3, #42	; 0x2a
 80097b4:	d016      	beq.n	80097e4 <_svfiprintf_r+0xf8>
 80097b6:	0035      	movs	r5, r6
 80097b8:	2100      	movs	r1, #0
 80097ba:	200a      	movs	r0, #10
 80097bc:	68e3      	ldr	r3, [r4, #12]
 80097be:	782a      	ldrb	r2, [r5, #0]
 80097c0:	1c6e      	adds	r6, r5, #1
 80097c2:	3a30      	subs	r2, #48	; 0x30
 80097c4:	2a09      	cmp	r2, #9
 80097c6:	d94e      	bls.n	8009866 <_svfiprintf_r+0x17a>
 80097c8:	2900      	cmp	r1, #0
 80097ca:	d111      	bne.n	80097f0 <_svfiprintf_r+0x104>
 80097cc:	e017      	b.n	80097fe <_svfiprintf_r+0x112>
 80097ce:	3501      	adds	r5, #1
 80097d0:	e7b0      	b.n	8009734 <_svfiprintf_r+0x48>
 80097d2:	4b41      	ldr	r3, [pc, #260]	; (80098d8 <_svfiprintf_r+0x1ec>)
 80097d4:	6822      	ldr	r2, [r4, #0]
 80097d6:	1ac0      	subs	r0, r0, r3
 80097d8:	2301      	movs	r3, #1
 80097da:	4083      	lsls	r3, r0
 80097dc:	4313      	orrs	r3, r2
 80097de:	002e      	movs	r6, r5
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	e7ce      	b.n	8009782 <_svfiprintf_r+0x96>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	1d19      	adds	r1, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	9107      	str	r1, [sp, #28]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	db01      	blt.n	80097f4 <_svfiprintf_r+0x108>
 80097f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097f2:	e004      	b.n	80097fe <_svfiprintf_r+0x112>
 80097f4:	425b      	negs	r3, r3
 80097f6:	60e3      	str	r3, [r4, #12]
 80097f8:	2302      	movs	r3, #2
 80097fa:	4313      	orrs	r3, r2
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	782b      	ldrb	r3, [r5, #0]
 8009800:	2b2e      	cmp	r3, #46	; 0x2e
 8009802:	d10a      	bne.n	800981a <_svfiprintf_r+0x12e>
 8009804:	786b      	ldrb	r3, [r5, #1]
 8009806:	2b2a      	cmp	r3, #42	; 0x2a
 8009808:	d135      	bne.n	8009876 <_svfiprintf_r+0x18a>
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	3502      	adds	r5, #2
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9207      	str	r2, [sp, #28]
 8009814:	2b00      	cmp	r3, #0
 8009816:	db2b      	blt.n	8009870 <_svfiprintf_r+0x184>
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	4e30      	ldr	r6, [pc, #192]	; (80098dc <_svfiprintf_r+0x1f0>)
 800981c:	2203      	movs	r2, #3
 800981e:	0030      	movs	r0, r6
 8009820:	7829      	ldrb	r1, [r5, #0]
 8009822:	f000 f9e5 	bl	8009bf0 <memchr>
 8009826:	2800      	cmp	r0, #0
 8009828:	d006      	beq.n	8009838 <_svfiprintf_r+0x14c>
 800982a:	2340      	movs	r3, #64	; 0x40
 800982c:	1b80      	subs	r0, r0, r6
 800982e:	4083      	lsls	r3, r0
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	3501      	adds	r5, #1
 8009834:	4313      	orrs	r3, r2
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	7829      	ldrb	r1, [r5, #0]
 800983a:	2206      	movs	r2, #6
 800983c:	4828      	ldr	r0, [pc, #160]	; (80098e0 <_svfiprintf_r+0x1f4>)
 800983e:	1c6e      	adds	r6, r5, #1
 8009840:	7621      	strb	r1, [r4, #24]
 8009842:	f000 f9d5 	bl	8009bf0 <memchr>
 8009846:	2800      	cmp	r0, #0
 8009848:	d03c      	beq.n	80098c4 <_svfiprintf_r+0x1d8>
 800984a:	4b26      	ldr	r3, [pc, #152]	; (80098e4 <_svfiprintf_r+0x1f8>)
 800984c:	2b00      	cmp	r3, #0
 800984e:	d125      	bne.n	800989c <_svfiprintf_r+0x1b0>
 8009850:	2207      	movs	r2, #7
 8009852:	9b07      	ldr	r3, [sp, #28]
 8009854:	3307      	adds	r3, #7
 8009856:	4393      	bics	r3, r2
 8009858:	3308      	adds	r3, #8
 800985a:	9307      	str	r3, [sp, #28]
 800985c:	6963      	ldr	r3, [r4, #20]
 800985e:	9a04      	ldr	r2, [sp, #16]
 8009860:	189b      	adds	r3, r3, r2
 8009862:	6163      	str	r3, [r4, #20]
 8009864:	e765      	b.n	8009732 <_svfiprintf_r+0x46>
 8009866:	4343      	muls	r3, r0
 8009868:	0035      	movs	r5, r6
 800986a:	2101      	movs	r1, #1
 800986c:	189b      	adds	r3, r3, r2
 800986e:	e7a6      	b.n	80097be <_svfiprintf_r+0xd2>
 8009870:	2301      	movs	r3, #1
 8009872:	425b      	negs	r3, r3
 8009874:	e7d0      	b.n	8009818 <_svfiprintf_r+0x12c>
 8009876:	2300      	movs	r3, #0
 8009878:	200a      	movs	r0, #10
 800987a:	001a      	movs	r2, r3
 800987c:	3501      	adds	r5, #1
 800987e:	6063      	str	r3, [r4, #4]
 8009880:	7829      	ldrb	r1, [r5, #0]
 8009882:	1c6e      	adds	r6, r5, #1
 8009884:	3930      	subs	r1, #48	; 0x30
 8009886:	2909      	cmp	r1, #9
 8009888:	d903      	bls.n	8009892 <_svfiprintf_r+0x1a6>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c5      	beq.n	800981a <_svfiprintf_r+0x12e>
 800988e:	9209      	str	r2, [sp, #36]	; 0x24
 8009890:	e7c3      	b.n	800981a <_svfiprintf_r+0x12e>
 8009892:	4342      	muls	r2, r0
 8009894:	0035      	movs	r5, r6
 8009896:	2301      	movs	r3, #1
 8009898:	1852      	adds	r2, r2, r1
 800989a:	e7f1      	b.n	8009880 <_svfiprintf_r+0x194>
 800989c:	ab07      	add	r3, sp, #28
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	003a      	movs	r2, r7
 80098a2:	0021      	movs	r1, r4
 80098a4:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <_svfiprintf_r+0x1fc>)
 80098a6:	9803      	ldr	r0, [sp, #12]
 80098a8:	e000      	b.n	80098ac <_svfiprintf_r+0x1c0>
 80098aa:	bf00      	nop
 80098ac:	9004      	str	r0, [sp, #16]
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	3301      	adds	r3, #1
 80098b2:	d1d3      	bne.n	800985c <_svfiprintf_r+0x170>
 80098b4:	89bb      	ldrh	r3, [r7, #12]
 80098b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098b8:	065b      	lsls	r3, r3, #25
 80098ba:	d400      	bmi.n	80098be <_svfiprintf_r+0x1d2>
 80098bc:	e72d      	b.n	800971a <_svfiprintf_r+0x2e>
 80098be:	2001      	movs	r0, #1
 80098c0:	4240      	negs	r0, r0
 80098c2:	e72a      	b.n	800971a <_svfiprintf_r+0x2e>
 80098c4:	ab07      	add	r3, sp, #28
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	003a      	movs	r2, r7
 80098ca:	0021      	movs	r1, r4
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <_svfiprintf_r+0x1fc>)
 80098ce:	9803      	ldr	r0, [sp, #12]
 80098d0:	f000 f87c 	bl	80099cc <_printf_i>
 80098d4:	e7ea      	b.n	80098ac <_svfiprintf_r+0x1c0>
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	0800afe8 	.word	0x0800afe8
 80098dc:	0800afee 	.word	0x0800afee
 80098e0:	0800aff2 	.word	0x0800aff2
 80098e4:	00000000 	.word	0x00000000
 80098e8:	08009629 	.word	0x08009629

080098ec <_printf_common>:
 80098ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ee:	0015      	movs	r5, r2
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	688a      	ldr	r2, [r1, #8]
 80098f4:	690b      	ldr	r3, [r1, #16]
 80098f6:	000c      	movs	r4, r1
 80098f8:	9000      	str	r0, [sp, #0]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	da00      	bge.n	8009900 <_printf_common+0x14>
 80098fe:	0013      	movs	r3, r2
 8009900:	0022      	movs	r2, r4
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	3243      	adds	r2, #67	; 0x43
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	2a00      	cmp	r2, #0
 800990a:	d001      	beq.n	8009910 <_printf_common+0x24>
 800990c:	3301      	adds	r3, #1
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	069b      	lsls	r3, r3, #26
 8009914:	d502      	bpl.n	800991c <_printf_common+0x30>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	3302      	adds	r3, #2
 800991a:	602b      	str	r3, [r5, #0]
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	2306      	movs	r3, #6
 8009920:	0017      	movs	r7, r2
 8009922:	401f      	ands	r7, r3
 8009924:	421a      	tst	r2, r3
 8009926:	d027      	beq.n	8009978 <_printf_common+0x8c>
 8009928:	0023      	movs	r3, r4
 800992a:	3343      	adds	r3, #67	; 0x43
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	1e5a      	subs	r2, r3, #1
 8009930:	4193      	sbcs	r3, r2
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	0692      	lsls	r2, r2, #26
 8009936:	d430      	bmi.n	800999a <_printf_common+0xae>
 8009938:	0022      	movs	r2, r4
 800993a:	9901      	ldr	r1, [sp, #4]
 800993c:	9800      	ldr	r0, [sp, #0]
 800993e:	9e08      	ldr	r6, [sp, #32]
 8009940:	3243      	adds	r2, #67	; 0x43
 8009942:	47b0      	blx	r6
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d025      	beq.n	8009994 <_printf_common+0xa8>
 8009948:	2306      	movs	r3, #6
 800994a:	6820      	ldr	r0, [r4, #0]
 800994c:	682a      	ldr	r2, [r5, #0]
 800994e:	68e1      	ldr	r1, [r4, #12]
 8009950:	2500      	movs	r5, #0
 8009952:	4003      	ands	r3, r0
 8009954:	2b04      	cmp	r3, #4
 8009956:	d103      	bne.n	8009960 <_printf_common+0x74>
 8009958:	1a8d      	subs	r5, r1, r2
 800995a:	43eb      	mvns	r3, r5
 800995c:	17db      	asrs	r3, r3, #31
 800995e:	401d      	ands	r5, r3
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	6922      	ldr	r2, [r4, #16]
 8009964:	4293      	cmp	r3, r2
 8009966:	dd01      	ble.n	800996c <_printf_common+0x80>
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	18ed      	adds	r5, r5, r3
 800996c:	2700      	movs	r7, #0
 800996e:	42bd      	cmp	r5, r7
 8009970:	d120      	bne.n	80099b4 <_printf_common+0xc8>
 8009972:	2000      	movs	r0, #0
 8009974:	e010      	b.n	8009998 <_printf_common+0xac>
 8009976:	3701      	adds	r7, #1
 8009978:	68e3      	ldr	r3, [r4, #12]
 800997a:	682a      	ldr	r2, [r5, #0]
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	42bb      	cmp	r3, r7
 8009980:	ddd2      	ble.n	8009928 <_printf_common+0x3c>
 8009982:	0022      	movs	r2, r4
 8009984:	2301      	movs	r3, #1
 8009986:	9901      	ldr	r1, [sp, #4]
 8009988:	9800      	ldr	r0, [sp, #0]
 800998a:	9e08      	ldr	r6, [sp, #32]
 800998c:	3219      	adds	r2, #25
 800998e:	47b0      	blx	r6
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d1f0      	bne.n	8009976 <_printf_common+0x8a>
 8009994:	2001      	movs	r0, #1
 8009996:	4240      	negs	r0, r0
 8009998:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800999a:	2030      	movs	r0, #48	; 0x30
 800999c:	18e1      	adds	r1, r4, r3
 800999e:	3143      	adds	r1, #67	; 0x43
 80099a0:	7008      	strb	r0, [r1, #0]
 80099a2:	0021      	movs	r1, r4
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	3145      	adds	r1, #69	; 0x45
 80099a8:	7809      	ldrb	r1, [r1, #0]
 80099aa:	18a2      	adds	r2, r4, r2
 80099ac:	3243      	adds	r2, #67	; 0x43
 80099ae:	3302      	adds	r3, #2
 80099b0:	7011      	strb	r1, [r2, #0]
 80099b2:	e7c1      	b.n	8009938 <_printf_common+0x4c>
 80099b4:	0022      	movs	r2, r4
 80099b6:	2301      	movs	r3, #1
 80099b8:	9901      	ldr	r1, [sp, #4]
 80099ba:	9800      	ldr	r0, [sp, #0]
 80099bc:	9e08      	ldr	r6, [sp, #32]
 80099be:	321a      	adds	r2, #26
 80099c0:	47b0      	blx	r6
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	d0e6      	beq.n	8009994 <_printf_common+0xa8>
 80099c6:	3701      	adds	r7, #1
 80099c8:	e7d1      	b.n	800996e <_printf_common+0x82>
	...

080099cc <_printf_i>:
 80099cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ce:	b08b      	sub	sp, #44	; 0x2c
 80099d0:	9206      	str	r2, [sp, #24]
 80099d2:	000a      	movs	r2, r1
 80099d4:	3243      	adds	r2, #67	; 0x43
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	9005      	str	r0, [sp, #20]
 80099da:	9204      	str	r2, [sp, #16]
 80099dc:	7e0a      	ldrb	r2, [r1, #24]
 80099de:	000c      	movs	r4, r1
 80099e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099e2:	2a78      	cmp	r2, #120	; 0x78
 80099e4:	d806      	bhi.n	80099f4 <_printf_i+0x28>
 80099e6:	2a62      	cmp	r2, #98	; 0x62
 80099e8:	d808      	bhi.n	80099fc <_printf_i+0x30>
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	d100      	bne.n	80099f0 <_printf_i+0x24>
 80099ee:	e0c0      	b.n	8009b72 <_printf_i+0x1a6>
 80099f0:	2a58      	cmp	r2, #88	; 0x58
 80099f2:	d052      	beq.n	8009a9a <_printf_i+0xce>
 80099f4:	0026      	movs	r6, r4
 80099f6:	3642      	adds	r6, #66	; 0x42
 80099f8:	7032      	strb	r2, [r6, #0]
 80099fa:	e022      	b.n	8009a42 <_printf_i+0x76>
 80099fc:	0010      	movs	r0, r2
 80099fe:	3863      	subs	r0, #99	; 0x63
 8009a00:	2815      	cmp	r0, #21
 8009a02:	d8f7      	bhi.n	80099f4 <_printf_i+0x28>
 8009a04:	f7f6 fb80 	bl	8000108 <__gnu_thumb1_case_shi>
 8009a08:	001f0016 	.word	0x001f0016
 8009a0c:	fff6fff6 	.word	0xfff6fff6
 8009a10:	fff6fff6 	.word	0xfff6fff6
 8009a14:	fff6001f 	.word	0xfff6001f
 8009a18:	fff6fff6 	.word	0xfff6fff6
 8009a1c:	00a8fff6 	.word	0x00a8fff6
 8009a20:	009a0036 	.word	0x009a0036
 8009a24:	fff6fff6 	.word	0xfff6fff6
 8009a28:	fff600b9 	.word	0xfff600b9
 8009a2c:	fff60036 	.word	0xfff60036
 8009a30:	009efff6 	.word	0x009efff6
 8009a34:	0026      	movs	r6, r4
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	3642      	adds	r6, #66	; 0x42
 8009a3a:	1d11      	adds	r1, r2, #4
 8009a3c:	6019      	str	r1, [r3, #0]
 8009a3e:	6813      	ldr	r3, [r2, #0]
 8009a40:	7033      	strb	r3, [r6, #0]
 8009a42:	2301      	movs	r3, #1
 8009a44:	e0a7      	b.n	8009b96 <_printf_i+0x1ca>
 8009a46:	6808      	ldr	r0, [r1, #0]
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	1d0a      	adds	r2, r1, #4
 8009a4c:	0605      	lsls	r5, r0, #24
 8009a4e:	d50b      	bpl.n	8009a68 <_printf_i+0x9c>
 8009a50:	680d      	ldr	r5, [r1, #0]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	2d00      	cmp	r5, #0
 8009a56:	da03      	bge.n	8009a60 <_printf_i+0x94>
 8009a58:	232d      	movs	r3, #45	; 0x2d
 8009a5a:	9a04      	ldr	r2, [sp, #16]
 8009a5c:	426d      	negs	r5, r5
 8009a5e:	7013      	strb	r3, [r2, #0]
 8009a60:	4b61      	ldr	r3, [pc, #388]	; (8009be8 <_printf_i+0x21c>)
 8009a62:	270a      	movs	r7, #10
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	e032      	b.n	8009ace <_printf_i+0x102>
 8009a68:	680d      	ldr	r5, [r1, #0]
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	0641      	lsls	r1, r0, #25
 8009a6e:	d5f1      	bpl.n	8009a54 <_printf_i+0x88>
 8009a70:	b22d      	sxth	r5, r5
 8009a72:	e7ef      	b.n	8009a54 <_printf_i+0x88>
 8009a74:	680d      	ldr	r5, [r1, #0]
 8009a76:	6819      	ldr	r1, [r3, #0]
 8009a78:	1d08      	adds	r0, r1, #4
 8009a7a:	6018      	str	r0, [r3, #0]
 8009a7c:	062e      	lsls	r6, r5, #24
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0xb8>
 8009a80:	680d      	ldr	r5, [r1, #0]
 8009a82:	e003      	b.n	8009a8c <_printf_i+0xc0>
 8009a84:	066d      	lsls	r5, r5, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0xb4>
 8009a88:	680d      	ldr	r5, [r1, #0]
 8009a8a:	b2ad      	uxth	r5, r5
 8009a8c:	4b56      	ldr	r3, [pc, #344]	; (8009be8 <_printf_i+0x21c>)
 8009a8e:	270a      	movs	r7, #10
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	2a6f      	cmp	r2, #111	; 0x6f
 8009a94:	d117      	bne.n	8009ac6 <_printf_i+0xfa>
 8009a96:	2708      	movs	r7, #8
 8009a98:	e015      	b.n	8009ac6 <_printf_i+0xfa>
 8009a9a:	3145      	adds	r1, #69	; 0x45
 8009a9c:	700a      	strb	r2, [r1, #0]
 8009a9e:	4a52      	ldr	r2, [pc, #328]	; (8009be8 <_printf_i+0x21c>)
 8009aa0:	9203      	str	r2, [sp, #12]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	6821      	ldr	r1, [r4, #0]
 8009aa6:	ca20      	ldmia	r2!, {r5}
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	0608      	lsls	r0, r1, #24
 8009aac:	d550      	bpl.n	8009b50 <_printf_i+0x184>
 8009aae:	07cb      	lsls	r3, r1, #31
 8009ab0:	d502      	bpl.n	8009ab8 <_printf_i+0xec>
 8009ab2:	2320      	movs	r3, #32
 8009ab4:	4319      	orrs	r1, r3
 8009ab6:	6021      	str	r1, [r4, #0]
 8009ab8:	2710      	movs	r7, #16
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	d103      	bne.n	8009ac6 <_printf_i+0xfa>
 8009abe:	2320      	movs	r3, #32
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	439a      	bics	r2, r3
 8009ac4:	6022      	str	r2, [r4, #0]
 8009ac6:	0023      	movs	r3, r4
 8009ac8:	2200      	movs	r2, #0
 8009aca:	3343      	adds	r3, #67	; 0x43
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	6863      	ldr	r3, [r4, #4]
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	db03      	blt.n	8009ade <_printf_i+0x112>
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	6821      	ldr	r1, [r4, #0]
 8009ada:	4391      	bics	r1, r2
 8009adc:	6021      	str	r1, [r4, #0]
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	d102      	bne.n	8009ae8 <_printf_i+0x11c>
 8009ae2:	9e04      	ldr	r6, [sp, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00c      	beq.n	8009b02 <_printf_i+0x136>
 8009ae8:	9e04      	ldr	r6, [sp, #16]
 8009aea:	0028      	movs	r0, r5
 8009aec:	0039      	movs	r1, r7
 8009aee:	f7f6 fb9b 	bl	8000228 <__aeabi_uidivmod>
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	3e01      	subs	r6, #1
 8009af6:	5c5b      	ldrb	r3, [r3, r1]
 8009af8:	7033      	strb	r3, [r6, #0]
 8009afa:	002b      	movs	r3, r5
 8009afc:	0005      	movs	r5, r0
 8009afe:	429f      	cmp	r7, r3
 8009b00:	d9f3      	bls.n	8009aea <_printf_i+0x11e>
 8009b02:	2f08      	cmp	r7, #8
 8009b04:	d109      	bne.n	8009b1a <_printf_i+0x14e>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	07db      	lsls	r3, r3, #31
 8009b0a:	d506      	bpl.n	8009b1a <_printf_i+0x14e>
 8009b0c:	6863      	ldr	r3, [r4, #4]
 8009b0e:	6922      	ldr	r2, [r4, #16]
 8009b10:	4293      	cmp	r3, r2
 8009b12:	dc02      	bgt.n	8009b1a <_printf_i+0x14e>
 8009b14:	2330      	movs	r3, #48	; 0x30
 8009b16:	3e01      	subs	r6, #1
 8009b18:	7033      	strb	r3, [r6, #0]
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	1b9b      	subs	r3, r3, r6
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	0021      	movs	r1, r4
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	9805      	ldr	r0, [sp, #20]
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	aa09      	add	r2, sp, #36	; 0x24
 8009b2c:	f7ff fede 	bl	80098ec <_printf_common>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d135      	bne.n	8009ba0 <_printf_i+0x1d4>
 8009b34:	2001      	movs	r0, #1
 8009b36:	4240      	negs	r0, r0
 8009b38:	b00b      	add	sp, #44	; 0x2c
 8009b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	6809      	ldr	r1, [r1, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	6022      	str	r2, [r4, #0]
 8009b44:	0022      	movs	r2, r4
 8009b46:	2178      	movs	r1, #120	; 0x78
 8009b48:	3245      	adds	r2, #69	; 0x45
 8009b4a:	7011      	strb	r1, [r2, #0]
 8009b4c:	4a27      	ldr	r2, [pc, #156]	; (8009bec <_printf_i+0x220>)
 8009b4e:	e7a7      	b.n	8009aa0 <_printf_i+0xd4>
 8009b50:	0648      	lsls	r0, r1, #25
 8009b52:	d5ac      	bpl.n	8009aae <_printf_i+0xe2>
 8009b54:	b2ad      	uxth	r5, r5
 8009b56:	e7aa      	b.n	8009aae <_printf_i+0xe2>
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	680d      	ldr	r5, [r1, #0]
 8009b5c:	1d10      	adds	r0, r2, #4
 8009b5e:	6949      	ldr	r1, [r1, #20]
 8009b60:	6018      	str	r0, [r3, #0]
 8009b62:	6813      	ldr	r3, [r2, #0]
 8009b64:	062e      	lsls	r6, r5, #24
 8009b66:	d501      	bpl.n	8009b6c <_printf_i+0x1a0>
 8009b68:	6019      	str	r1, [r3, #0]
 8009b6a:	e002      	b.n	8009b72 <_printf_i+0x1a6>
 8009b6c:	066d      	lsls	r5, r5, #25
 8009b6e:	d5fb      	bpl.n	8009b68 <_printf_i+0x19c>
 8009b70:	8019      	strh	r1, [r3, #0]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9e04      	ldr	r6, [sp, #16]
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	e7d2      	b.n	8009b20 <_printf_i+0x154>
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	1d11      	adds	r1, r2, #4
 8009b7e:	6019      	str	r1, [r3, #0]
 8009b80:	6816      	ldr	r6, [r2, #0]
 8009b82:	2100      	movs	r1, #0
 8009b84:	0030      	movs	r0, r6
 8009b86:	6862      	ldr	r2, [r4, #4]
 8009b88:	f000 f832 	bl	8009bf0 <memchr>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d001      	beq.n	8009b94 <_printf_i+0x1c8>
 8009b90:	1b80      	subs	r0, r0, r6
 8009b92:	6060      	str	r0, [r4, #4]
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	6123      	str	r3, [r4, #16]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9a04      	ldr	r2, [sp, #16]
 8009b9c:	7013      	strb	r3, [r2, #0]
 8009b9e:	e7bf      	b.n	8009b20 <_printf_i+0x154>
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	0032      	movs	r2, r6
 8009ba4:	9906      	ldr	r1, [sp, #24]
 8009ba6:	9805      	ldr	r0, [sp, #20]
 8009ba8:	9d07      	ldr	r5, [sp, #28]
 8009baa:	47a8      	blx	r5
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d0c1      	beq.n	8009b34 <_printf_i+0x168>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	079b      	lsls	r3, r3, #30
 8009bb4:	d415      	bmi.n	8009be2 <_printf_i+0x216>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb8:	68e0      	ldr	r0, [r4, #12]
 8009bba:	4298      	cmp	r0, r3
 8009bbc:	dabc      	bge.n	8009b38 <_printf_i+0x16c>
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	e7ba      	b.n	8009b38 <_printf_i+0x16c>
 8009bc2:	0022      	movs	r2, r4
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9906      	ldr	r1, [sp, #24]
 8009bc8:	9805      	ldr	r0, [sp, #20]
 8009bca:	9e07      	ldr	r6, [sp, #28]
 8009bcc:	3219      	adds	r2, #25
 8009bce:	47b0      	blx	r6
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d0af      	beq.n	8009b34 <_printf_i+0x168>
 8009bd4:	3501      	adds	r5, #1
 8009bd6:	68e3      	ldr	r3, [r4, #12]
 8009bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	42ab      	cmp	r3, r5
 8009bde:	dcf0      	bgt.n	8009bc2 <_printf_i+0x1f6>
 8009be0:	e7e9      	b.n	8009bb6 <_printf_i+0x1ea>
 8009be2:	2500      	movs	r5, #0
 8009be4:	e7f7      	b.n	8009bd6 <_printf_i+0x20a>
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	0800aff9 	.word	0x0800aff9
 8009bec:	0800b00a 	.word	0x0800b00a

08009bf0 <memchr>:
 8009bf0:	b2c9      	uxtb	r1, r1
 8009bf2:	1882      	adds	r2, r0, r2
 8009bf4:	4290      	cmp	r0, r2
 8009bf6:	d101      	bne.n	8009bfc <memchr+0xc>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	4770      	bx	lr
 8009bfc:	7803      	ldrb	r3, [r0, #0]
 8009bfe:	428b      	cmp	r3, r1
 8009c00:	d0fb      	beq.n	8009bfa <memchr+0xa>
 8009c02:	3001      	adds	r0, #1
 8009c04:	e7f6      	b.n	8009bf4 <memchr+0x4>

08009c06 <memcpy>:
 8009c06:	2300      	movs	r3, #0
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d100      	bne.n	8009c10 <memcpy+0xa>
 8009c0e:	bd10      	pop	{r4, pc}
 8009c10:	5ccc      	ldrb	r4, [r1, r3]
 8009c12:	54c4      	strb	r4, [r0, r3]
 8009c14:	3301      	adds	r3, #1
 8009c16:	e7f8      	b.n	8009c0a <memcpy+0x4>

08009c18 <memmove>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	4288      	cmp	r0, r1
 8009c1c:	d902      	bls.n	8009c24 <memmove+0xc>
 8009c1e:	188b      	adds	r3, r1, r2
 8009c20:	4298      	cmp	r0, r3
 8009c22:	d303      	bcc.n	8009c2c <memmove+0x14>
 8009c24:	2300      	movs	r3, #0
 8009c26:	e007      	b.n	8009c38 <memmove+0x20>
 8009c28:	5c8b      	ldrb	r3, [r1, r2]
 8009c2a:	5483      	strb	r3, [r0, r2]
 8009c2c:	3a01      	subs	r2, #1
 8009c2e:	d2fb      	bcs.n	8009c28 <memmove+0x10>
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	5ccc      	ldrb	r4, [r1, r3]
 8009c34:	54c4      	strb	r4, [r0, r3]
 8009c36:	3301      	adds	r3, #1
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d1fa      	bne.n	8009c32 <memmove+0x1a>
 8009c3c:	e7f8      	b.n	8009c30 <memmove+0x18>
	...

08009c40 <_free_r>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	0005      	movs	r5, r0
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d010      	beq.n	8009c6a <_free_r+0x2a>
 8009c48:	1f0c      	subs	r4, r1, #4
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	da00      	bge.n	8009c52 <_free_r+0x12>
 8009c50:	18e4      	adds	r4, r4, r3
 8009c52:	0028      	movs	r0, r5
 8009c54:	f000 f8d4 	bl	8009e00 <__malloc_lock>
 8009c58:	4a1d      	ldr	r2, [pc, #116]	; (8009cd0 <_free_r+0x90>)
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d105      	bne.n	8009c6c <_free_r+0x2c>
 8009c60:	6063      	str	r3, [r4, #4]
 8009c62:	6014      	str	r4, [r2, #0]
 8009c64:	0028      	movs	r0, r5
 8009c66:	f000 f8d3 	bl	8009e10 <__malloc_unlock>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d908      	bls.n	8009c82 <_free_r+0x42>
 8009c70:	6821      	ldr	r1, [r4, #0]
 8009c72:	1860      	adds	r0, r4, r1
 8009c74:	4283      	cmp	r3, r0
 8009c76:	d1f3      	bne.n	8009c60 <_free_r+0x20>
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	1841      	adds	r1, r0, r1
 8009c7e:	6021      	str	r1, [r4, #0]
 8009c80:	e7ee      	b.n	8009c60 <_free_r+0x20>
 8009c82:	001a      	movs	r2, r3
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <_free_r+0x4e>
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	d9f9      	bls.n	8009c82 <_free_r+0x42>
 8009c8e:	6811      	ldr	r1, [r2, #0]
 8009c90:	1850      	adds	r0, r2, r1
 8009c92:	42a0      	cmp	r0, r4
 8009c94:	d10b      	bne.n	8009cae <_free_r+0x6e>
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	1809      	adds	r1, r1, r0
 8009c9a:	1850      	adds	r0, r2, r1
 8009c9c:	6011      	str	r1, [r2, #0]
 8009c9e:	4283      	cmp	r3, r0
 8009ca0:	d1e0      	bne.n	8009c64 <_free_r+0x24>
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	1841      	adds	r1, r0, r1
 8009ca8:	6011      	str	r1, [r2, #0]
 8009caa:	6053      	str	r3, [r2, #4]
 8009cac:	e7da      	b.n	8009c64 <_free_r+0x24>
 8009cae:	42a0      	cmp	r0, r4
 8009cb0:	d902      	bls.n	8009cb8 <_free_r+0x78>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	e7d5      	b.n	8009c64 <_free_r+0x24>
 8009cb8:	6821      	ldr	r1, [r4, #0]
 8009cba:	1860      	adds	r0, r4, r1
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	d103      	bne.n	8009cc8 <_free_r+0x88>
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	1841      	adds	r1, r0, r1
 8009cc6:	6021      	str	r1, [r4, #0]
 8009cc8:	6063      	str	r3, [r4, #4]
 8009cca:	6054      	str	r4, [r2, #4]
 8009ccc:	e7ca      	b.n	8009c64 <_free_r+0x24>
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	200002a4 	.word	0x200002a4

08009cd4 <_malloc_r>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	1ccd      	adds	r5, r1, #3
 8009cda:	439d      	bics	r5, r3
 8009cdc:	3508      	adds	r5, #8
 8009cde:	0006      	movs	r6, r0
 8009ce0:	2d0c      	cmp	r5, #12
 8009ce2:	d21f      	bcs.n	8009d24 <_malloc_r+0x50>
 8009ce4:	250c      	movs	r5, #12
 8009ce6:	42a9      	cmp	r1, r5
 8009ce8:	d81e      	bhi.n	8009d28 <_malloc_r+0x54>
 8009cea:	0030      	movs	r0, r6
 8009cec:	f000 f888 	bl	8009e00 <__malloc_lock>
 8009cf0:	4925      	ldr	r1, [pc, #148]	; (8009d88 <_malloc_r+0xb4>)
 8009cf2:	680a      	ldr	r2, [r1, #0]
 8009cf4:	0014      	movs	r4, r2
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	d11a      	bne.n	8009d30 <_malloc_r+0x5c>
 8009cfa:	4f24      	ldr	r7, [pc, #144]	; (8009d8c <_malloc_r+0xb8>)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <_malloc_r+0x38>
 8009d02:	0021      	movs	r1, r4
 8009d04:	0030      	movs	r0, r6
 8009d06:	f000 f869 	bl	8009ddc <_sbrk_r>
 8009d0a:	6038      	str	r0, [r7, #0]
 8009d0c:	0029      	movs	r1, r5
 8009d0e:	0030      	movs	r0, r6
 8009d10:	f000 f864 	bl	8009ddc <_sbrk_r>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d12b      	bne.n	8009d70 <_malloc_r+0x9c>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	0030      	movs	r0, r6
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	f000 f877 	bl	8009e10 <__malloc_unlock>
 8009d22:	e003      	b.n	8009d2c <_malloc_r+0x58>
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	dade      	bge.n	8009ce6 <_malloc_r+0x12>
 8009d28:	230c      	movs	r3, #12
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	1b5b      	subs	r3, r3, r5
 8009d34:	d419      	bmi.n	8009d6a <_malloc_r+0x96>
 8009d36:	2b0b      	cmp	r3, #11
 8009d38:	d903      	bls.n	8009d42 <_malloc_r+0x6e>
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	18e4      	adds	r4, r4, r3
 8009d3e:	6025      	str	r5, [r4, #0]
 8009d40:	e003      	b.n	8009d4a <_malloc_r+0x76>
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	42a2      	cmp	r2, r4
 8009d46:	d10e      	bne.n	8009d66 <_malloc_r+0x92>
 8009d48:	600b      	str	r3, [r1, #0]
 8009d4a:	0030      	movs	r0, r6
 8009d4c:	f000 f860 	bl	8009e10 <__malloc_unlock>
 8009d50:	0020      	movs	r0, r4
 8009d52:	2207      	movs	r2, #7
 8009d54:	300b      	adds	r0, #11
 8009d56:	1d23      	adds	r3, r4, #4
 8009d58:	4390      	bics	r0, r2
 8009d5a:	1ac2      	subs	r2, r0, r3
 8009d5c:	4298      	cmp	r0, r3
 8009d5e:	d0e6      	beq.n	8009d2e <_malloc_r+0x5a>
 8009d60:	1a1b      	subs	r3, r3, r0
 8009d62:	50a3      	str	r3, [r4, r2]
 8009d64:	e7e3      	b.n	8009d2e <_malloc_r+0x5a>
 8009d66:	6053      	str	r3, [r2, #4]
 8009d68:	e7ef      	b.n	8009d4a <_malloc_r+0x76>
 8009d6a:	0022      	movs	r2, r4
 8009d6c:	6864      	ldr	r4, [r4, #4]
 8009d6e:	e7c2      	b.n	8009cf6 <_malloc_r+0x22>
 8009d70:	2303      	movs	r3, #3
 8009d72:	1cc4      	adds	r4, r0, #3
 8009d74:	439c      	bics	r4, r3
 8009d76:	42a0      	cmp	r0, r4
 8009d78:	d0e1      	beq.n	8009d3e <_malloc_r+0x6a>
 8009d7a:	1a21      	subs	r1, r4, r0
 8009d7c:	0030      	movs	r0, r6
 8009d7e:	f000 f82d 	bl	8009ddc <_sbrk_r>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	d1db      	bne.n	8009d3e <_malloc_r+0x6a>
 8009d86:	e7c7      	b.n	8009d18 <_malloc_r+0x44>
 8009d88:	200002a4 	.word	0x200002a4
 8009d8c:	200002a8 	.word	0x200002a8

08009d90 <_realloc_r>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	0007      	movs	r7, r0
 8009d94:	000d      	movs	r5, r1
 8009d96:	0016      	movs	r6, r2
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	d105      	bne.n	8009da8 <_realloc_r+0x18>
 8009d9c:	0011      	movs	r1, r2
 8009d9e:	f7ff ff99 	bl	8009cd4 <_malloc_r>
 8009da2:	0004      	movs	r4, r0
 8009da4:	0020      	movs	r0, r4
 8009da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	d103      	bne.n	8009db4 <_realloc_r+0x24>
 8009dac:	f7ff ff48 	bl	8009c40 <_free_r>
 8009db0:	0034      	movs	r4, r6
 8009db2:	e7f7      	b.n	8009da4 <_realloc_r+0x14>
 8009db4:	f000 f834 	bl	8009e20 <_malloc_usable_size_r>
 8009db8:	002c      	movs	r4, r5
 8009dba:	42b0      	cmp	r0, r6
 8009dbc:	d2f2      	bcs.n	8009da4 <_realloc_r+0x14>
 8009dbe:	0031      	movs	r1, r6
 8009dc0:	0038      	movs	r0, r7
 8009dc2:	f7ff ff87 	bl	8009cd4 <_malloc_r>
 8009dc6:	1e04      	subs	r4, r0, #0
 8009dc8:	d0ec      	beq.n	8009da4 <_realloc_r+0x14>
 8009dca:	0029      	movs	r1, r5
 8009dcc:	0032      	movs	r2, r6
 8009dce:	f7ff ff1a 	bl	8009c06 <memcpy>
 8009dd2:	0029      	movs	r1, r5
 8009dd4:	0038      	movs	r0, r7
 8009dd6:	f7ff ff33 	bl	8009c40 <_free_r>
 8009dda:	e7e3      	b.n	8009da4 <_realloc_r+0x14>

08009ddc <_sbrk_r>:
 8009ddc:	2300      	movs	r3, #0
 8009dde:	b570      	push	{r4, r5, r6, lr}
 8009de0:	4d06      	ldr	r5, [pc, #24]	; (8009dfc <_sbrk_r+0x20>)
 8009de2:	0004      	movs	r4, r0
 8009de4:	0008      	movs	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7fa f996 	bl	8004118 <_sbrk>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d103      	bne.n	8009df8 <_sbrk_r+0x1c>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d000      	beq.n	8009df8 <_sbrk_r+0x1c>
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	bd70      	pop	{r4, r5, r6, pc}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	20000924 	.word	0x20000924

08009e00 <__malloc_lock>:
 8009e00:	b510      	push	{r4, lr}
 8009e02:	4802      	ldr	r0, [pc, #8]	; (8009e0c <__malloc_lock+0xc>)
 8009e04:	f000 f814 	bl	8009e30 <__retarget_lock_acquire_recursive>
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	2000092c 	.word	0x2000092c

08009e10 <__malloc_unlock>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	4802      	ldr	r0, [pc, #8]	; (8009e1c <__malloc_unlock+0xc>)
 8009e14:	f000 f80d 	bl	8009e32 <__retarget_lock_release_recursive>
 8009e18:	bd10      	pop	{r4, pc}
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	2000092c 	.word	0x2000092c

08009e20 <_malloc_usable_size_r>:
 8009e20:	1f0b      	subs	r3, r1, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	1f18      	subs	r0, r3, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	da01      	bge.n	8009e2e <_malloc_usable_size_r+0xe>
 8009e2a:	580b      	ldr	r3, [r1, r0]
 8009e2c:	18c0      	adds	r0, r0, r3
 8009e2e:	4770      	bx	lr

08009e30 <__retarget_lock_acquire_recursive>:
 8009e30:	4770      	bx	lr

08009e32 <__retarget_lock_release_recursive>:
 8009e32:	4770      	bx	lr

08009e34 <pow>:
 8009e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e36:	001d      	movs	r5, r3
 8009e38:	0014      	movs	r4, r2
 8009e3a:	9000      	str	r0, [sp, #0]
 8009e3c:	9101      	str	r1, [sp, #4]
 8009e3e:	f000 f8b1 	bl	8009fa4 <__ieee754_pow>
 8009e42:	4b54      	ldr	r3, [pc, #336]	; (8009f94 <pow+0x160>)
 8009e44:	0006      	movs	r6, r0
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	000f      	movs	r7, r1
 8009e4a:	b25b      	sxtb	r3, r3
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	d018      	beq.n	8009e82 <pow+0x4e>
 8009e50:	0022      	movs	r2, r4
 8009e52:	002b      	movs	r3, r5
 8009e54:	0020      	movs	r0, r4
 8009e56:	0029      	movs	r1, r5
 8009e58:	f7f8 fec8 	bl	8002bec <__aeabi_dcmpun>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d110      	bne.n	8009e82 <pow+0x4e>
 8009e60:	9a00      	ldr	r2, [sp, #0]
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	0010      	movs	r0, r2
 8009e66:	0019      	movs	r1, r3
 8009e68:	f7f8 fec0 	bl	8002bec <__aeabi_dcmpun>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d00a      	beq.n	8009e8a <pow+0x56>
 8009e74:	0020      	movs	r0, r4
 8009e76:	0029      	movs	r1, r5
 8009e78:	f7f6 f9ec 	bl	8000254 <__aeabi_dcmpeq>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d000      	beq.n	8009e82 <pow+0x4e>
 8009e80:	e084      	b.n	8009f8c <pow+0x158>
 8009e82:	0030      	movs	r0, r6
 8009e84:	0039      	movs	r1, r7
 8009e86:	b003      	add	sp, #12
 8009e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e8a:	9800      	ldr	r0, [sp, #0]
 8009e8c:	9901      	ldr	r1, [sp, #4]
 8009e8e:	f7f6 f9e1 	bl	8000254 <__aeabi_dcmpeq>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d01c      	beq.n	8009ed0 <pow+0x9c>
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	0020      	movs	r0, r4
 8009e9c:	0029      	movs	r1, r5
 8009e9e:	f7f6 f9d9 	bl	8000254 <__aeabi_dcmpeq>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d172      	bne.n	8009f8c <pow+0x158>
 8009ea6:	0020      	movs	r0, r4
 8009ea8:	0029      	movs	r1, r5
 8009eaa:	f000 fe33 	bl	800ab14 <finite>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d0e7      	beq.n	8009e82 <pow+0x4e>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	0020      	movs	r0, r4
 8009eb8:	0029      	movs	r1, r5
 8009eba:	f7f6 f9d1 	bl	8000260 <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0df      	beq.n	8009e82 <pow+0x4e>
 8009ec2:	f7ff fb4d 	bl	8009560 <__errno>
 8009ec6:	2321      	movs	r3, #33	; 0x21
 8009ec8:	2600      	movs	r6, #0
 8009eca:	6003      	str	r3, [r0, #0]
 8009ecc:	4f32      	ldr	r7, [pc, #200]	; (8009f98 <pow+0x164>)
 8009ece:	e7d8      	b.n	8009e82 <pow+0x4e>
 8009ed0:	0030      	movs	r0, r6
 8009ed2:	0039      	movs	r1, r7
 8009ed4:	f000 fe1e 	bl	800ab14 <finite>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d139      	bne.n	8009f50 <pow+0x11c>
 8009edc:	9800      	ldr	r0, [sp, #0]
 8009ede:	9901      	ldr	r1, [sp, #4]
 8009ee0:	f000 fe18 	bl	800ab14 <finite>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d033      	beq.n	8009f50 <pow+0x11c>
 8009ee8:	0020      	movs	r0, r4
 8009eea:	0029      	movs	r1, r5
 8009eec:	f000 fe12 	bl	800ab14 <finite>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d02d      	beq.n	8009f50 <pow+0x11c>
 8009ef4:	0032      	movs	r2, r6
 8009ef6:	003b      	movs	r3, r7
 8009ef8:	0030      	movs	r0, r6
 8009efa:	0039      	movs	r1, r7
 8009efc:	f7f8 fe76 	bl	8002bec <__aeabi_dcmpun>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d00c      	beq.n	8009f1e <pow+0xea>
 8009f04:	f7ff fb2c 	bl	8009560 <__errno>
 8009f08:	2321      	movs	r3, #33	; 0x21
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	6003      	str	r3, [r0, #0]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	0010      	movs	r0, r2
 8009f12:	0019      	movs	r1, r3
 8009f14:	f7f7 fc66 	bl	80017e4 <__aeabi_ddiv>
 8009f18:	0006      	movs	r6, r0
 8009f1a:	000f      	movs	r7, r1
 8009f1c:	e7b1      	b.n	8009e82 <pow+0x4e>
 8009f1e:	f7ff fb1f 	bl	8009560 <__errno>
 8009f22:	2322      	movs	r3, #34	; 0x22
 8009f24:	2200      	movs	r2, #0
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9800      	ldr	r0, [sp, #0]
 8009f2c:	9901      	ldr	r1, [sp, #4]
 8009f2e:	f7f6 f997 	bl	8000260 <__aeabi_dcmplt>
 8009f32:	2600      	movs	r6, #0
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d009      	beq.n	8009f4c <pow+0x118>
 8009f38:	0020      	movs	r0, r4
 8009f3a:	0029      	movs	r1, r5
 8009f3c:	f000 fdf8 	bl	800ab30 <rint>
 8009f40:	0022      	movs	r2, r4
 8009f42:	002b      	movs	r3, r5
 8009f44:	f7f6 f986 	bl	8000254 <__aeabi_dcmpeq>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0bf      	beq.n	8009ecc <pow+0x98>
 8009f4c:	4f13      	ldr	r7, [pc, #76]	; (8009f9c <pow+0x168>)
 8009f4e:	e798      	b.n	8009e82 <pow+0x4e>
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	0030      	movs	r0, r6
 8009f56:	0039      	movs	r1, r7
 8009f58:	f7f6 f97c 	bl	8000254 <__aeabi_dcmpeq>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d100      	bne.n	8009f62 <pow+0x12e>
 8009f60:	e78f      	b.n	8009e82 <pow+0x4e>
 8009f62:	9800      	ldr	r0, [sp, #0]
 8009f64:	9901      	ldr	r1, [sp, #4]
 8009f66:	f000 fdd5 	bl	800ab14 <finite>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d100      	bne.n	8009f70 <pow+0x13c>
 8009f6e:	e788      	b.n	8009e82 <pow+0x4e>
 8009f70:	0020      	movs	r0, r4
 8009f72:	0029      	movs	r1, r5
 8009f74:	f000 fdce 	bl	800ab14 <finite>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d100      	bne.n	8009f7e <pow+0x14a>
 8009f7c:	e781      	b.n	8009e82 <pow+0x4e>
 8009f7e:	f7ff faef 	bl	8009560 <__errno>
 8009f82:	2322      	movs	r3, #34	; 0x22
 8009f84:	2600      	movs	r6, #0
 8009f86:	2700      	movs	r7, #0
 8009f88:	6003      	str	r3, [r0, #0]
 8009f8a:	e77a      	b.n	8009e82 <pow+0x4e>
 8009f8c:	2600      	movs	r6, #0
 8009f8e:	4f04      	ldr	r7, [pc, #16]	; (8009fa0 <pow+0x16c>)
 8009f90:	e777      	b.n	8009e82 <pow+0x4e>
 8009f92:	46c0      	nop			; (mov r8, r8)
 8009f94:	20000074 	.word	0x20000074
 8009f98:	fff00000 	.word	0xfff00000
 8009f9c:	7ff00000 	.word	0x7ff00000
 8009fa0:	3ff00000 	.word	0x3ff00000

08009fa4 <__ieee754_pow>:
 8009fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa6:	b095      	sub	sp, #84	; 0x54
 8009fa8:	9202      	str	r2, [sp, #8]
 8009faa:	9303      	str	r3, [sp, #12]
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	9a03      	ldr	r2, [sp, #12]
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	9b02      	ldr	r3, [sp, #8]
 8009fb4:	0055      	lsls	r5, r2, #1
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	086d      	lsrs	r5, r5, #1
 8009fba:	0007      	movs	r7, r0
 8009fbc:	000e      	movs	r6, r1
 8009fbe:	432a      	orrs	r2, r5
 8009fc0:	d101      	bne.n	8009fc6 <__ieee754_pow+0x22>
 8009fc2:	f000 fcb6 	bl	800a932 <__ieee754_pow+0x98e>
 8009fc6:	4a82      	ldr	r2, [pc, #520]	; (800a1d0 <__ieee754_pow+0x22c>)
 8009fc8:	004c      	lsls	r4, r1, #1
 8009fca:	9108      	str	r1, [sp, #32]
 8009fcc:	9000      	str	r0, [sp, #0]
 8009fce:	0864      	lsrs	r4, r4, #1
 8009fd0:	4294      	cmp	r4, r2
 8009fd2:	dc0d      	bgt.n	8009ff0 <__ieee754_pow+0x4c>
 8009fd4:	d104      	bne.n	8009fe0 <__ieee754_pow+0x3c>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d110      	bne.n	8009ffc <__ieee754_pow+0x58>
 8009fda:	42a5      	cmp	r5, r4
 8009fdc:	dd03      	ble.n	8009fe6 <__ieee754_pow+0x42>
 8009fde:	e00d      	b.n	8009ffc <__ieee754_pow+0x58>
 8009fe0:	4a7b      	ldr	r2, [pc, #492]	; (800a1d0 <__ieee754_pow+0x22c>)
 8009fe2:	4295      	cmp	r5, r2
 8009fe4:	dc04      	bgt.n	8009ff0 <__ieee754_pow+0x4c>
 8009fe6:	4a7a      	ldr	r2, [pc, #488]	; (800a1d0 <__ieee754_pow+0x22c>)
 8009fe8:	4295      	cmp	r5, r2
 8009fea:	d10d      	bne.n	800a008 <__ieee754_pow+0x64>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <__ieee754_pow+0x64>
 8009ff0:	4b78      	ldr	r3, [pc, #480]	; (800a1d4 <__ieee754_pow+0x230>)
 8009ff2:	18e4      	adds	r4, r4, r3
 8009ff4:	4327      	orrs	r7, r4
 8009ff6:	d101      	bne.n	8009ffc <__ieee754_pow+0x58>
 8009ff8:	f000 fc9b 	bl	800a932 <__ieee754_pow+0x98e>
 8009ffc:	4876      	ldr	r0, [pc, #472]	; (800a1d8 <__ieee754_pow+0x234>)
 8009ffe:	f000 fd91 	bl	800ab24 <nan>
 800a002:	9000      	str	r0, [sp, #0]
 800a004:	9101      	str	r1, [sp, #4]
 800a006:	e092      	b.n	800a12e <__ieee754_pow+0x18a>
 800a008:	2200      	movs	r2, #0
 800a00a:	9206      	str	r2, [sp, #24]
 800a00c:	2e00      	cmp	r6, #0
 800a00e:	da69      	bge.n	800a0e4 <__ieee754_pow+0x140>
 800a010:	4a72      	ldr	r2, [pc, #456]	; (800a1dc <__ieee754_pow+0x238>)
 800a012:	4295      	cmp	r5, r2
 800a014:	dc64      	bgt.n	800a0e0 <__ieee754_pow+0x13c>
 800a016:	4a72      	ldr	r2, [pc, #456]	; (800a1e0 <__ieee754_pow+0x23c>)
 800a018:	4295      	cmp	r5, r2
 800a01a:	dd11      	ble.n	800a040 <__ieee754_pow+0x9c>
 800a01c:	4971      	ldr	r1, [pc, #452]	; (800a1e4 <__ieee754_pow+0x240>)
 800a01e:	152a      	asrs	r2, r5, #20
 800a020:	1852      	adds	r2, r2, r1
 800a022:	2a14      	cmp	r2, #20
 800a024:	dd3c      	ble.n	800a0a0 <__ieee754_pow+0xfc>
 800a026:	2134      	movs	r1, #52	; 0x34
 800a028:	1a8a      	subs	r2, r1, r2
 800a02a:	9902      	ldr	r1, [sp, #8]
 800a02c:	40d1      	lsrs	r1, r2
 800a02e:	0008      	movs	r0, r1
 800a030:	4090      	lsls	r0, r2
 800a032:	4298      	cmp	r0, r3
 800a034:	d104      	bne.n	800a040 <__ieee754_pow+0x9c>
 800a036:	2201      	movs	r2, #1
 800a038:	4011      	ands	r1, r2
 800a03a:	1892      	adds	r2, r2, r2
 800a03c:	1a52      	subs	r2, r2, r1
 800a03e:	9206      	str	r2, [sp, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d03c      	beq.n	800a0be <__ieee754_pow+0x11a>
 800a044:	0038      	movs	r0, r7
 800a046:	0031      	movs	r1, r6
 800a048:	f000 fd60 	bl	800ab0c <fabs>
 800a04c:	9000      	str	r0, [sp, #0]
 800a04e:	9101      	str	r1, [sp, #4]
 800a050:	2f00      	cmp	r7, #0
 800a052:	d000      	beq.n	800a056 <__ieee754_pow+0xb2>
 800a054:	e094      	b.n	800a180 <__ieee754_pow+0x1dc>
 800a056:	2c00      	cmp	r4, #0
 800a058:	d005      	beq.n	800a066 <__ieee754_pow+0xc2>
 800a05a:	4a63      	ldr	r2, [pc, #396]	; (800a1e8 <__ieee754_pow+0x244>)
 800a05c:	00b3      	lsls	r3, r6, #2
 800a05e:	089b      	lsrs	r3, r3, #2
 800a060:	4293      	cmp	r3, r2
 800a062:	d000      	beq.n	800a066 <__ieee754_pow+0xc2>
 800a064:	e08c      	b.n	800a180 <__ieee754_pow+0x1dc>
 800a066:	9b04      	ldr	r3, [sp, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da07      	bge.n	800a07c <__ieee754_pow+0xd8>
 800a06c:	9a00      	ldr	r2, [sp, #0]
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	2000      	movs	r0, #0
 800a072:	495d      	ldr	r1, [pc, #372]	; (800a1e8 <__ieee754_pow+0x244>)
 800a074:	f7f7 fbb6 	bl	80017e4 <__aeabi_ddiv>
 800a078:	9000      	str	r0, [sp, #0]
 800a07a:	9101      	str	r1, [sp, #4]
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da55      	bge.n	800a12e <__ieee754_pow+0x18a>
 800a082:	4b54      	ldr	r3, [pc, #336]	; (800a1d4 <__ieee754_pow+0x230>)
 800a084:	18e4      	adds	r4, r4, r3
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	431c      	orrs	r4, r3
 800a08a:	d000      	beq.n	800a08e <__ieee754_pow+0xea>
 800a08c:	e06c      	b.n	800a168 <__ieee754_pow+0x1c4>
 800a08e:	9a00      	ldr	r2, [sp, #0]
 800a090:	9b01      	ldr	r3, [sp, #4]
 800a092:	0010      	movs	r0, r2
 800a094:	0019      	movs	r1, r3
 800a096:	f7f8 fa17 	bl	80024c8 <__aeabi_dsub>
 800a09a:	0002      	movs	r2, r0
 800a09c:	000b      	movs	r3, r1
 800a09e:	e01c      	b.n	800a0da <__ieee754_pow+0x136>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1cf      	bne.n	800a044 <__ieee754_pow+0xa0>
 800a0a4:	3314      	adds	r3, #20
 800a0a6:	1a9a      	subs	r2, r3, r2
 800a0a8:	002b      	movs	r3, r5
 800a0aa:	4113      	asrs	r3, r2
 800a0ac:	0019      	movs	r1, r3
 800a0ae:	4091      	lsls	r1, r2
 800a0b0:	42a9      	cmp	r1, r5
 800a0b2:	d104      	bne.n	800a0be <__ieee754_pow+0x11a>
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	1892      	adds	r2, r2, r2
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	9306      	str	r3, [sp, #24]
 800a0be:	4b4a      	ldr	r3, [pc, #296]	; (800a1e8 <__ieee754_pow+0x244>)
 800a0c0:	429d      	cmp	r5, r3
 800a0c2:	d138      	bne.n	800a136 <__ieee754_pow+0x192>
 800a0c4:	0038      	movs	r0, r7
 800a0c6:	0031      	movs	r1, r6
 800a0c8:	9b04      	ldr	r3, [sp, #16]
 800a0ca:	9000      	str	r0, [sp, #0]
 800a0cc:	9101      	str	r1, [sp, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	da2d      	bge.n	800a12e <__ieee754_pow+0x18a>
 800a0d2:	003a      	movs	r2, r7
 800a0d4:	0033      	movs	r3, r6
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	4943      	ldr	r1, [pc, #268]	; (800a1e8 <__ieee754_pow+0x244>)
 800a0da:	f7f7 fb83 	bl	80017e4 <__aeabi_ddiv>
 800a0de:	e790      	b.n	800a002 <__ieee754_pow+0x5e>
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	9206      	str	r2, [sp, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1ad      	bne.n	800a044 <__ieee754_pow+0xa0>
 800a0e8:	4b39      	ldr	r3, [pc, #228]	; (800a1d0 <__ieee754_pow+0x22c>)
 800a0ea:	429d      	cmp	r5, r3
 800a0ec:	d1e7      	bne.n	800a0be <__ieee754_pow+0x11a>
 800a0ee:	4b39      	ldr	r3, [pc, #228]	; (800a1d4 <__ieee754_pow+0x230>)
 800a0f0:	18e3      	adds	r3, r4, r3
 800a0f2:	431f      	orrs	r7, r3
 800a0f4:	d101      	bne.n	800a0fa <__ieee754_pow+0x156>
 800a0f6:	f000 fc1c 	bl	800a932 <__ieee754_pow+0x98e>
 800a0fa:	4b39      	ldr	r3, [pc, #228]	; (800a1e0 <__ieee754_pow+0x23c>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	dd0b      	ble.n	800a118 <__ieee754_pow+0x174>
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	9c03      	ldr	r4, [sp, #12]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	9401      	str	r4, [sp, #4]
 800a108:	9b04      	ldr	r3, [sp, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da0f      	bge.n	800a12e <__ieee754_pow+0x18a>
 800a10e:	2300      	movs	r3, #0
 800a110:	2400      	movs	r4, #0
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	9401      	str	r4, [sp, #4]
 800a116:	e00a      	b.n	800a12e <__ieee754_pow+0x18a>
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	daf7      	bge.n	800a10e <__ieee754_pow+0x16a>
 800a11e:	2280      	movs	r2, #128	; 0x80
 800a120:	0612      	lsls	r2, r2, #24
 800a122:	4694      	mov	ip, r2
 800a124:	9b02      	ldr	r3, [sp, #8]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	4463      	add	r3, ip
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	9800      	ldr	r0, [sp, #0]
 800a130:	9901      	ldr	r1, [sp, #4]
 800a132:	b015      	add	sp, #84	; 0x54
 800a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	9a04      	ldr	r2, [sp, #16]
 800a13a:	05db      	lsls	r3, r3, #23
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d106      	bne.n	800a14e <__ieee754_pow+0x1aa>
 800a140:	003a      	movs	r2, r7
 800a142:	0033      	movs	r3, r6
 800a144:	0038      	movs	r0, r7
 800a146:	0031      	movs	r1, r6
 800a148:	f7f7 ff52 	bl	8001ff0 <__aeabi_dmul>
 800a14c:	e759      	b.n	800a002 <__ieee754_pow+0x5e>
 800a14e:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <__ieee754_pow+0x248>)
 800a150:	9a04      	ldr	r2, [sp, #16]
 800a152:	429a      	cmp	r2, r3
 800a154:	d000      	beq.n	800a158 <__ieee754_pow+0x1b4>
 800a156:	e775      	b.n	800a044 <__ieee754_pow+0xa0>
 800a158:	2e00      	cmp	r6, #0
 800a15a:	da00      	bge.n	800a15e <__ieee754_pow+0x1ba>
 800a15c:	e772      	b.n	800a044 <__ieee754_pow+0xa0>
 800a15e:	0038      	movs	r0, r7
 800a160:	0031      	movs	r1, r6
 800a162:	f000 fc1f 	bl	800a9a4 <__ieee754_sqrt>
 800a166:	e74c      	b.n	800a002 <__ieee754_pow+0x5e>
 800a168:	9b06      	ldr	r3, [sp, #24]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d1df      	bne.n	800a12e <__ieee754_pow+0x18a>
 800a16e:	9800      	ldr	r0, [sp, #0]
 800a170:	2180      	movs	r1, #128	; 0x80
 800a172:	0002      	movs	r2, r0
 800a174:	9801      	ldr	r0, [sp, #4]
 800a176:	0609      	lsls	r1, r1, #24
 800a178:	1843      	adds	r3, r0, r1
 800a17a:	9200      	str	r2, [sp, #0]
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	e7d6      	b.n	800a12e <__ieee754_pow+0x18a>
 800a180:	0ff3      	lsrs	r3, r6, #31
 800a182:	3b01      	subs	r3, #1
 800a184:	9310      	str	r3, [sp, #64]	; 0x40
 800a186:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a188:	9b06      	ldr	r3, [sp, #24]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	d104      	bne.n	800a198 <__ieee754_pow+0x1f4>
 800a18e:	003a      	movs	r2, r7
 800a190:	0033      	movs	r3, r6
 800a192:	0038      	movs	r0, r7
 800a194:	0031      	movs	r1, r6
 800a196:	e77e      	b.n	800a096 <__ieee754_pow+0xf2>
 800a198:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <__ieee754_pow+0x24c>)
 800a19a:	429d      	cmp	r5, r3
 800a19c:	dc00      	bgt.n	800a1a0 <__ieee754_pow+0x1fc>
 800a19e:	e0f5      	b.n	800a38c <__ieee754_pow+0x3e8>
 800a1a0:	4b14      	ldr	r3, [pc, #80]	; (800a1f4 <__ieee754_pow+0x250>)
 800a1a2:	429d      	cmp	r5, r3
 800a1a4:	dd0a      	ble.n	800a1bc <__ieee754_pow+0x218>
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <__ieee754_pow+0x23c>)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	dc0d      	bgt.n	800a1c8 <__ieee754_pow+0x224>
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	daad      	bge.n	800a10e <__ieee754_pow+0x16a>
 800a1b2:	4a11      	ldr	r2, [pc, #68]	; (800a1f8 <__ieee754_pow+0x254>)
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <__ieee754_pow+0x258>)
 800a1b6:	0010      	movs	r0, r2
 800a1b8:	0019      	movs	r1, r3
 800a1ba:	e7c5      	b.n	800a148 <__ieee754_pow+0x1a4>
 800a1bc:	4b10      	ldr	r3, [pc, #64]	; (800a200 <__ieee754_pow+0x25c>)
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	ddf4      	ble.n	800a1ac <__ieee754_pow+0x208>
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <__ieee754_pow+0x244>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	dd1d      	ble.n	800a204 <__ieee754_pow+0x260>
 800a1c8:	9b04      	ldr	r3, [sp, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dcf1      	bgt.n	800a1b2 <__ieee754_pow+0x20e>
 800a1ce:	e79e      	b.n	800a10e <__ieee754_pow+0x16a>
 800a1d0:	7ff00000 	.word	0x7ff00000
 800a1d4:	c0100000 	.word	0xc0100000
 800a1d8:	0800afed 	.word	0x0800afed
 800a1dc:	433fffff 	.word	0x433fffff
 800a1e0:	3fefffff 	.word	0x3fefffff
 800a1e4:	fffffc01 	.word	0xfffffc01
 800a1e8:	3ff00000 	.word	0x3ff00000
 800a1ec:	3fe00000 	.word	0x3fe00000
 800a1f0:	41e00000 	.word	0x41e00000
 800a1f4:	43f00000 	.word	0x43f00000
 800a1f8:	8800759c 	.word	0x8800759c
 800a1fc:	7e37e43c 	.word	0x7e37e43c
 800a200:	3feffffe 	.word	0x3feffffe
 800a204:	2200      	movs	r2, #0
 800a206:	9800      	ldr	r0, [sp, #0]
 800a208:	9901      	ldr	r1, [sp, #4]
 800a20a:	4b52      	ldr	r3, [pc, #328]	; (800a354 <__ieee754_pow+0x3b0>)
 800a20c:	f7f8 f95c 	bl	80024c8 <__aeabi_dsub>
 800a210:	22c0      	movs	r2, #192	; 0xc0
 800a212:	4b51      	ldr	r3, [pc, #324]	; (800a358 <__ieee754_pow+0x3b4>)
 800a214:	05d2      	lsls	r2, r2, #23
 800a216:	0004      	movs	r4, r0
 800a218:	000d      	movs	r5, r1
 800a21a:	f7f7 fee9 	bl	8001ff0 <__aeabi_dmul>
 800a21e:	4a4f      	ldr	r2, [pc, #316]	; (800a35c <__ieee754_pow+0x3b8>)
 800a220:	9000      	str	r0, [sp, #0]
 800a222:	9101      	str	r1, [sp, #4]
 800a224:	4b4e      	ldr	r3, [pc, #312]	; (800a360 <__ieee754_pow+0x3bc>)
 800a226:	0020      	movs	r0, r4
 800a228:	0029      	movs	r1, r5
 800a22a:	f7f7 fee1 	bl	8001ff0 <__aeabi_dmul>
 800a22e:	2200      	movs	r2, #0
 800a230:	9004      	str	r0, [sp, #16]
 800a232:	9105      	str	r1, [sp, #20]
 800a234:	4b4b      	ldr	r3, [pc, #300]	; (800a364 <__ieee754_pow+0x3c0>)
 800a236:	0020      	movs	r0, r4
 800a238:	0029      	movs	r1, r5
 800a23a:	f7f7 fed9 	bl	8001ff0 <__aeabi_dmul>
 800a23e:	0002      	movs	r2, r0
 800a240:	000b      	movs	r3, r1
 800a242:	4849      	ldr	r0, [pc, #292]	; (800a368 <__ieee754_pow+0x3c4>)
 800a244:	4949      	ldr	r1, [pc, #292]	; (800a36c <__ieee754_pow+0x3c8>)
 800a246:	f7f8 f93f 	bl	80024c8 <__aeabi_dsub>
 800a24a:	0022      	movs	r2, r4
 800a24c:	002b      	movs	r3, r5
 800a24e:	f7f7 fecf 	bl	8001ff0 <__aeabi_dmul>
 800a252:	0002      	movs	r2, r0
 800a254:	000b      	movs	r3, r1
 800a256:	2000      	movs	r0, #0
 800a258:	4945      	ldr	r1, [pc, #276]	; (800a370 <__ieee754_pow+0x3cc>)
 800a25a:	f7f8 f935 	bl	80024c8 <__aeabi_dsub>
 800a25e:	0022      	movs	r2, r4
 800a260:	0006      	movs	r6, r0
 800a262:	000f      	movs	r7, r1
 800a264:	002b      	movs	r3, r5
 800a266:	0020      	movs	r0, r4
 800a268:	0029      	movs	r1, r5
 800a26a:	f7f7 fec1 	bl	8001ff0 <__aeabi_dmul>
 800a26e:	0002      	movs	r2, r0
 800a270:	000b      	movs	r3, r1
 800a272:	0030      	movs	r0, r6
 800a274:	0039      	movs	r1, r7
 800a276:	f7f7 febb 	bl	8001ff0 <__aeabi_dmul>
 800a27a:	4a3e      	ldr	r2, [pc, #248]	; (800a374 <__ieee754_pow+0x3d0>)
 800a27c:	4b36      	ldr	r3, [pc, #216]	; (800a358 <__ieee754_pow+0x3b4>)
 800a27e:	f7f7 feb7 	bl	8001ff0 <__aeabi_dmul>
 800a282:	0002      	movs	r2, r0
 800a284:	000b      	movs	r3, r1
 800a286:	9804      	ldr	r0, [sp, #16]
 800a288:	9905      	ldr	r1, [sp, #20]
 800a28a:	f7f8 f91d 	bl	80024c8 <__aeabi_dsub>
 800a28e:	0002      	movs	r2, r0
 800a290:	000b      	movs	r3, r1
 800a292:	0004      	movs	r4, r0
 800a294:	000d      	movs	r5, r1
 800a296:	9800      	ldr	r0, [sp, #0]
 800a298:	9901      	ldr	r1, [sp, #4]
 800a29a:	f7f6 ff39 	bl	8001110 <__aeabi_dadd>
 800a29e:	9a00      	ldr	r2, [sp, #0]
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	000f      	movs	r7, r1
 800a2a6:	0006      	movs	r6, r0
 800a2a8:	f7f8 f90e 	bl	80024c8 <__aeabi_dsub>
 800a2ac:	0002      	movs	r2, r0
 800a2ae:	000b      	movs	r3, r1
 800a2b0:	0020      	movs	r0, r4
 800a2b2:	0029      	movs	r1, r5
 800a2b4:	f7f8 f908 	bl	80024c8 <__aeabi_dsub>
 800a2b8:	9b06      	ldr	r3, [sp, #24]
 800a2ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	9004      	str	r0, [sp, #16]
 800a2c0:	9105      	str	r1, [sp, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	d000      	beq.n	800a2c8 <__ieee754_pow+0x324>
 800a2c6:	e1e0      	b.n	800a68a <__ieee754_pow+0x6e6>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4c2b      	ldr	r4, [pc, #172]	; (800a378 <__ieee754_pow+0x3d4>)
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	9401      	str	r4, [sp, #4]
 800a2d0:	9c02      	ldr	r4, [sp, #8]
 800a2d2:	9d03      	ldr	r5, [sp, #12]
 800a2d4:	9802      	ldr	r0, [sp, #8]
 800a2d6:	9903      	ldr	r1, [sp, #12]
 800a2d8:	2400      	movs	r4, #0
 800a2da:	002b      	movs	r3, r5
 800a2dc:	0022      	movs	r2, r4
 800a2de:	f7f8 f8f3 	bl	80024c8 <__aeabi_dsub>
 800a2e2:	0032      	movs	r2, r6
 800a2e4:	003b      	movs	r3, r7
 800a2e6:	f7f7 fe83 	bl	8001ff0 <__aeabi_dmul>
 800a2ea:	9a02      	ldr	r2, [sp, #8]
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	9006      	str	r0, [sp, #24]
 800a2f0:	9107      	str	r1, [sp, #28]
 800a2f2:	9804      	ldr	r0, [sp, #16]
 800a2f4:	9905      	ldr	r1, [sp, #20]
 800a2f6:	f7f7 fe7b 	bl	8001ff0 <__aeabi_dmul>
 800a2fa:	0002      	movs	r2, r0
 800a2fc:	000b      	movs	r3, r1
 800a2fe:	9806      	ldr	r0, [sp, #24]
 800a300:	9907      	ldr	r1, [sp, #28]
 800a302:	f7f6 ff05 	bl	8001110 <__aeabi_dadd>
 800a306:	0022      	movs	r2, r4
 800a308:	002b      	movs	r3, r5
 800a30a:	9004      	str	r0, [sp, #16]
 800a30c:	9105      	str	r1, [sp, #20]
 800a30e:	0030      	movs	r0, r6
 800a310:	0039      	movs	r1, r7
 800a312:	f7f7 fe6d 	bl	8001ff0 <__aeabi_dmul>
 800a316:	0006      	movs	r6, r0
 800a318:	000f      	movs	r7, r1
 800a31a:	000b      	movs	r3, r1
 800a31c:	0002      	movs	r2, r0
 800a31e:	9804      	ldr	r0, [sp, #16]
 800a320:	9905      	ldr	r1, [sp, #20]
 800a322:	9606      	str	r6, [sp, #24]
 800a324:	9707      	str	r7, [sp, #28]
 800a326:	f7f6 fef3 	bl	8001110 <__aeabi_dadd>
 800a32a:	4b14      	ldr	r3, [pc, #80]	; (800a37c <__ieee754_pow+0x3d8>)
 800a32c:	0005      	movs	r5, r0
 800a32e:	000c      	movs	r4, r1
 800a330:	9108      	str	r1, [sp, #32]
 800a332:	4299      	cmp	r1, r3
 800a334:	dc00      	bgt.n	800a338 <__ieee754_pow+0x394>
 800a336:	e2da      	b.n	800a8ee <__ieee754_pow+0x94a>
 800a338:	4b11      	ldr	r3, [pc, #68]	; (800a380 <__ieee754_pow+0x3dc>)
 800a33a:	18cb      	adds	r3, r1, r3
 800a33c:	4303      	orrs	r3, r0
 800a33e:	d100      	bne.n	800a342 <__ieee754_pow+0x39e>
 800a340:	e1dc      	b.n	800a6fc <__ieee754_pow+0x758>
 800a342:	9800      	ldr	r0, [sp, #0]
 800a344:	9901      	ldr	r1, [sp, #4]
 800a346:	4a0f      	ldr	r2, [pc, #60]	; (800a384 <__ieee754_pow+0x3e0>)
 800a348:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <__ieee754_pow+0x3e4>)
 800a34a:	f7f7 fe51 	bl	8001ff0 <__aeabi_dmul>
 800a34e:	4a0d      	ldr	r2, [pc, #52]	; (800a384 <__ieee754_pow+0x3e0>)
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <__ieee754_pow+0x3e4>)
 800a352:	e6f9      	b.n	800a148 <__ieee754_pow+0x1a4>
 800a354:	3ff00000 	.word	0x3ff00000
 800a358:	3ff71547 	.word	0x3ff71547
 800a35c:	f85ddf44 	.word	0xf85ddf44
 800a360:	3e54ae0b 	.word	0x3e54ae0b
 800a364:	3fd00000 	.word	0x3fd00000
 800a368:	55555555 	.word	0x55555555
 800a36c:	3fd55555 	.word	0x3fd55555
 800a370:	3fe00000 	.word	0x3fe00000
 800a374:	652b82fe 	.word	0x652b82fe
 800a378:	bff00000 	.word	0xbff00000
 800a37c:	408fffff 	.word	0x408fffff
 800a380:	bf700000 	.word	0xbf700000
 800a384:	8800759c 	.word	0x8800759c
 800a388:	7e37e43c 	.word	0x7e37e43c
 800a38c:	4bc0      	ldr	r3, [pc, #768]	; (800a690 <__ieee754_pow+0x6ec>)
 800a38e:	2200      	movs	r2, #0
 800a390:	4233      	tst	r3, r6
 800a392:	d10a      	bne.n	800a3aa <__ieee754_pow+0x406>
 800a394:	9800      	ldr	r0, [sp, #0]
 800a396:	9901      	ldr	r1, [sp, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	4bbe      	ldr	r3, [pc, #760]	; (800a694 <__ieee754_pow+0x6f0>)
 800a39c:	f7f7 fe28 	bl	8001ff0 <__aeabi_dmul>
 800a3a0:	2235      	movs	r2, #53	; 0x35
 800a3a2:	9000      	str	r0, [sp, #0]
 800a3a4:	9101      	str	r1, [sp, #4]
 800a3a6:	9c01      	ldr	r4, [sp, #4]
 800a3a8:	4252      	negs	r2, r2
 800a3aa:	49bb      	ldr	r1, [pc, #748]	; (800a698 <__ieee754_pow+0x6f4>)
 800a3ac:	1523      	asrs	r3, r4, #20
 800a3ae:	185b      	adds	r3, r3, r1
 800a3b0:	189b      	adds	r3, r3, r2
 800a3b2:	0324      	lsls	r4, r4, #12
 800a3b4:	4db9      	ldr	r5, [pc, #740]	; (800a69c <__ieee754_pow+0x6f8>)
 800a3b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a3b8:	4bb9      	ldr	r3, [pc, #740]	; (800a6a0 <__ieee754_pow+0x6fc>)
 800a3ba:	0b22      	lsrs	r2, r4, #12
 800a3bc:	4315      	orrs	r5, r2
 800a3be:	2400      	movs	r4, #0
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	dd09      	ble.n	800a3d8 <__ieee754_pow+0x434>
 800a3c4:	4bb7      	ldr	r3, [pc, #732]	; (800a6a4 <__ieee754_pow+0x700>)
 800a3c6:	3401      	adds	r4, #1
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	dd05      	ble.n	800a3d8 <__ieee754_pow+0x434>
 800a3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ce:	191b      	adds	r3, r3, r4
 800a3d0:	2400      	movs	r4, #0
 800a3d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a3d4:	4bb4      	ldr	r3, [pc, #720]	; (800a6a8 <__ieee754_pow+0x704>)
 800a3d6:	18ed      	adds	r5, r5, r3
 800a3d8:	9800      	ldr	r0, [sp, #0]
 800a3da:	9901      	ldr	r1, [sp, #4]
 800a3dc:	0029      	movs	r1, r5
 800a3de:	00e3      	lsls	r3, r4, #3
 800a3e0:	9311      	str	r3, [sp, #68]	; 0x44
 800a3e2:	4bb2      	ldr	r3, [pc, #712]	; (800a6ac <__ieee754_pow+0x708>)
 800a3e4:	00e2      	lsls	r2, r4, #3
 800a3e6:	189b      	adds	r3, r3, r2
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	900e      	str	r0, [sp, #56]	; 0x38
 800a3ee:	910f      	str	r1, [sp, #60]	; 0x3c
 800a3f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a3f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3f4:	f7f8 f868 	bl	80024c8 <__aeabi_dsub>
 800a3f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3fc:	0006      	movs	r6, r0
 800a3fe:	000f      	movs	r7, r1
 800a400:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a404:	f7f6 fe84 	bl	8001110 <__aeabi_dadd>
 800a408:	0002      	movs	r2, r0
 800a40a:	000b      	movs	r3, r1
 800a40c:	2000      	movs	r0, #0
 800a40e:	49a3      	ldr	r1, [pc, #652]	; (800a69c <__ieee754_pow+0x6f8>)
 800a410:	f7f7 f9e8 	bl	80017e4 <__aeabi_ddiv>
 800a414:	0002      	movs	r2, r0
 800a416:	000b      	movs	r3, r1
 800a418:	9012      	str	r0, [sp, #72]	; 0x48
 800a41a:	9113      	str	r1, [sp, #76]	; 0x4c
 800a41c:	0030      	movs	r0, r6
 800a41e:	0039      	movs	r1, r7
 800a420:	f7f7 fde6 	bl	8001ff0 <__aeabi_dmul>
 800a424:	9008      	str	r0, [sp, #32]
 800a426:	9109      	str	r1, [sp, #36]	; 0x24
 800a428:	9a08      	ldr	r2, [sp, #32]
 800a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42c:	2180      	movs	r1, #128	; 0x80
 800a42e:	9204      	str	r2, [sp, #16]
 800a430:	9305      	str	r3, [sp, #20]
 800a432:	2300      	movs	r3, #0
 800a434:	0589      	lsls	r1, r1, #22
 800a436:	106d      	asrs	r5, r5, #1
 800a438:	430d      	orrs	r5, r1
 800a43a:	2180      	movs	r1, #128	; 0x80
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9a04      	ldr	r2, [sp, #16]
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	9200      	str	r2, [sp, #0]
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	0309      	lsls	r1, r1, #12
 800a44a:	186d      	adds	r5, r5, r1
 800a44c:	04a1      	lsls	r1, r4, #18
 800a44e:	186b      	adds	r3, r5, r1
 800a450:	9800      	ldr	r0, [sp, #0]
 800a452:	9901      	ldr	r1, [sp, #4]
 800a454:	0014      	movs	r4, r2
 800a456:	001d      	movs	r5, r3
 800a458:	f7f7 fdca 	bl	8001ff0 <__aeabi_dmul>
 800a45c:	0002      	movs	r2, r0
 800a45e:	000b      	movs	r3, r1
 800a460:	0030      	movs	r0, r6
 800a462:	0039      	movs	r1, r7
 800a464:	f7f8 f830 	bl	80024c8 <__aeabi_dsub>
 800a468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a46c:	0006      	movs	r6, r0
 800a46e:	000f      	movs	r7, r1
 800a470:	0020      	movs	r0, r4
 800a472:	0029      	movs	r1, r5
 800a474:	f7f8 f828 	bl	80024c8 <__aeabi_dsub>
 800a478:	0002      	movs	r2, r0
 800a47a:	000b      	movs	r3, r1
 800a47c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a47e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a480:	f7f8 f822 	bl	80024c8 <__aeabi_dsub>
 800a484:	9a00      	ldr	r2, [sp, #0]
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	f7f7 fdb2 	bl	8001ff0 <__aeabi_dmul>
 800a48c:	0002      	movs	r2, r0
 800a48e:	000b      	movs	r3, r1
 800a490:	0030      	movs	r0, r6
 800a492:	0039      	movs	r1, r7
 800a494:	f7f8 f818 	bl	80024c8 <__aeabi_dsub>
 800a498:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a49a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a49c:	f7f7 fda8 	bl	8001ff0 <__aeabi_dmul>
 800a4a0:	9a08      	ldr	r2, [sp, #32]
 800a4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a4:	900a      	str	r0, [sp, #40]	; 0x28
 800a4a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4a8:	0010      	movs	r0, r2
 800a4aa:	0019      	movs	r1, r3
 800a4ac:	f7f7 fda0 	bl	8001ff0 <__aeabi_dmul>
 800a4b0:	0006      	movs	r6, r0
 800a4b2:	000f      	movs	r7, r1
 800a4b4:	4a7e      	ldr	r2, [pc, #504]	; (800a6b0 <__ieee754_pow+0x70c>)
 800a4b6:	4b7f      	ldr	r3, [pc, #508]	; (800a6b4 <__ieee754_pow+0x710>)
 800a4b8:	f7f7 fd9a 	bl	8001ff0 <__aeabi_dmul>
 800a4bc:	4a7e      	ldr	r2, [pc, #504]	; (800a6b8 <__ieee754_pow+0x714>)
 800a4be:	4b7f      	ldr	r3, [pc, #508]	; (800a6bc <__ieee754_pow+0x718>)
 800a4c0:	f7f6 fe26 	bl	8001110 <__aeabi_dadd>
 800a4c4:	0032      	movs	r2, r6
 800a4c6:	003b      	movs	r3, r7
 800a4c8:	f7f7 fd92 	bl	8001ff0 <__aeabi_dmul>
 800a4cc:	4a7c      	ldr	r2, [pc, #496]	; (800a6c0 <__ieee754_pow+0x71c>)
 800a4ce:	4b7d      	ldr	r3, [pc, #500]	; (800a6c4 <__ieee754_pow+0x720>)
 800a4d0:	f7f6 fe1e 	bl	8001110 <__aeabi_dadd>
 800a4d4:	0032      	movs	r2, r6
 800a4d6:	003b      	movs	r3, r7
 800a4d8:	f7f7 fd8a 	bl	8001ff0 <__aeabi_dmul>
 800a4dc:	4a7a      	ldr	r2, [pc, #488]	; (800a6c8 <__ieee754_pow+0x724>)
 800a4de:	4b7b      	ldr	r3, [pc, #492]	; (800a6cc <__ieee754_pow+0x728>)
 800a4e0:	f7f6 fe16 	bl	8001110 <__aeabi_dadd>
 800a4e4:	0032      	movs	r2, r6
 800a4e6:	003b      	movs	r3, r7
 800a4e8:	f7f7 fd82 	bl	8001ff0 <__aeabi_dmul>
 800a4ec:	4a78      	ldr	r2, [pc, #480]	; (800a6d0 <__ieee754_pow+0x72c>)
 800a4ee:	4b79      	ldr	r3, [pc, #484]	; (800a6d4 <__ieee754_pow+0x730>)
 800a4f0:	f7f6 fe0e 	bl	8001110 <__aeabi_dadd>
 800a4f4:	0032      	movs	r2, r6
 800a4f6:	003b      	movs	r3, r7
 800a4f8:	f7f7 fd7a 	bl	8001ff0 <__aeabi_dmul>
 800a4fc:	4a76      	ldr	r2, [pc, #472]	; (800a6d8 <__ieee754_pow+0x734>)
 800a4fe:	4b77      	ldr	r3, [pc, #476]	; (800a6dc <__ieee754_pow+0x738>)
 800a500:	f7f6 fe06 	bl	8001110 <__aeabi_dadd>
 800a504:	0032      	movs	r2, r6
 800a506:	0004      	movs	r4, r0
 800a508:	000d      	movs	r5, r1
 800a50a:	003b      	movs	r3, r7
 800a50c:	0030      	movs	r0, r6
 800a50e:	0039      	movs	r1, r7
 800a510:	f7f7 fd6e 	bl	8001ff0 <__aeabi_dmul>
 800a514:	0002      	movs	r2, r0
 800a516:	000b      	movs	r3, r1
 800a518:	0020      	movs	r0, r4
 800a51a:	0029      	movs	r1, r5
 800a51c:	f7f7 fd68 	bl	8001ff0 <__aeabi_dmul>
 800a520:	9a00      	ldr	r2, [sp, #0]
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	0004      	movs	r4, r0
 800a526:	000d      	movs	r5, r1
 800a528:	9808      	ldr	r0, [sp, #32]
 800a52a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a52c:	f7f6 fdf0 	bl	8001110 <__aeabi_dadd>
 800a530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a534:	f7f7 fd5c 	bl	8001ff0 <__aeabi_dmul>
 800a538:	0022      	movs	r2, r4
 800a53a:	002b      	movs	r3, r5
 800a53c:	f7f6 fde8 	bl	8001110 <__aeabi_dadd>
 800a540:	9a00      	ldr	r2, [sp, #0]
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	900e      	str	r0, [sp, #56]	; 0x38
 800a546:	910f      	str	r1, [sp, #60]	; 0x3c
 800a548:	0010      	movs	r0, r2
 800a54a:	0019      	movs	r1, r3
 800a54c:	f7f7 fd50 	bl	8001ff0 <__aeabi_dmul>
 800a550:	2200      	movs	r2, #0
 800a552:	4b63      	ldr	r3, [pc, #396]	; (800a6e0 <__ieee754_pow+0x73c>)
 800a554:	0004      	movs	r4, r0
 800a556:	000d      	movs	r5, r1
 800a558:	f7f6 fdda 	bl	8001110 <__aeabi_dadd>
 800a55c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a560:	f7f6 fdd6 	bl	8001110 <__aeabi_dadd>
 800a564:	9e04      	ldr	r6, [sp, #16]
 800a566:	000f      	movs	r7, r1
 800a568:	0032      	movs	r2, r6
 800a56a:	000b      	movs	r3, r1
 800a56c:	9800      	ldr	r0, [sp, #0]
 800a56e:	9901      	ldr	r1, [sp, #4]
 800a570:	f7f7 fd3e 	bl	8001ff0 <__aeabi_dmul>
 800a574:	2200      	movs	r2, #0
 800a576:	9000      	str	r0, [sp, #0]
 800a578:	9101      	str	r1, [sp, #4]
 800a57a:	4b59      	ldr	r3, [pc, #356]	; (800a6e0 <__ieee754_pow+0x73c>)
 800a57c:	0030      	movs	r0, r6
 800a57e:	0039      	movs	r1, r7
 800a580:	f7f7 ffa2 	bl	80024c8 <__aeabi_dsub>
 800a584:	0022      	movs	r2, r4
 800a586:	002b      	movs	r3, r5
 800a588:	f7f7 ff9e 	bl	80024c8 <__aeabi_dsub>
 800a58c:	0002      	movs	r2, r0
 800a58e:	000b      	movs	r3, r1
 800a590:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a592:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a594:	f7f7 ff98 	bl	80024c8 <__aeabi_dsub>
 800a598:	9a08      	ldr	r2, [sp, #32]
 800a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59c:	f7f7 fd28 	bl	8001ff0 <__aeabi_dmul>
 800a5a0:	0032      	movs	r2, r6
 800a5a2:	0004      	movs	r4, r0
 800a5a4:	000d      	movs	r5, r1
 800a5a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5aa:	003b      	movs	r3, r7
 800a5ac:	f7f7 fd20 	bl	8001ff0 <__aeabi_dmul>
 800a5b0:	0002      	movs	r2, r0
 800a5b2:	000b      	movs	r3, r1
 800a5b4:	0020      	movs	r0, r4
 800a5b6:	0029      	movs	r1, r5
 800a5b8:	f7f6 fdaa 	bl	8001110 <__aeabi_dadd>
 800a5bc:	0004      	movs	r4, r0
 800a5be:	000d      	movs	r5, r1
 800a5c0:	0002      	movs	r2, r0
 800a5c2:	000b      	movs	r3, r1
 800a5c4:	9800      	ldr	r0, [sp, #0]
 800a5c6:	9901      	ldr	r1, [sp, #4]
 800a5c8:	f7f6 fda2 	bl	8001110 <__aeabi_dadd>
 800a5cc:	22e0      	movs	r2, #224	; 0xe0
 800a5ce:	9e04      	ldr	r6, [sp, #16]
 800a5d0:	4b44      	ldr	r3, [pc, #272]	; (800a6e4 <__ieee754_pow+0x740>)
 800a5d2:	0030      	movs	r0, r6
 800a5d4:	0612      	lsls	r2, r2, #24
 800a5d6:	000f      	movs	r7, r1
 800a5d8:	f7f7 fd0a 	bl	8001ff0 <__aeabi_dmul>
 800a5dc:	9008      	str	r0, [sp, #32]
 800a5de:	9109      	str	r1, [sp, #36]	; 0x24
 800a5e0:	9a00      	ldr	r2, [sp, #0]
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	0030      	movs	r0, r6
 800a5e6:	0039      	movs	r1, r7
 800a5e8:	f7f7 ff6e 	bl	80024c8 <__aeabi_dsub>
 800a5ec:	0002      	movs	r2, r0
 800a5ee:	000b      	movs	r3, r1
 800a5f0:	0020      	movs	r0, r4
 800a5f2:	0029      	movs	r1, r5
 800a5f4:	f7f7 ff68 	bl	80024c8 <__aeabi_dsub>
 800a5f8:	4a3b      	ldr	r2, [pc, #236]	; (800a6e8 <__ieee754_pow+0x744>)
 800a5fa:	4b3a      	ldr	r3, [pc, #232]	; (800a6e4 <__ieee754_pow+0x740>)
 800a5fc:	f7f7 fcf8 	bl	8001ff0 <__aeabi_dmul>
 800a600:	4a3a      	ldr	r2, [pc, #232]	; (800a6ec <__ieee754_pow+0x748>)
 800a602:	0004      	movs	r4, r0
 800a604:	000d      	movs	r5, r1
 800a606:	0030      	movs	r0, r6
 800a608:	0039      	movs	r1, r7
 800a60a:	4b39      	ldr	r3, [pc, #228]	; (800a6f0 <__ieee754_pow+0x74c>)
 800a60c:	f7f7 fcf0 	bl	8001ff0 <__aeabi_dmul>
 800a610:	0002      	movs	r2, r0
 800a612:	000b      	movs	r3, r1
 800a614:	0020      	movs	r0, r4
 800a616:	0029      	movs	r1, r5
 800a618:	f7f6 fd7a 	bl	8001110 <__aeabi_dadd>
 800a61c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a61e:	4b35      	ldr	r3, [pc, #212]	; (800a6f4 <__ieee754_pow+0x750>)
 800a620:	189b      	adds	r3, r3, r2
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f7f6 fd73 	bl	8001110 <__aeabi_dadd>
 800a62a:	900a      	str	r0, [sp, #40]	; 0x28
 800a62c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a62e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a630:	f7f8 fb30 	bl	8002c94 <__aeabi_i2d>
 800a634:	0004      	movs	r4, r0
 800a636:	000d      	movs	r5, r1
 800a638:	9808      	ldr	r0, [sp, #32]
 800a63a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a63c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a63e:	4b2e      	ldr	r3, [pc, #184]	; (800a6f8 <__ieee754_pow+0x754>)
 800a640:	189b      	adds	r3, r3, r2
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	9200      	str	r2, [sp, #0]
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a64e:	f7f6 fd5f 	bl	8001110 <__aeabi_dadd>
 800a652:	9a00      	ldr	r2, [sp, #0]
 800a654:	9b01      	ldr	r3, [sp, #4]
 800a656:	f7f6 fd5b 	bl	8001110 <__aeabi_dadd>
 800a65a:	0022      	movs	r2, r4
 800a65c:	002b      	movs	r3, r5
 800a65e:	f7f6 fd57 	bl	8001110 <__aeabi_dadd>
 800a662:	9804      	ldr	r0, [sp, #16]
 800a664:	0022      	movs	r2, r4
 800a666:	002b      	movs	r3, r5
 800a668:	0006      	movs	r6, r0
 800a66a:	000f      	movs	r7, r1
 800a66c:	f7f7 ff2c 	bl	80024c8 <__aeabi_dsub>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	f7f7 ff28 	bl	80024c8 <__aeabi_dsub>
 800a678:	9a08      	ldr	r2, [sp, #32]
 800a67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67c:	f7f7 ff24 	bl	80024c8 <__aeabi_dsub>
 800a680:	0002      	movs	r2, r0
 800a682:	000b      	movs	r3, r1
 800a684:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a686:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a688:	e614      	b.n	800a2b4 <__ieee754_pow+0x310>
 800a68a:	2300      	movs	r3, #0
 800a68c:	4c03      	ldr	r4, [pc, #12]	; (800a69c <__ieee754_pow+0x6f8>)
 800a68e:	e61d      	b.n	800a2cc <__ieee754_pow+0x328>
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	43400000 	.word	0x43400000
 800a698:	fffffc01 	.word	0xfffffc01
 800a69c:	3ff00000 	.word	0x3ff00000
 800a6a0:	0003988e 	.word	0x0003988e
 800a6a4:	000bb679 	.word	0x000bb679
 800a6a8:	fff00000 	.word	0xfff00000
 800a6ac:	0800b020 	.word	0x0800b020
 800a6b0:	4a454eef 	.word	0x4a454eef
 800a6b4:	3fca7e28 	.word	0x3fca7e28
 800a6b8:	93c9db65 	.word	0x93c9db65
 800a6bc:	3fcd864a 	.word	0x3fcd864a
 800a6c0:	a91d4101 	.word	0xa91d4101
 800a6c4:	3fd17460 	.word	0x3fd17460
 800a6c8:	518f264d 	.word	0x518f264d
 800a6cc:	3fd55555 	.word	0x3fd55555
 800a6d0:	db6fabff 	.word	0xdb6fabff
 800a6d4:	3fdb6db6 	.word	0x3fdb6db6
 800a6d8:	33333303 	.word	0x33333303
 800a6dc:	3fe33333 	.word	0x3fe33333
 800a6e0:	40080000 	.word	0x40080000
 800a6e4:	3feec709 	.word	0x3feec709
 800a6e8:	dc3a03fd 	.word	0xdc3a03fd
 800a6ec:	145b01f5 	.word	0x145b01f5
 800a6f0:	be3e2fe0 	.word	0xbe3e2fe0
 800a6f4:	0800b040 	.word	0x0800b040
 800a6f8:	0800b030 	.word	0x0800b030
 800a6fc:	4a8f      	ldr	r2, [pc, #572]	; (800a93c <__ieee754_pow+0x998>)
 800a6fe:	4b90      	ldr	r3, [pc, #576]	; (800a940 <__ieee754_pow+0x99c>)
 800a700:	9804      	ldr	r0, [sp, #16]
 800a702:	9905      	ldr	r1, [sp, #20]
 800a704:	f7f6 fd04 	bl	8001110 <__aeabi_dadd>
 800a708:	0032      	movs	r2, r6
 800a70a:	9002      	str	r0, [sp, #8]
 800a70c:	9103      	str	r1, [sp, #12]
 800a70e:	003b      	movs	r3, r7
 800a710:	0028      	movs	r0, r5
 800a712:	0021      	movs	r1, r4
 800a714:	f7f7 fed8 	bl	80024c8 <__aeabi_dsub>
 800a718:	0002      	movs	r2, r0
 800a71a:	000b      	movs	r3, r1
 800a71c:	9802      	ldr	r0, [sp, #8]
 800a71e:	9903      	ldr	r1, [sp, #12]
 800a720:	f7f5 fdb2 	bl	8000288 <__aeabi_dcmpgt>
 800a724:	2800      	cmp	r0, #0
 800a726:	d000      	beq.n	800a72a <__ieee754_pow+0x786>
 800a728:	e60b      	b.n	800a342 <__ieee754_pow+0x39e>
 800a72a:	2100      	movs	r1, #0
 800a72c:	4a85      	ldr	r2, [pc, #532]	; (800a944 <__ieee754_pow+0x9a0>)
 800a72e:	0063      	lsls	r3, r4, #1
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	9102      	str	r1, [sp, #8]
 800a734:	4293      	cmp	r3, r2
 800a736:	dd25      	ble.n	800a784 <__ieee754_pow+0x7e0>
 800a738:	4a83      	ldr	r2, [pc, #524]	; (800a948 <__ieee754_pow+0x9a4>)
 800a73a:	151b      	asrs	r3, r3, #20
 800a73c:	189b      	adds	r3, r3, r2
 800a73e:	2280      	movs	r2, #128	; 0x80
 800a740:	0352      	lsls	r2, r2, #13
 800a742:	4694      	mov	ip, r2
 800a744:	411a      	asrs	r2, r3
 800a746:	1914      	adds	r4, r2, r4
 800a748:	4b80      	ldr	r3, [pc, #512]	; (800a94c <__ieee754_pow+0x9a8>)
 800a74a:	0060      	lsls	r0, r4, #1
 800a74c:	4d80      	ldr	r5, [pc, #512]	; (800a950 <__ieee754_pow+0x9ac>)
 800a74e:	0d40      	lsrs	r0, r0, #21
 800a750:	18c0      	adds	r0, r0, r3
 800a752:	4105      	asrs	r5, r0
 800a754:	0021      	movs	r1, r4
 800a756:	43a9      	bics	r1, r5
 800a758:	000b      	movs	r3, r1
 800a75a:	4661      	mov	r1, ip
 800a75c:	0324      	lsls	r4, r4, #12
 800a75e:	0b24      	lsrs	r4, r4, #12
 800a760:	4321      	orrs	r1, r4
 800a762:	2414      	movs	r4, #20
 800a764:	1a20      	subs	r0, r4, r0
 800a766:	4101      	asrs	r1, r0
 800a768:	9102      	str	r1, [sp, #8]
 800a76a:	9908      	ldr	r1, [sp, #32]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2900      	cmp	r1, #0
 800a770:	da02      	bge.n	800a778 <__ieee754_pow+0x7d4>
 800a772:	9902      	ldr	r1, [sp, #8]
 800a774:	4249      	negs	r1, r1
 800a776:	9102      	str	r1, [sp, #8]
 800a778:	0030      	movs	r0, r6
 800a77a:	0039      	movs	r1, r7
 800a77c:	f7f7 fea4 	bl	80024c8 <__aeabi_dsub>
 800a780:	9006      	str	r0, [sp, #24]
 800a782:	9107      	str	r1, [sp, #28]
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	9b05      	ldr	r3, [sp, #20]
 800a788:	9806      	ldr	r0, [sp, #24]
 800a78a:	9907      	ldr	r1, [sp, #28]
 800a78c:	2600      	movs	r6, #0
 800a78e:	f7f6 fcbf 	bl	8001110 <__aeabi_dadd>
 800a792:	2200      	movs	r2, #0
 800a794:	0030      	movs	r0, r6
 800a796:	4b6f      	ldr	r3, [pc, #444]	; (800a954 <__ieee754_pow+0x9b0>)
 800a798:	000f      	movs	r7, r1
 800a79a:	f7f7 fc29 	bl	8001ff0 <__aeabi_dmul>
 800a79e:	9a06      	ldr	r2, [sp, #24]
 800a7a0:	9b07      	ldr	r3, [sp, #28]
 800a7a2:	9008      	str	r0, [sp, #32]
 800a7a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a7a6:	0030      	movs	r0, r6
 800a7a8:	0039      	movs	r1, r7
 800a7aa:	f7f7 fe8d 	bl	80024c8 <__aeabi_dsub>
 800a7ae:	0002      	movs	r2, r0
 800a7b0:	000b      	movs	r3, r1
 800a7b2:	9804      	ldr	r0, [sp, #16]
 800a7b4:	9905      	ldr	r1, [sp, #20]
 800a7b6:	f7f7 fe87 	bl	80024c8 <__aeabi_dsub>
 800a7ba:	4a67      	ldr	r2, [pc, #412]	; (800a958 <__ieee754_pow+0x9b4>)
 800a7bc:	4b67      	ldr	r3, [pc, #412]	; (800a95c <__ieee754_pow+0x9b8>)
 800a7be:	f7f7 fc17 	bl	8001ff0 <__aeabi_dmul>
 800a7c2:	4a67      	ldr	r2, [pc, #412]	; (800a960 <__ieee754_pow+0x9bc>)
 800a7c4:	0004      	movs	r4, r0
 800a7c6:	000d      	movs	r5, r1
 800a7c8:	0030      	movs	r0, r6
 800a7ca:	0039      	movs	r1, r7
 800a7cc:	4b65      	ldr	r3, [pc, #404]	; (800a964 <__ieee754_pow+0x9c0>)
 800a7ce:	f7f7 fc0f 	bl	8001ff0 <__aeabi_dmul>
 800a7d2:	0002      	movs	r2, r0
 800a7d4:	000b      	movs	r3, r1
 800a7d6:	0020      	movs	r0, r4
 800a7d8:	0029      	movs	r1, r5
 800a7da:	f7f6 fc99 	bl	8001110 <__aeabi_dadd>
 800a7de:	0004      	movs	r4, r0
 800a7e0:	000d      	movs	r5, r1
 800a7e2:	0002      	movs	r2, r0
 800a7e4:	000b      	movs	r3, r1
 800a7e6:	9808      	ldr	r0, [sp, #32]
 800a7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ea:	f7f6 fc91 	bl	8001110 <__aeabi_dadd>
 800a7ee:	9a08      	ldr	r2, [sp, #32]
 800a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f2:	0006      	movs	r6, r0
 800a7f4:	000f      	movs	r7, r1
 800a7f6:	f7f7 fe67 	bl	80024c8 <__aeabi_dsub>
 800a7fa:	0002      	movs	r2, r0
 800a7fc:	000b      	movs	r3, r1
 800a7fe:	0020      	movs	r0, r4
 800a800:	0029      	movs	r1, r5
 800a802:	f7f7 fe61 	bl	80024c8 <__aeabi_dsub>
 800a806:	0032      	movs	r2, r6
 800a808:	9004      	str	r0, [sp, #16]
 800a80a:	9105      	str	r1, [sp, #20]
 800a80c:	003b      	movs	r3, r7
 800a80e:	0030      	movs	r0, r6
 800a810:	0039      	movs	r1, r7
 800a812:	f7f7 fbed 	bl	8001ff0 <__aeabi_dmul>
 800a816:	0004      	movs	r4, r0
 800a818:	000d      	movs	r5, r1
 800a81a:	4a53      	ldr	r2, [pc, #332]	; (800a968 <__ieee754_pow+0x9c4>)
 800a81c:	4b53      	ldr	r3, [pc, #332]	; (800a96c <__ieee754_pow+0x9c8>)
 800a81e:	f7f7 fbe7 	bl	8001ff0 <__aeabi_dmul>
 800a822:	4a53      	ldr	r2, [pc, #332]	; (800a970 <__ieee754_pow+0x9cc>)
 800a824:	4b53      	ldr	r3, [pc, #332]	; (800a974 <__ieee754_pow+0x9d0>)
 800a826:	f7f7 fe4f 	bl	80024c8 <__aeabi_dsub>
 800a82a:	0022      	movs	r2, r4
 800a82c:	002b      	movs	r3, r5
 800a82e:	f7f7 fbdf 	bl	8001ff0 <__aeabi_dmul>
 800a832:	4a51      	ldr	r2, [pc, #324]	; (800a978 <__ieee754_pow+0x9d4>)
 800a834:	4b51      	ldr	r3, [pc, #324]	; (800a97c <__ieee754_pow+0x9d8>)
 800a836:	f7f6 fc6b 	bl	8001110 <__aeabi_dadd>
 800a83a:	0022      	movs	r2, r4
 800a83c:	002b      	movs	r3, r5
 800a83e:	f7f7 fbd7 	bl	8001ff0 <__aeabi_dmul>
 800a842:	4a4f      	ldr	r2, [pc, #316]	; (800a980 <__ieee754_pow+0x9dc>)
 800a844:	4b4f      	ldr	r3, [pc, #316]	; (800a984 <__ieee754_pow+0x9e0>)
 800a846:	f7f7 fe3f 	bl	80024c8 <__aeabi_dsub>
 800a84a:	0022      	movs	r2, r4
 800a84c:	002b      	movs	r3, r5
 800a84e:	f7f7 fbcf 	bl	8001ff0 <__aeabi_dmul>
 800a852:	4a4d      	ldr	r2, [pc, #308]	; (800a988 <__ieee754_pow+0x9e4>)
 800a854:	4b4d      	ldr	r3, [pc, #308]	; (800a98c <__ieee754_pow+0x9e8>)
 800a856:	f7f6 fc5b 	bl	8001110 <__aeabi_dadd>
 800a85a:	0022      	movs	r2, r4
 800a85c:	002b      	movs	r3, r5
 800a85e:	f7f7 fbc7 	bl	8001ff0 <__aeabi_dmul>
 800a862:	0002      	movs	r2, r0
 800a864:	000b      	movs	r3, r1
 800a866:	0030      	movs	r0, r6
 800a868:	0039      	movs	r1, r7
 800a86a:	f7f7 fe2d 	bl	80024c8 <__aeabi_dsub>
 800a86e:	0004      	movs	r4, r0
 800a870:	000d      	movs	r5, r1
 800a872:	0002      	movs	r2, r0
 800a874:	000b      	movs	r3, r1
 800a876:	0030      	movs	r0, r6
 800a878:	0039      	movs	r1, r7
 800a87a:	f7f7 fbb9 	bl	8001ff0 <__aeabi_dmul>
 800a87e:	2380      	movs	r3, #128	; 0x80
 800a880:	9006      	str	r0, [sp, #24]
 800a882:	9107      	str	r1, [sp, #28]
 800a884:	2200      	movs	r2, #0
 800a886:	0020      	movs	r0, r4
 800a888:	0029      	movs	r1, r5
 800a88a:	05db      	lsls	r3, r3, #23
 800a88c:	f7f7 fe1c 	bl	80024c8 <__aeabi_dsub>
 800a890:	0002      	movs	r2, r0
 800a892:	000b      	movs	r3, r1
 800a894:	9806      	ldr	r0, [sp, #24]
 800a896:	9907      	ldr	r1, [sp, #28]
 800a898:	f7f6 ffa4 	bl	80017e4 <__aeabi_ddiv>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	9b05      	ldr	r3, [sp, #20]
 800a8a0:	0004      	movs	r4, r0
 800a8a2:	000d      	movs	r5, r1
 800a8a4:	0030      	movs	r0, r6
 800a8a6:	0039      	movs	r1, r7
 800a8a8:	f7f7 fba2 	bl	8001ff0 <__aeabi_dmul>
 800a8ac:	9a04      	ldr	r2, [sp, #16]
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	f7f6 fc2e 	bl	8001110 <__aeabi_dadd>
 800a8b4:	0002      	movs	r2, r0
 800a8b6:	000b      	movs	r3, r1
 800a8b8:	0020      	movs	r0, r4
 800a8ba:	0029      	movs	r1, r5
 800a8bc:	f7f7 fe04 	bl	80024c8 <__aeabi_dsub>
 800a8c0:	0032      	movs	r2, r6
 800a8c2:	003b      	movs	r3, r7
 800a8c4:	f7f7 fe00 	bl	80024c8 <__aeabi_dsub>
 800a8c8:	0002      	movs	r2, r0
 800a8ca:	000b      	movs	r3, r1
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	4930      	ldr	r1, [pc, #192]	; (800a990 <__ieee754_pow+0x9ec>)
 800a8d0:	f7f7 fdfa 	bl	80024c8 <__aeabi_dsub>
 800a8d4:	9b02      	ldr	r3, [sp, #8]
 800a8d6:	051b      	lsls	r3, r3, #20
 800a8d8:	185b      	adds	r3, r3, r1
 800a8da:	151a      	asrs	r2, r3, #20
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	dc26      	bgt.n	800a92e <__ieee754_pow+0x98a>
 800a8e0:	9a02      	ldr	r2, [sp, #8]
 800a8e2:	f000 f9ad 	bl	800ac40 <scalbn>
 800a8e6:	9a00      	ldr	r2, [sp, #0]
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	f7ff fc2d 	bl	800a148 <__ieee754_pow+0x1a4>
 800a8ee:	4a29      	ldr	r2, [pc, #164]	; (800a994 <__ieee754_pow+0x9f0>)
 800a8f0:	004b      	lsls	r3, r1, #1
 800a8f2:	085b      	lsrs	r3, r3, #1
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	dc00      	bgt.n	800a8fa <__ieee754_pow+0x956>
 800a8f8:	e717      	b.n	800a72a <__ieee754_pow+0x786>
 800a8fa:	4b27      	ldr	r3, [pc, #156]	; (800a998 <__ieee754_pow+0x9f4>)
 800a8fc:	18cb      	adds	r3, r1, r3
 800a8fe:	4303      	orrs	r3, r0
 800a900:	d009      	beq.n	800a916 <__ieee754_pow+0x972>
 800a902:	9800      	ldr	r0, [sp, #0]
 800a904:	9901      	ldr	r1, [sp, #4]
 800a906:	4a25      	ldr	r2, [pc, #148]	; (800a99c <__ieee754_pow+0x9f8>)
 800a908:	4b25      	ldr	r3, [pc, #148]	; (800a9a0 <__ieee754_pow+0x9fc>)
 800a90a:	f7f7 fb71 	bl	8001ff0 <__aeabi_dmul>
 800a90e:	4a23      	ldr	r2, [pc, #140]	; (800a99c <__ieee754_pow+0x9f8>)
 800a910:	4b23      	ldr	r3, [pc, #140]	; (800a9a0 <__ieee754_pow+0x9fc>)
 800a912:	f7ff fc19 	bl	800a148 <__ieee754_pow+0x1a4>
 800a916:	0032      	movs	r2, r6
 800a918:	003b      	movs	r3, r7
 800a91a:	f7f7 fdd5 	bl	80024c8 <__aeabi_dsub>
 800a91e:	9a04      	ldr	r2, [sp, #16]
 800a920:	9b05      	ldr	r3, [sp, #20]
 800a922:	f7f5 fcbb 	bl	800029c <__aeabi_dcmpge>
 800a926:	2800      	cmp	r0, #0
 800a928:	d100      	bne.n	800a92c <__ieee754_pow+0x988>
 800a92a:	e6fe      	b.n	800a72a <__ieee754_pow+0x786>
 800a92c:	e7e9      	b.n	800a902 <__ieee754_pow+0x95e>
 800a92e:	0019      	movs	r1, r3
 800a930:	e7d9      	b.n	800a8e6 <__ieee754_pow+0x942>
 800a932:	2300      	movs	r3, #0
 800a934:	4c16      	ldr	r4, [pc, #88]	; (800a990 <__ieee754_pow+0x9ec>)
 800a936:	f7ff fbec 	bl	800a112 <__ieee754_pow+0x16e>
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	652b82fe 	.word	0x652b82fe
 800a940:	3c971547 	.word	0x3c971547
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	fffffc02 	.word	0xfffffc02
 800a94c:	fffffc01 	.word	0xfffffc01
 800a950:	000fffff 	.word	0x000fffff
 800a954:	3fe62e43 	.word	0x3fe62e43
 800a958:	fefa39ef 	.word	0xfefa39ef
 800a95c:	3fe62e42 	.word	0x3fe62e42
 800a960:	0ca86c39 	.word	0x0ca86c39
 800a964:	be205c61 	.word	0xbe205c61
 800a968:	72bea4d0 	.word	0x72bea4d0
 800a96c:	3e663769 	.word	0x3e663769
 800a970:	c5d26bf1 	.word	0xc5d26bf1
 800a974:	3ebbbd41 	.word	0x3ebbbd41
 800a978:	af25de2c 	.word	0xaf25de2c
 800a97c:	3f11566a 	.word	0x3f11566a
 800a980:	16bebd93 	.word	0x16bebd93
 800a984:	3f66c16c 	.word	0x3f66c16c
 800a988:	5555553e 	.word	0x5555553e
 800a98c:	3fc55555 	.word	0x3fc55555
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	4090cbff 	.word	0x4090cbff
 800a998:	3f6f3400 	.word	0x3f6f3400
 800a99c:	c2f8f359 	.word	0xc2f8f359
 800a9a0:	01a56e1f 	.word	0x01a56e1f

0800a9a4 <__ieee754_sqrt>:
 800a9a4:	4b56      	ldr	r3, [pc, #344]	; (800ab00 <__ieee754_sqrt+0x15c>)
 800a9a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a8:	0002      	movs	r2, r0
 800a9aa:	0005      	movs	r5, r0
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	000c      	movs	r4, r1
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	4008      	ands	r0, r1
 800a9b4:	4298      	cmp	r0, r3
 800a9b6:	d10f      	bne.n	800a9d8 <__ieee754_sqrt+0x34>
 800a9b8:	000b      	movs	r3, r1
 800a9ba:	0028      	movs	r0, r5
 800a9bc:	f7f7 fb18 	bl	8001ff0 <__aeabi_dmul>
 800a9c0:	0002      	movs	r2, r0
 800a9c2:	000b      	movs	r3, r1
 800a9c4:	0028      	movs	r0, r5
 800a9c6:	0021      	movs	r1, r4
 800a9c8:	f7f6 fba2 	bl	8001110 <__aeabi_dadd>
 800a9cc:	0005      	movs	r5, r0
 800a9ce:	000c      	movs	r4, r1
 800a9d0:	0028      	movs	r0, r5
 800a9d2:	0021      	movs	r1, r4
 800a9d4:	b005      	add	sp, #20
 800a9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	dc10      	bgt.n	800a9fe <__ieee754_sqrt+0x5a>
 800a9dc:	004b      	lsls	r3, r1, #1
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	432b      	orrs	r3, r5
 800a9e2:	d0f5      	beq.n	800a9d0 <__ieee754_sqrt+0x2c>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4281      	cmp	r1, r0
 800a9e8:	d100      	bne.n	800a9ec <__ieee754_sqrt+0x48>
 800a9ea:	e080      	b.n	800aaee <__ieee754_sqrt+0x14a>
 800a9ec:	000b      	movs	r3, r1
 800a9ee:	0028      	movs	r0, r5
 800a9f0:	f7f7 fd6a 	bl	80024c8 <__aeabi_dsub>
 800a9f4:	0002      	movs	r2, r0
 800a9f6:	000b      	movs	r3, r1
 800a9f8:	f7f6 fef4 	bl	80017e4 <__aeabi_ddiv>
 800a9fc:	e7e6      	b.n	800a9cc <__ieee754_sqrt+0x28>
 800a9fe:	1508      	asrs	r0, r1, #20
 800aa00:	d075      	beq.n	800aaee <__ieee754_sqrt+0x14a>
 800aa02:	4b40      	ldr	r3, [pc, #256]	; (800ab04 <__ieee754_sqrt+0x160>)
 800aa04:	0309      	lsls	r1, r1, #12
 800aa06:	18c4      	adds	r4, r0, r3
 800aa08:	2380      	movs	r3, #128	; 0x80
 800aa0a:	0b09      	lsrs	r1, r1, #12
 800aa0c:	035b      	lsls	r3, r3, #13
 800aa0e:	4319      	orrs	r1, r3
 800aa10:	07c3      	lsls	r3, r0, #31
 800aa12:	d403      	bmi.n	800aa1c <__ieee754_sqrt+0x78>
 800aa14:	0fd3      	lsrs	r3, r2, #31
 800aa16:	0049      	lsls	r1, r1, #1
 800aa18:	18c9      	adds	r1, r1, r3
 800aa1a:	0052      	lsls	r2, r2, #1
 800aa1c:	1063      	asrs	r3, r4, #1
 800aa1e:	2400      	movs	r4, #0
 800aa20:	0049      	lsls	r1, r1, #1
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	0fd3      	lsrs	r3, r2, #31
 800aa26:	18cb      	adds	r3, r1, r3
 800aa28:	2180      	movs	r1, #128	; 0x80
 800aa2a:	2516      	movs	r5, #22
 800aa2c:	0020      	movs	r0, r4
 800aa2e:	0052      	lsls	r2, r2, #1
 800aa30:	0389      	lsls	r1, r1, #14
 800aa32:	1846      	adds	r6, r0, r1
 800aa34:	429e      	cmp	r6, r3
 800aa36:	dc02      	bgt.n	800aa3e <__ieee754_sqrt+0x9a>
 800aa38:	1870      	adds	r0, r6, r1
 800aa3a:	1b9b      	subs	r3, r3, r6
 800aa3c:	1864      	adds	r4, r4, r1
 800aa3e:	0fd6      	lsrs	r6, r2, #31
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	3d01      	subs	r5, #1
 800aa44:	18f3      	adds	r3, r6, r3
 800aa46:	0052      	lsls	r2, r2, #1
 800aa48:	0849      	lsrs	r1, r1, #1
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	d1f1      	bne.n	800aa32 <__ieee754_sqrt+0x8e>
 800aa4e:	2620      	movs	r6, #32
 800aa50:	2780      	movs	r7, #128	; 0x80
 800aa52:	0029      	movs	r1, r5
 800aa54:	9601      	str	r6, [sp, #4]
 800aa56:	063f      	lsls	r7, r7, #24
 800aa58:	197e      	adds	r6, r7, r5
 800aa5a:	46b4      	mov	ip, r6
 800aa5c:	4283      	cmp	r3, r0
 800aa5e:	dc02      	bgt.n	800aa66 <__ieee754_sqrt+0xc2>
 800aa60:	d114      	bne.n	800aa8c <__ieee754_sqrt+0xe8>
 800aa62:	4296      	cmp	r6, r2
 800aa64:	d812      	bhi.n	800aa8c <__ieee754_sqrt+0xe8>
 800aa66:	4665      	mov	r5, ip
 800aa68:	4666      	mov	r6, ip
 800aa6a:	19ed      	adds	r5, r5, r7
 800aa6c:	9002      	str	r0, [sp, #8]
 800aa6e:	2e00      	cmp	r6, #0
 800aa70:	da03      	bge.n	800aa7a <__ieee754_sqrt+0xd6>
 800aa72:	43ee      	mvns	r6, r5
 800aa74:	0ff6      	lsrs	r6, r6, #31
 800aa76:	1986      	adds	r6, r0, r6
 800aa78:	9602      	str	r6, [sp, #8]
 800aa7a:	1a1b      	subs	r3, r3, r0
 800aa7c:	4562      	cmp	r2, ip
 800aa7e:	4180      	sbcs	r0, r0
 800aa80:	4240      	negs	r0, r0
 800aa82:	1a1b      	subs	r3, r3, r0
 800aa84:	4660      	mov	r0, ip
 800aa86:	1a12      	subs	r2, r2, r0
 800aa88:	9802      	ldr	r0, [sp, #8]
 800aa8a:	19c9      	adds	r1, r1, r7
 800aa8c:	0fd6      	lsrs	r6, r2, #31
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	18f3      	adds	r3, r6, r3
 800aa92:	9e01      	ldr	r6, [sp, #4]
 800aa94:	0052      	lsls	r2, r2, #1
 800aa96:	3e01      	subs	r6, #1
 800aa98:	087f      	lsrs	r7, r7, #1
 800aa9a:	9601      	str	r6, [sp, #4]
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	d1db      	bne.n	800aa58 <__ieee754_sqrt+0xb4>
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	d003      	beq.n	800aaac <__ieee754_sqrt+0x108>
 800aaa4:	1c4b      	adds	r3, r1, #1
 800aaa6:	d127      	bne.n	800aaf8 <__ieee754_sqrt+0x154>
 800aaa8:	0031      	movs	r1, r6
 800aaaa:	3401      	adds	r4, #1
 800aaac:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <__ieee754_sqrt+0x164>)
 800aaae:	1060      	asrs	r0, r4, #1
 800aab0:	18c0      	adds	r0, r0, r3
 800aab2:	0849      	lsrs	r1, r1, #1
 800aab4:	07e3      	lsls	r3, r4, #31
 800aab6:	d502      	bpl.n	800aabe <__ieee754_sqrt+0x11a>
 800aab8:	2380      	movs	r3, #128	; 0x80
 800aaba:	061b      	lsls	r3, r3, #24
 800aabc:	4319      	orrs	r1, r3
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	000d      	movs	r5, r1
 800aac2:	051c      	lsls	r4, r3, #20
 800aac4:	1823      	adds	r3, r4, r0
 800aac6:	001c      	movs	r4, r3
 800aac8:	e782      	b.n	800a9d0 <__ieee754_sqrt+0x2c>
 800aaca:	0ad1      	lsrs	r1, r2, #11
 800aacc:	3b15      	subs	r3, #21
 800aace:	0552      	lsls	r2, r2, #21
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d0fa      	beq.n	800aaca <__ieee754_sqrt+0x126>
 800aad4:	2480      	movs	r4, #128	; 0x80
 800aad6:	0364      	lsls	r4, r4, #13
 800aad8:	4221      	tst	r1, r4
 800aada:	d00a      	beq.n	800aaf2 <__ieee754_sqrt+0x14e>
 800aadc:	2420      	movs	r4, #32
 800aade:	0016      	movs	r6, r2
 800aae0:	1a24      	subs	r4, r4, r0
 800aae2:	40e6      	lsrs	r6, r4
 800aae4:	1e45      	subs	r5, r0, #1
 800aae6:	4082      	lsls	r2, r0
 800aae8:	4331      	orrs	r1, r6
 800aaea:	1b58      	subs	r0, r3, r5
 800aaec:	e789      	b.n	800aa02 <__ieee754_sqrt+0x5e>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e7ee      	b.n	800aad0 <__ieee754_sqrt+0x12c>
 800aaf2:	0049      	lsls	r1, r1, #1
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	e7ef      	b.n	800aad8 <__ieee754_sqrt+0x134>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	3101      	adds	r1, #1
 800aafc:	4399      	bics	r1, r3
 800aafe:	e7d5      	b.n	800aaac <__ieee754_sqrt+0x108>
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	fffffc01 	.word	0xfffffc01
 800ab08:	3fe00000 	.word	0x3fe00000

0800ab0c <fabs>:
 800ab0c:	004b      	lsls	r3, r1, #1
 800ab0e:	0859      	lsrs	r1, r3, #1
 800ab10:	4770      	bx	lr
	...

0800ab14 <finite>:
 800ab14:	4b02      	ldr	r3, [pc, #8]	; (800ab20 <finite+0xc>)
 800ab16:	0048      	lsls	r0, r1, #1
 800ab18:	0840      	lsrs	r0, r0, #1
 800ab1a:	18c0      	adds	r0, r0, r3
 800ab1c:	0fc0      	lsrs	r0, r0, #31
 800ab1e:	4770      	bx	lr
 800ab20:	80100000 	.word	0x80100000

0800ab24 <nan>:
 800ab24:	2000      	movs	r0, #0
 800ab26:	4901      	ldr	r1, [pc, #4]	; (800ab2c <nan+0x8>)
 800ab28:	4770      	bx	lr
 800ab2a:	46c0      	nop			; (mov r8, r8)
 800ab2c:	7ff80000 	.word	0x7ff80000

0800ab30 <rint>:
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab32:	004a      	lsls	r2, r1, #1
 800ab34:	4e3e      	ldr	r6, [pc, #248]	; (800ac30 <rint+0x100>)
 800ab36:	0d52      	lsrs	r2, r2, #21
 800ab38:	b085      	sub	sp, #20
 800ab3a:	1996      	adds	r6, r2, r6
 800ab3c:	000d      	movs	r5, r1
 800ab3e:	0003      	movs	r3, r0
 800ab40:	9101      	str	r1, [sp, #4]
 800ab42:	0fcc      	lsrs	r4, r1, #31
 800ab44:	2e13      	cmp	r6, #19
 800ab46:	dc57      	bgt.n	800abf8 <rint+0xc8>
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	da2a      	bge.n	800aba2 <rint+0x72>
 800ab4c:	004a      	lsls	r2, r1, #1
 800ab4e:	0852      	lsrs	r2, r2, #1
 800ab50:	4302      	orrs	r2, r0
 800ab52:	d024      	beq.n	800ab9e <rint+0x6e>
 800ab54:	030a      	lsls	r2, r1, #12
 800ab56:	0b12      	lsrs	r2, r2, #12
 800ab58:	4302      	orrs	r2, r0
 800ab5a:	4253      	negs	r3, r2
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	2280      	movs	r2, #128	; 0x80
 800ab60:	0c4d      	lsrs	r5, r1, #17
 800ab62:	0312      	lsls	r2, r2, #12
 800ab64:	0b1b      	lsrs	r3, r3, #12
 800ab66:	4013      	ands	r3, r2
 800ab68:	046d      	lsls	r5, r5, #17
 800ab6a:	432b      	orrs	r3, r5
 800ab6c:	0019      	movs	r1, r3
 800ab6e:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <rint+0x104>)
 800ab70:	00e2      	lsls	r2, r4, #3
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	681e      	ldr	r6, [r3, #0]
 800ab76:	685f      	ldr	r7, [r3, #4]
 800ab78:	0002      	movs	r2, r0
 800ab7a:	000b      	movs	r3, r1
 800ab7c:	0030      	movs	r0, r6
 800ab7e:	0039      	movs	r1, r7
 800ab80:	f7f6 fac6 	bl	8001110 <__aeabi_dadd>
 800ab84:	9002      	str	r0, [sp, #8]
 800ab86:	9103      	str	r1, [sp, #12]
 800ab88:	9802      	ldr	r0, [sp, #8]
 800ab8a:	9903      	ldr	r1, [sp, #12]
 800ab8c:	003b      	movs	r3, r7
 800ab8e:	0032      	movs	r2, r6
 800ab90:	f7f7 fc9a 	bl	80024c8 <__aeabi_dsub>
 800ab94:	004b      	lsls	r3, r1, #1
 800ab96:	085b      	lsrs	r3, r3, #1
 800ab98:	07e4      	lsls	r4, r4, #31
 800ab9a:	4323      	orrs	r3, r4
 800ab9c:	0019      	movs	r1, r3
 800ab9e:	b005      	add	sp, #20
 800aba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba2:	4a25      	ldr	r2, [pc, #148]	; (800ac38 <rint+0x108>)
 800aba4:	4132      	asrs	r2, r6
 800aba6:	0017      	movs	r7, r2
 800aba8:	400f      	ands	r7, r1
 800abaa:	4307      	orrs	r7, r0
 800abac:	d0f7      	beq.n	800ab9e <rint+0x6e>
 800abae:	0852      	lsrs	r2, r2, #1
 800abb0:	0011      	movs	r1, r2
 800abb2:	4029      	ands	r1, r5
 800abb4:	430b      	orrs	r3, r1
 800abb6:	d00a      	beq.n	800abce <rint+0x9e>
 800abb8:	2300      	movs	r3, #0
 800abba:	2e13      	cmp	r6, #19
 800abbc:	d101      	bne.n	800abc2 <rint+0x92>
 800abbe:	2380      	movs	r3, #128	; 0x80
 800abc0:	061b      	lsls	r3, r3, #24
 800abc2:	2780      	movs	r7, #128	; 0x80
 800abc4:	02ff      	lsls	r7, r7, #11
 800abc6:	4137      	asrs	r7, r6
 800abc8:	4395      	bics	r5, r2
 800abca:	432f      	orrs	r7, r5
 800abcc:	9701      	str	r7, [sp, #4]
 800abce:	9901      	ldr	r1, [sp, #4]
 800abd0:	001a      	movs	r2, r3
 800abd2:	000b      	movs	r3, r1
 800abd4:	4917      	ldr	r1, [pc, #92]	; (800ac34 <rint+0x104>)
 800abd6:	00e4      	lsls	r4, r4, #3
 800abd8:	190c      	adds	r4, r1, r4
 800abda:	6865      	ldr	r5, [r4, #4]
 800abdc:	6824      	ldr	r4, [r4, #0]
 800abde:	0020      	movs	r0, r4
 800abe0:	0029      	movs	r1, r5
 800abe2:	f7f6 fa95 	bl	8001110 <__aeabi_dadd>
 800abe6:	9002      	str	r0, [sp, #8]
 800abe8:	9103      	str	r1, [sp, #12]
 800abea:	9802      	ldr	r0, [sp, #8]
 800abec:	9903      	ldr	r1, [sp, #12]
 800abee:	0022      	movs	r2, r4
 800abf0:	002b      	movs	r3, r5
 800abf2:	f7f7 fc69 	bl	80024c8 <__aeabi_dsub>
 800abf6:	e7d2      	b.n	800ab9e <rint+0x6e>
 800abf8:	2e33      	cmp	r6, #51	; 0x33
 800abfa:	dd08      	ble.n	800ac0e <rint+0xde>
 800abfc:	2380      	movs	r3, #128	; 0x80
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	429e      	cmp	r6, r3
 800ac02:	d1cc      	bne.n	800ab9e <rint+0x6e>
 800ac04:	0002      	movs	r2, r0
 800ac06:	000b      	movs	r3, r1
 800ac08:	f7f6 fa82 	bl	8001110 <__aeabi_dadd>
 800ac0c:	e7c7      	b.n	800ab9e <rint+0x6e>
 800ac0e:	2601      	movs	r6, #1
 800ac10:	4d0a      	ldr	r5, [pc, #40]	; (800ac3c <rint+0x10c>)
 800ac12:	4276      	negs	r6, r6
 800ac14:	1952      	adds	r2, r2, r5
 800ac16:	40d6      	lsrs	r6, r2
 800ac18:	4206      	tst	r6, r0
 800ac1a:	d0c0      	beq.n	800ab9e <rint+0x6e>
 800ac1c:	0876      	lsrs	r6, r6, #1
 800ac1e:	4206      	tst	r6, r0
 800ac20:	d0d5      	beq.n	800abce <rint+0x9e>
 800ac22:	2180      	movs	r1, #128	; 0x80
 800ac24:	05c9      	lsls	r1, r1, #23
 800ac26:	4111      	asrs	r1, r2
 800ac28:	43b3      	bics	r3, r6
 800ac2a:	430b      	orrs	r3, r1
 800ac2c:	e7cf      	b.n	800abce <rint+0x9e>
 800ac2e:	46c0      	nop			; (mov r8, r8)
 800ac30:	fffffc01 	.word	0xfffffc01
 800ac34:	0800b050 	.word	0x0800b050
 800ac38:	000fffff 	.word	0x000fffff
 800ac3c:	fffffbed 	.word	0xfffffbed

0800ac40 <scalbn>:
 800ac40:	004b      	lsls	r3, r1, #1
 800ac42:	b570      	push	{r4, r5, r6, lr}
 800ac44:	0d5b      	lsrs	r3, r3, #21
 800ac46:	0014      	movs	r4, r2
 800ac48:	000a      	movs	r2, r1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10d      	bne.n	800ac6a <scalbn+0x2a>
 800ac4e:	004b      	lsls	r3, r1, #1
 800ac50:	085b      	lsrs	r3, r3, #1
 800ac52:	4303      	orrs	r3, r0
 800ac54:	d010      	beq.n	800ac78 <scalbn+0x38>
 800ac56:	4b27      	ldr	r3, [pc, #156]	; (800acf4 <scalbn+0xb4>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f7f7 f9c9 	bl	8001ff0 <__aeabi_dmul>
 800ac5e:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <scalbn+0xb8>)
 800ac60:	429c      	cmp	r4, r3
 800ac62:	da0a      	bge.n	800ac7a <scalbn+0x3a>
 800ac64:	4a25      	ldr	r2, [pc, #148]	; (800acfc <scalbn+0xbc>)
 800ac66:	4b26      	ldr	r3, [pc, #152]	; (800ad00 <scalbn+0xc0>)
 800ac68:	e019      	b.n	800ac9e <scalbn+0x5e>
 800ac6a:	4d26      	ldr	r5, [pc, #152]	; (800ad04 <scalbn+0xc4>)
 800ac6c:	42ab      	cmp	r3, r5
 800ac6e:	d108      	bne.n	800ac82 <scalbn+0x42>
 800ac70:	0002      	movs	r2, r0
 800ac72:	000b      	movs	r3, r1
 800ac74:	f7f6 fa4c 	bl	8001110 <__aeabi_dadd>
 800ac78:	bd70      	pop	{r4, r5, r6, pc}
 800ac7a:	000a      	movs	r2, r1
 800ac7c:	004b      	lsls	r3, r1, #1
 800ac7e:	0d5b      	lsrs	r3, r3, #21
 800ac80:	3b36      	subs	r3, #54	; 0x36
 800ac82:	4d21      	ldr	r5, [pc, #132]	; (800ad08 <scalbn+0xc8>)
 800ac84:	18e3      	adds	r3, r4, r3
 800ac86:	42ab      	cmp	r3, r5
 800ac88:	dd0c      	ble.n	800aca4 <scalbn+0x64>
 800ac8a:	4c20      	ldr	r4, [pc, #128]	; (800ad0c <scalbn+0xcc>)
 800ac8c:	4d20      	ldr	r5, [pc, #128]	; (800ad10 <scalbn+0xd0>)
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	da01      	bge.n	800ac96 <scalbn+0x56>
 800ac92:	4c1e      	ldr	r4, [pc, #120]	; (800ad0c <scalbn+0xcc>)
 800ac94:	4d1f      	ldr	r5, [pc, #124]	; (800ad14 <scalbn+0xd4>)
 800ac96:	0020      	movs	r0, r4
 800ac98:	0029      	movs	r1, r5
 800ac9a:	4a1c      	ldr	r2, [pc, #112]	; (800ad0c <scalbn+0xcc>)
 800ac9c:	4b1c      	ldr	r3, [pc, #112]	; (800ad10 <scalbn+0xd0>)
 800ac9e:	f7f7 f9a7 	bl	8001ff0 <__aeabi_dmul>
 800aca2:	e7e9      	b.n	800ac78 <scalbn+0x38>
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dd05      	ble.n	800acb4 <scalbn+0x74>
 800aca8:	4c1b      	ldr	r4, [pc, #108]	; (800ad18 <scalbn+0xd8>)
 800acaa:	051b      	lsls	r3, r3, #20
 800acac:	4022      	ands	r2, r4
 800acae:	431a      	orrs	r2, r3
 800acb0:	0011      	movs	r1, r2
 800acb2:	e7e1      	b.n	800ac78 <scalbn+0x38>
 800acb4:	001d      	movs	r5, r3
 800acb6:	3535      	adds	r5, #53	; 0x35
 800acb8:	da13      	bge.n	800ace2 <scalbn+0xa2>
 800acba:	4a18      	ldr	r2, [pc, #96]	; (800ad1c <scalbn+0xdc>)
 800acbc:	0fcb      	lsrs	r3, r1, #31
 800acbe:	4294      	cmp	r4, r2
 800acc0:	dd08      	ble.n	800acd4 <scalbn+0x94>
 800acc2:	4812      	ldr	r0, [pc, #72]	; (800ad0c <scalbn+0xcc>)
 800acc4:	4912      	ldr	r1, [pc, #72]	; (800ad10 <scalbn+0xd0>)
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <scalbn+0x8e>
 800acca:	4810      	ldr	r0, [pc, #64]	; (800ad0c <scalbn+0xcc>)
 800accc:	4911      	ldr	r1, [pc, #68]	; (800ad14 <scalbn+0xd4>)
 800acce:	4a0f      	ldr	r2, [pc, #60]	; (800ad0c <scalbn+0xcc>)
 800acd0:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <scalbn+0xd0>)
 800acd2:	e7e4      	b.n	800ac9e <scalbn+0x5e>
 800acd4:	4809      	ldr	r0, [pc, #36]	; (800acfc <scalbn+0xbc>)
 800acd6:	490a      	ldr	r1, [pc, #40]	; (800ad00 <scalbn+0xc0>)
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0c3      	beq.n	800ac64 <scalbn+0x24>
 800acdc:	4807      	ldr	r0, [pc, #28]	; (800acfc <scalbn+0xbc>)
 800acde:	4910      	ldr	r1, [pc, #64]	; (800ad20 <scalbn+0xe0>)
 800ace0:	e7c0      	b.n	800ac64 <scalbn+0x24>
 800ace2:	4c0d      	ldr	r4, [pc, #52]	; (800ad18 <scalbn+0xd8>)
 800ace4:	3336      	adds	r3, #54	; 0x36
 800ace6:	4022      	ands	r2, r4
 800ace8:	051b      	lsls	r3, r3, #20
 800acea:	4313      	orrs	r3, r2
 800acec:	0019      	movs	r1, r3
 800acee:	2200      	movs	r2, #0
 800acf0:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <scalbn+0xe4>)
 800acf2:	e7d4      	b.n	800ac9e <scalbn+0x5e>
 800acf4:	43500000 	.word	0x43500000
 800acf8:	ffff3cb0 	.word	0xffff3cb0
 800acfc:	c2f8f359 	.word	0xc2f8f359
 800ad00:	01a56e1f 	.word	0x01a56e1f
 800ad04:	000007ff 	.word	0x000007ff
 800ad08:	000007fe 	.word	0x000007fe
 800ad0c:	8800759c 	.word	0x8800759c
 800ad10:	7e37e43c 	.word	0x7e37e43c
 800ad14:	fe37e43c 	.word	0xfe37e43c
 800ad18:	800fffff 	.word	0x800fffff
 800ad1c:	0000c350 	.word	0x0000c350
 800ad20:	81a56e1f 	.word	0x81a56e1f
 800ad24:	3c900000 	.word	0x3c900000

0800ad28 <_init>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr

0800ad34 <_fini>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr
